{"init": "    private void init() {\n        thisYear= Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);\n\n        nameValues= new ConcurrentHashMap<Integer, KeyValue[]>();\n\n        StringBuilder regex= new StringBuilder();\n        List<Strategy> collector = new ArrayList<Strategy>();\n\n        Matcher patternMatcher= formatPattern.matcher(pattern);\n        if(!patternMatcher.lookingAt()) {\n            throw new IllegalArgumentException(\"Invalid pattern\");\n        }\n\n        currentFormatField= patternMatcher.group();\n        Strategy currentStrategy= getStrategy(currentFormatField);\n        for(;;) {\n            patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n            if(!patternMatcher.lookingAt()) {\n                nextStrategy = null;\n                break;\n            }\n            String nextFormatField= patternMatcher.group();\n            nextStrategy = getStrategy(nextFormatField);\n            if(currentStrategy.addRegex(this, regex)) {\n                collector.add(currentStrategy);\n            }\n            currentFormatField= nextFormatField;\n            currentStrategy= nextStrategy;\n        }\n        if(currentStrategy.addRegex(this, regex)) {\n            collector.add(currentStrategy);\n        }\n        currentFormatField= null;\n        strategies= collector.toArray(new Strategy[collector.size()]);\n        parsePattern= Pattern.compile(regex.toString());\n    }", "getTimeZone": "    public TimeZone getTimeZone() {\n        return timeZone;\n    }", "getLocale": "    public Locale getLocale() {\n        return locale;\n    }", "equals": "    public boolean equals(Object obj) {\n        if (! (obj instanceof FastDateParser) ) {\n            return false;\n        }\n        FastDateParser other = (FastDateParser) obj;\n        return pattern.equals(other.pattern)\n            && timeZone.equals(other.timeZone)\n            && locale.equals(other.locale);\n    }", "hashCode": "    public int hashCode() {\n        return pattern.hashCode() + 13 * (timeZone.hashCode() + 13 * locale.hashCode());\n    }", "toString": "    public String toString() {\n        return \"FastDateParser[\" + pattern + \",\" + locale + \",\" + timeZone.getID() + \"]\";\n    }", "readObject": "    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n        in.defaultReadObject();\n        init();\n    }", "parseObject": "    public Object parseObject(String source, ParsePosition pos) {\n        return parse(source, pos);\n    }", "parse": "    public Date parse(String source, ParsePosition pos) {\n        int offset= pos.getIndex();\n        Matcher matcher= parsePattern.matcher(source.substring(offset));\n        if(!matcher.lookingAt()) {\n            return null;\n        }\n        // timing tests indicate getting new instance is 19% faster than cloning\n        Calendar cal= Calendar.getInstance(timeZone, locale);\n        cal.clear();\n\n        for(int i=0; i<strategies.length;) {\n            Strategy strategy= strategies[i++];\n            strategy.setCalendar(this, cal, matcher.group(i));\n        }\n        pos.setIndex(offset+matcher.end());\n        return cal.getTime();\n    }", "escapeRegex": "    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n        boolean wasWhite= false;\n        for(int i= 0; i<value.length(); ++i) {\n            char c= value.charAt(i);\n            if(Character.isWhitespace(c)) {\n                if(!wasWhite) {\n                    wasWhite= true;\n                    regex.append(\"\\\\s*+\");\n                }\n                continue;\n            }\n            wasWhite= false;\n            switch(c) {\n            case '\\'':\n                if(unquote) {\n                    if(++i==value.length()) {\n                        return regex;\n                    }\n                    c= value.charAt(i);\n                }\n                break;\n            case '?':\n            case '[':\n            case ']':\n            case '(':\n            case ')':\n            case '{':\n            case '}':\n            case '\\\\':\n            case '|':\n            case '*':\n            case '+':\n            case '^':\n            case '$':\n            case '.':\n                regex.append('\\\\');\n            }\n            regex.append(c);\n        }\n        return regex;\n    }", "getDisplayNames": "    KeyValue[] getDisplayNames(int field) {\n        Integer fieldInt = Integer.valueOf(field);\n        KeyValue[] fieldKeyValues= nameValues.get(fieldInt);\n        if(fieldKeyValues==null) {\n            DateFormatSymbols symbols= DateFormatSymbols.getInstance(locale);\n            switch(field) {\n            case Calendar.ERA:\n                // DateFormatSymbols#getEras() only returns AD/BC or translations\n                // It does not work for the Thai Buddhist or Japanese Imperial calendars.\n                // see: https://issues.apache.org/jira/browse/TRINIDAD-2126\n                Calendar c = Calendar.getInstance(locale);\n                // N.B. Some calendars have different short and long symbols, e.g. ja_JP_JP\n                String[] shortEras = toArray(c.getDisplayNames(Calendar.ERA, Calendar.SHORT, locale));\n                String[] longEras = toArray(c.getDisplayNames(Calendar.ERA, Calendar.LONG, locale));\n                fieldKeyValues= createKeyValues(longEras, shortEras);\n                break;\n            case Calendar.DAY_OF_WEEK:\n                fieldKeyValues= createKeyValues(symbols.getWeekdays(), symbols.getShortWeekdays());\n                break;\n            case Calendar.AM_PM:\n                fieldKeyValues= createKeyValues(symbols.getAmPmStrings(), null);\n                break;\n            case Calendar.MONTH:\n                fieldKeyValues= createKeyValues(symbols.getMonths(), symbols.getShortMonths());\n                break;\n            default:\n                throw new IllegalArgumentException(\"Invalid field value \"+field);\n            }\n            KeyValue[] prior = nameValues.putIfAbsent(fieldInt, fieldKeyValues);\n            if(prior!=null) {\n                fieldKeyValues= prior;\n            }\n        }\n        return fieldKeyValues;\n    }", "createKeyValues": "    private static KeyValue[] createKeyValues(String[] longValues, String[] shortValues) {\n        KeyValue[] fieldKeyValues= new KeyValue[count(longValues)+count(shortValues)];\n        copy(fieldKeyValues, copy(fieldKeyValues, 0, longValues), shortValues);\n        Arrays.sort(fieldKeyValues, IGNORE_CASE_COMPARATOR);\n        return fieldKeyValues;\n    }", "count": "    private static int count(String[] values) {\n        int count= 0;\n        if(values!=null) {\n            for(String value : values) {\n                if(value.length()>0) {\n                    ++count;\n                }\n            }\n        }\n        return count;\n    }", "copy": "    private static int copy(KeyValue[] fieldKeyValues, int offset, String[] values) {\n        if(values!=null) {\n            for(int i= 0; i<values.length; ++i) {\n                String value= values[i];\n                if(value.length()>0) {\n                    fieldKeyValues[offset++]= new KeyValue(value, i);\n                }\n            }\n        }\n        return offset;\n    }", "isNextNumber": "    boolean isNextNumber() {\n        return nextStrategy!=null && nextStrategy.isNumber();\n    }", "getFieldWidth": "    int getFieldWidth() {\n        return currentFormatField.length();\n    }", "isNumber": "        public boolean isNumber() {\n            return false;\n        }", "addRegex": "        public boolean addRegex(FastDateParser parser, StringBuilder regex) {\n            regex.append(validTimeZoneChars);\n            return true;\n        }", "setCalendar": "        public void setCalendar(FastDateParser parser, Calendar cal, String value) {\n            TimeZone tz;\n            if(value.charAt(0)=='+' || value.charAt(0)=='-') {\n                tz= TimeZone.getTimeZone(\"GMT\"+value);\n            }\n            else if(value.startsWith(\"GMT\")) {\n                tz= TimeZone.getTimeZone(value);\n            }\n            else {\n                tz= tzNames.get(value);\n                if(tz==null) {\n                    throw new IllegalArgumentException(value + \" is not a supported timezone name\");\n                }\n            }\n            cal.setTimeZone(tz);\n        }", "modify": "        public int modify(int iValue) {\n            return iValue;\n        }"}