{"addValue": "    public void addValue(double value) {\n        sumImpl.increment(value);\n        sumsqImpl.increment(value);\n        minImpl.increment(value);\n        maxImpl.increment(value);\n        sumLogImpl.increment(value);\n        secondMoment.increment(value);\n        // If mean, variance or geomean have been overridden,\n        // need to increment these\n        if (!(meanImpl instanceof Mean)) {\n            meanImpl.increment(value);\n        }\n        if (!(varianceImpl instanceof Variance)) {\n            varianceImpl.increment(value);\n        }\n        if (!(geoMeanImpl instanceof GeometricMean)) {\n            geoMeanImpl.increment(value);\n        }\n        n++;\n    }", "getN": "    public long getN() {\n        return n;\n    }", "getMean": "    public double getMean() {\n        return meanImpl.getResult();\n    }", "getStandardDeviation": "    public double getStandardDeviation() {\n        double stdDev = Double.NaN;\n        if (getN() > 0) {\n            if (getN() > 1) {\n                stdDev = FastMath.sqrt(getVariance());\n            } else {\n                stdDev = 0.0;\n            }\n        }\n        return stdDev;\n    }", "getVariance": "    public double getVariance() {\n        return varianceImpl.getResult();\n    }", "getPopulationVariance": "    public double getPopulationVariance() {\n        Variance populationVariance = new Variance(secondMoment);\n        populationVariance.setBiasCorrected(false);\n        return populationVariance.getResult();\n    }", "getMin": "    public double getMin() {\n        return minImpl.getResult();\n    }", "getGeometricMean": "    public double getGeometricMean() {\n        return geoMeanImpl.getResult();\n    }", "getSecondMoment": "    public double getSecondMoment() {\n        return secondMoment.getResult();\n    }", "toString": "    public String toString() {\n        StringBuilder outBuffer = new StringBuilder();\n        String endl = \"\\n\";\n        outBuffer.append(\"SummaryStatistics:\").append(endl);\n        outBuffer.append(\"n: \").append(getN()).append(endl);\n        outBuffer.append(\"min: \").append(getMin()).append(endl);\n        outBuffer.append(\"max: \").append(getMax()).append(endl);\n        outBuffer.append(\"mean: \").append(getMean()).append(endl);\n        outBuffer.append(\"geometric mean: \").append(getGeometricMean())\n            .append(endl);\n        outBuffer.append(\"variance: \").append(getVariance()).append(endl);\n        outBuffer.append(\"sum of squares: \").append(getSumsq()).append(endl);\n        outBuffer.append(\"standard deviation: \").append(getStandardDeviation())\n            .append(endl);\n        outBuffer.append(\"sum of logs: \").append(getSumOfLogs()).append(endl);\n        return outBuffer.toString();\n    }", "clear": "    public void clear() {\n        this.n = 0;\n        minImpl.clear();\n        maxImpl.clear();\n        sumImpl.clear();\n        sumLogImpl.clear();\n        sumsqImpl.clear();\n        geoMeanImpl.clear();\n        secondMoment.clear();\n        if (meanImpl != mean) {\n            meanImpl.clear();\n        }\n        if (varianceImpl != variance) {\n            varianceImpl.clear();\n        }\n    }", "equals": "    public boolean equals(Object object) {\n        if (object == this) {\n            return true;\n        }\n        if (object instanceof SummaryStatistics == false) {\n            return false;\n        }\n        SummaryStatistics stat = (SummaryStatistics)object;\n        return Precision.equalsIncludingNaN(stat.getGeometricMean(), getGeometricMean()) &&\n               Precision.equalsIncludingNaN(stat.getMax(),           getMax())           &&\n               Precision.equalsIncludingNaN(stat.getMean(),          getMean())          &&\n               Precision.equalsIncludingNaN(stat.getMin(),           getMin())           &&\n               Precision.equalsIncludingNaN(stat.getN(),             getN())             &&\n               Precision.equalsIncludingNaN(stat.getSum(),           getSum())           &&\n               Precision.equalsIncludingNaN(stat.getSumsq(),         getSumsq())         &&\n               Precision.equalsIncludingNaN(stat.getVariance(),      getVariance());\n    }", "getSumImpl": "    public StorelessUnivariateStatistic getSumImpl() {\n        return sumImpl;\n    }", "setSumImpl": "    public void setSumImpl(StorelessUnivariateStatistic sumImpl) {\n        checkEmpty();\n        this.sumImpl = sumImpl;\n    }", "getSumsqImpl": "    public StorelessUnivariateStatistic getSumsqImpl() {\n        return sumsqImpl;\n    }", "setSumsqImpl": "    public void setSumsqImpl(StorelessUnivariateStatistic sumsqImpl) {\n        checkEmpty();\n        this.sumsqImpl = sumsqImpl;\n    }", "getMinImpl": "    public StorelessUnivariateStatistic getMinImpl() {\n        return minImpl;\n    }", "setMinImpl": "    public void setMinImpl(StorelessUnivariateStatistic minImpl) {\n        checkEmpty();\n        this.minImpl = minImpl;\n    }", "getMaxImpl": "    public StorelessUnivariateStatistic getMaxImpl() {\n        return maxImpl;\n    }", "setMaxImpl": "    public void setMaxImpl(StorelessUnivariateStatistic maxImpl) {\n        checkEmpty();\n        this.maxImpl = maxImpl;\n    }", "getSumLogImpl": "    public StorelessUnivariateStatistic getSumLogImpl() {\n        return sumLogImpl;\n    }", "setSumLogImpl": "    public void setSumLogImpl(StorelessUnivariateStatistic sumLogImpl) {\n        checkEmpty();\n        this.sumLogImpl = sumLogImpl;\n        geoMean.setSumLogImpl(sumLogImpl);\n    }", "getGeoMeanImpl": "    public StorelessUnivariateStatistic getGeoMeanImpl() {\n        return geoMeanImpl;\n    }", "setGeoMeanImpl": "    public void setGeoMeanImpl(StorelessUnivariateStatistic geoMeanImpl) {\n        checkEmpty();\n        this.geoMeanImpl = geoMeanImpl;\n    }", "getMeanImpl": "    public StorelessUnivariateStatistic getMeanImpl() {\n        return meanImpl;\n    }", "setMeanImpl": "    public void setMeanImpl(StorelessUnivariateStatistic meanImpl) {\n        checkEmpty();\n        this.meanImpl = meanImpl;\n    }", "getVarianceImpl": "    public StorelessUnivariateStatistic getVarianceImpl() {\n        return varianceImpl;\n    }", "setVarianceImpl": "    public void setVarianceImpl(StorelessUnivariateStatistic varianceImpl) {\n        checkEmpty();\n        this.varianceImpl = varianceImpl;\n    }", "copy": "    public static void copy(SummaryStatistics source, SummaryStatistics dest)\n        throws NullArgumentException {\n        MathUtils.checkNotNull(source);\n        MathUtils.checkNotNull(dest);\n        dest.maxImpl = source.maxImpl.copy();\n        dest.minImpl = source.minImpl.copy();\n        dest.sumImpl = source.sumImpl.copy();\n        dest.sumLogImpl = source.sumLogImpl.copy();\n        dest.sumsqImpl = source.sumsqImpl.copy();\n        dest.secondMoment = source.secondMoment.copy();\n        dest.n = source.n;\n\n        // Keep commons-math supplied statistics with embedded moments in synch\n        if (source.getVarianceImpl() instanceof Variance) {\n            dest.varianceImpl = new Variance(dest.secondMoment);\n        } else {\n            dest.varianceImpl = source.varianceImpl.copy();\n        }\n        if (source.meanImpl instanceof Mean) {\n            dest.meanImpl = new Mean(dest.secondMoment);\n        } else {\n            dest.meanImpl = source.meanImpl.copy();\n        }\n        if (source.getGeoMeanImpl() instanceof GeometricMean) {\n            dest.geoMeanImpl = new GeometricMean((SumOfLogs) dest.sumLogImpl);\n        } else {\n            dest.geoMeanImpl = source.geoMeanImpl.copy();\n        }\n\n        // Make sure that if stat == statImpl in source, same\n        // holds in dest; otherwise copy stat\n        if (source.geoMean == source.geoMeanImpl) {\n            dest.geoMean = (GeometricMean) dest.geoMeanImpl;\n        } else {\n            GeometricMean.copy(source.geoMean, dest.geoMean);\n        }\n        if (source.max == source.maxImpl) {\n            dest.max = (Max) dest.maxImpl;\n        } else {\n            Max.copy(source.max, dest.max);\n        }\n        if (source.mean == source.meanImpl) {\n            dest.mean = (Mean) dest.meanImpl;\n        } else {\n            Mean.copy(source.mean, dest.mean);\n        }\n        if (source.min == source.minImpl) {\n            dest.min = (Min) dest.minImpl;\n        } else {\n            Min.copy(source.min, dest.min);\n        }\n        if (source.sum == source.sumImpl) {\n            dest.sum = (Sum) dest.sumImpl;\n        } else {\n            Sum.copy(source.sum, dest.sum);\n        }\n        if (source.variance == source.varianceImpl) {\n            dest.variance = (Variance) dest.varianceImpl;\n        } else {\n            Variance.copy(source.variance, dest.variance);\n        }\n        if (source.sumLog == source.sumLogImpl) {\n            dest.sumLog = (SumOfLogs) dest.sumLogImpl;\n        } else {\n            SumOfLogs.copy(source.sumLog, dest.sumLog);\n        }\n        if (source.sumsq == source.sumsqImpl) {\n            dest.sumsq = (SumOfSquares) dest.sumsqImpl;\n        } else {\n            SumOfSquares.copy(source.sumsq, dest.sumsq);\n        }\n    }"}