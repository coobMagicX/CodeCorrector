{"copy": "    public OpenMapRealMatrix copy() {\n        return new OpenMapRealMatrix(this);\n    }", "getColumnDimension": "    public int getColumnDimension() {\n        return columns;\n    }", "add": "    public OpenMapRealMatrix add(OpenMapRealMatrix m) {\n\n        // safety check\n        MatrixUtils.checkAdditionCompatible(this, m);\n\n        final OpenMapRealMatrix out = new OpenMapRealMatrix(this);\n        for (OpenIntToDoubleHashMap.Iterator iterator = m.entries.iterator(); iterator.hasNext();) {\n            iterator.advance();\n            final int row = iterator.key() / columns;\n            final int col = iterator.key() - row * columns;\n            out.setEntry(row, col, getEntry(row, col) + iterator.value());\n        }\n\n        return out;\n\n    }", "subtract": "    public OpenMapRealMatrix subtract(OpenMapRealMatrix m) {\n        // Safety check.\n        MatrixUtils.checkAdditionCompatible(this, m);\n\n        final OpenMapRealMatrix out = new OpenMapRealMatrix(this);\n        for (OpenIntToDoubleHashMap.Iterator iterator = m.entries.iterator(); iterator.hasNext();) {\n            iterator.advance();\n            final int row = iterator.key() / columns;\n            final int col = iterator.key() - row * columns;\n            out.setEntry(row, col, getEntry(row, col) - iterator.value());\n        }\n\n        return out;\n    }", "multiply": "    public OpenMapRealMatrix multiply(OpenMapRealMatrix m) {\n        // Safety check.\n        MatrixUtils.checkMultiplicationCompatible(this, m);\n\n        final int outCols = m.getColumnDimension();\n        OpenMapRealMatrix out = new OpenMapRealMatrix(rows, outCols);\n        for (OpenIntToDoubleHashMap.Iterator iterator = entries.iterator(); iterator.hasNext();) {\n            iterator.advance();\n            final double value = iterator.value();\n            final int key      = iterator.key();\n            final int i        = key / columns;\n            final int k        = key % columns;\n            for (int j = 0; j < outCols; ++j) {\n                final int rightKey = m.computeKey(k, j);\n                if (m.entries.containsKey(rightKey)) {\n                    final int outKey = out.computeKey(i, j);\n                    final double outValue =\n                        out.entries.get(outKey) + value * m.entries.get(rightKey);\n                    if (outValue == 0.0) {\n                        out.entries.remove(outKey);\n                    } else {\n                        out.entries.put(outKey, outValue);\n                    }\n                }\n            }\n        }\n\n        return out;\n    }", "getRowDimension": "    public int getRowDimension() {\n        return rows;\n    }"}