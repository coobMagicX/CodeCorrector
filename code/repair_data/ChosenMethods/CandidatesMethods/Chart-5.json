{"getAutoSort": "    public boolean getAutoSort() {\n        return this.autoSort;\n    }", "getAllowDuplicateXValues": "    public boolean getAllowDuplicateXValues() {\n        return this.allowDuplicateXValues;\n    }", "getItemCount": "    public int getItemCount() {\n        return this.data.size();\n    }", "getItems": "    public List getItems() {\n        return Collections.unmodifiableList(this.data);\n    }", "getMaximumItemCount": "    public int getMaximumItemCount() {\n        return this.maximumItemCount;\n    }", "setMaximumItemCount": "    public void setMaximumItemCount(int maximum) {\n        this.maximumItemCount = maximum;\n        boolean dataRemoved = false;\n        while (this.data.size() > maximum) {\n            this.data.remove(0);\n            dataRemoved = true;\n        }\n        if (dataRemoved) {\n            fireSeriesChanged();\n        }\n    }", "add": "    public void add(XYDataItem item, boolean notify) {\n\n        if (item == null) {\n            throw new IllegalArgumentException(\"Null 'item' argument.\");\n        }\n\n        if (this.autoSort) {\n            int index = Collections.binarySearch(this.data, item);\n            if (index < 0) {\n                this.data.add(-index - 1, item);\n            }\n            else {\n                if (this.allowDuplicateXValues) {\n                    // need to make sure we are adding *after* any duplicates\n                    int size = this.data.size();\n                    while (index < size\n                           && item.compareTo(this.data.get(index)) == 0) {\n                        index++;\n                    }\n                    if (index < this.data.size()) {\n                        this.data.add(index, item);\n                    }\n                    else {\n                        this.data.add(item);\n                    }\n                }\n                else {\n                    throw new SeriesException(\"X-value already exists.\");\n                }\n            }\n        }\n        else {\n            if (!this.allowDuplicateXValues) {\n                // can't allow duplicate values, so we need to check whether\n                // there is an item with the given x-value already\n                int index = indexOf(item.getX());\n                if (index >= 0) {\n                    throw new SeriesException(\"X-value already exists.\");\n                }\n            }\n            this.data.add(item);\n        }\n        if (getItemCount() > this.maximumItemCount) {\n            this.data.remove(0);\n        }\n        if (notify) {\n            fireSeriesChanged();\n        }\n    }", "delete": "    public void delete(int start, int end) {\n        for (int i = start; i <= end; i++) {\n            this.data.remove(start);\n        }\n        fireSeriesChanged();\n    }", "remove": "    public XYDataItem remove(Number x) {\n        return remove(indexOf(x));\n    }", "clear": "    public void clear() {\n        if (this.data.size() > 0) {\n            this.data.clear();\n            fireSeriesChanged();\n        }\n    }", "getDataItem": "    public XYDataItem getDataItem(int index) {\n        return (XYDataItem) this.data.get(index);\n    }", "getX": "    public Number getX(int index) {\n        return getDataItem(index).getX();\n    }", "getY": "    public Number getY(int index) {\n        return getDataItem(index).getY();\n    }", "updateByIndex": "    public void updateByIndex(int index, Number y) {\n        XYDataItem item = getDataItem(index);\n        item.setY(y);\n        fireSeriesChanged();\n    }", "update": "    public void update(Number x, Number y) {\n        int index = indexOf(x);\n        if (index < 0) {\n            throw new SeriesException(\"No observation for x = \" + x);\n        }\n        else {\n            XYDataItem item = getDataItem(index);\n            item.setY(y);\n            fireSeriesChanged();\n        }\n    }", "addOrUpdate": "    public XYDataItem addOrUpdate(Number x, Number y) {\n        if (x == null) {\n            throw new IllegalArgumentException(\"Null 'x' argument.\");\n        }\n\n        // if we get to here, we know that duplicate X values are not permitted\n        XYDataItem overwritten = null;\n        int index = indexOf(x);\n        if (index >= 0 && !this.allowDuplicateXValues) {\n            XYDataItem existing = (XYDataItem) this.data.get(index);\n            try {\n                overwritten = (XYDataItem) existing.clone();\n            }\n            catch (CloneNotSupportedException e) {\n                throw new SeriesException(\"Couldn't clone XYDataItem!\");\n            }\n            existing.setY(y);\n        }\n        else {\n            // if the series is sorted, the negative index is a result from\n            // Collections.binarySearch() and tells us where to insert the\n            // new item...otherwise it will be just -1 and we should just\n            // append the value to the list...\n            if (this.autoSort) {\n                this.data.add(-index - 1, new XYDataItem(x, y));\n            }\n            else {\n                this.data.add(new XYDataItem(x, y));\n            }\n            // check if this addition will exceed the maximum item count...\n            if (getItemCount() > this.maximumItemCount) {\n                this.data.remove(0);\n            }\n        }\n        fireSeriesChanged();\n        return overwritten;\n    }", "indexOf": "    public int indexOf(Number x) {\n        if (this.autoSort) {\n            return Collections.binarySearch(this.data, new XYDataItem(x, null));\n        }\n        else {\n            for (int i = 0; i < this.data.size(); i++) {\n                XYDataItem item = (XYDataItem) this.data.get(i);\n                if (item.getX().equals(x)) {\n                    return i;\n                }\n            }\n            return -1;\n        }\n    }", "toArray": "    public double[][] toArray() {\n        int itemCount = getItemCount();\n        double[][] result = new double[2][itemCount];\n        for (int i = 0; i < itemCount; i++) {\n            result[0][i] = this.getX(i).doubleValue();\n            Number y = getY(i);\n            if (y != null) {\n                result[1][i] = y.doubleValue();\n            }\n            else {\n                result[1][i] = Double.NaN;\n            }\n        }\n        return result;\n    }", "clone": "    public Object clone() throws CloneNotSupportedException {\n        XYSeries clone = (XYSeries) super.clone();\n        clone.data = (List) ObjectUtilities.deepClone(this.data);\n        return clone;\n    }", "createCopy": "    public XYSeries createCopy(int start, int end)\n        throws CloneNotSupportedException {\n\n        XYSeries copy = (XYSeries) super.clone();\n        copy.data = new java.util.ArrayList();\n        if (this.data.size() > 0) {\n            for (int index = start; index <= end; index++) {\n                XYDataItem item = (XYDataItem) this.data.get(index);\n                XYDataItem clone = (XYDataItem) item.clone();\n                try {\n                    copy.add(clone);\n                }\n                catch (SeriesException e) {\n                    System.err.println(\"Unable to add cloned data item.\");\n                }\n            }\n        }\n        return copy;\n\n    }", "equals": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof XYSeries)) {\n            return false;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        XYSeries that = (XYSeries) obj;\n        if (this.maximumItemCount != that.maximumItemCount) {\n            return false;\n        }\n        if (this.autoSort != that.autoSort) {\n            return false;\n        }\n        if (this.allowDuplicateXValues != that.allowDuplicateXValues) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.data, that.data)) {\n            return false;\n        }\n        return true;\n    }", "hashCode": "    public int hashCode() {\n        int result = super.hashCode();\n        // it is too slow to look at every data item, so let's just look at\n        // the first, middle and last items...\n        int count = getItemCount();\n        if (count > 0) {\n            XYDataItem item = getDataItem(0);\n            result = 29 * result + item.hashCode();\n        }\n        if (count > 1) {\n            XYDataItem item = getDataItem(count - 1);\n            result = 29 * result + item.hashCode();\n        }\n        if (count > 2) {\n            XYDataItem item = getDataItem(count / 2);\n            result = 29 * result + item.hashCode();\n        }\n        result = 29 * result + this.maximumItemCount;\n        result = 29 * result + (this.autoSort ? 1 : 0);\n        result = 29 * result + (this.allowDuplicateXValues ? 1 : 0);\n        return result;\n    }"}