{"withoutSource": "  static LightweightMessageFormatter withoutSource() {\n    return new LightweightMessageFormatter();\n  }", "formatError": "  public String formatError(JSError error) {\n    return format(error, false);\n  }", "formatWarning": "  public String formatWarning(JSError warning) {\n    return format(warning, true);\n  }", "format": "  private String format(JSError error, boolean warning) {\n    // extract source excerpt\n    SourceExcerptProvider source = getSource();\n    String sourceExcerpt = source == null ? null :\n        excerpt.get(\n            source, error.sourceName, error.lineNumber, excerptFormatter);\n\n    // formatting the message\n    StringBuilder b = new StringBuilder();\n    if (error.sourceName != null) {\n      b.append(error.sourceName);\n      if (error.lineNumber > 0) {\n        b.append(':');\n        b.append(error.lineNumber);\n      }\n      b.append(\": \");\n    }\n\n    b.append(getLevelName(warning ? CheckLevel.WARNING : CheckLevel.ERROR));\n    b.append(\" - \");\n\n    b.append(error.description);\n    b.append('\\n');\n    if (sourceExcerpt != null) {\n      b.append(sourceExcerpt);\n      b.append('\\n');\n      int charno = error.getCharno();\n\n      // padding equal to the excerpt and arrow at the end\n      // charno == sourceExpert.length() means something is missing\n      // at the end of the line\n      if (excerpt.equals(LINE)\n          && 0 <= charno && charno < sourceExcerpt.length()) {\n        for (int i = 0; i < charno; i++) {\n          char c = sourceExcerpt.charAt(i);\n          if (Character.isWhitespace(c)) {\n            b.append(c);\n          } else {\n            b.append(' ');\n          }\n        }\n        b.append(\"^\\n\");\n      }\n    }\n    return b.toString();\n  }", "formatLine": "    public String formatLine(String line, int lineNumber) {\n      return line;\n    }", "formatRegion": "    public String formatRegion(Region region) {\n      if (region == null) {\n        return null;\n      }\n      String code = region.getSourceExcerpt();\n      if (code.length() == 0) {\n        return null;\n      }\n\n      // max length of the number display\n      int numberLength = Integer.toString(region.getEndingLineNumber())\n          .length();\n\n      // formatting\n      StringBuilder builder = new StringBuilder(code.length() * 2);\n      int start = 0;\n      int end = code.indexOf('\\n', start);\n      int lineNumber = region.getBeginningLineNumber();\n      while (start >= 0) {\n        // line extraction\n        String line;\n        if (end < 0) {\n          line = code.substring(start);\n          if (line.length() == 0) {\n            return builder.substring(0, builder.length() - 1);\n          }\n        } else {\n          line = code.substring(start, end);\n        }\n        builder.append(\"  \");\n\n        // nice spaces for the line number\n        int spaces = numberLength - Integer.toString(lineNumber).length();\n        builder.append(Strings.repeat(\" \", spaces));\n        builder.append(lineNumber);\n        builder.append(\"| \");\n\n        // end & update\n        if (end < 0) {\n          builder.append(line);\n          start = -1;\n        } else {\n          builder.append(line);\n          builder.append('\\n');\n          start = end + 1;\n          end = code.indexOf('\\n', start);\n          lineNumber++;\n        }\n      }\n      return builder.toString();\n    }"}