{"abs": "    public Fraction abs() {\n        Fraction ret;\n        if (numerator >= 0) {\n            ret = this;\n        } else {\n            ret = negate();\n        }\n        return ret;\n    }", "doubleValue": "    public double doubleValue() {\n        return (double)numerator / (double)denominator;\n    }", "equals": "    public boolean equals(Object other) {\n        if (this == other) {\n            return true;\n        }\n        if (other instanceof Fraction) {\n            // since fractions are always in lowest terms, numerators and\n            // denominators can be compared directly for equality.\n            Fraction rhs = (Fraction)other;\n            return (numerator == rhs.numerator) &&\n                (denominator == rhs.denominator);\n        }\n        return false;\n    }", "negate": "    public Fraction negate() {\n        if (numerator==Integer.MIN_VALUE) {\n            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION, numerator, denominator);\n        }\n        return new Fraction(-numerator, denominator);\n    }", "reciprocal": "    public Fraction reciprocal() {\n        return new Fraction(denominator, numerator);\n    }", "add": "    public Fraction add(final int i) {\n        return new Fraction(numerator + i * denominator, denominator);\n    }", "subtract": "    public Fraction subtract(final int i) {\n        return new Fraction(numerator - i * denominator, denominator);\n    }", "multiply": "    public Fraction multiply(final int i) {\n        return new Fraction(numerator * i, denominator);\n    }", "divide": "    public Fraction divide(final int i) {\n        return new Fraction(numerator, denominator * i);\n    }"}