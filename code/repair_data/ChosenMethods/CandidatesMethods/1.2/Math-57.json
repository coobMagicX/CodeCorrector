{"cluster": "    public List<Cluster<T>> cluster(final Collection<T> points,\n                                    final int k, final int maxIterations) {\n        // create the initial clusters\n        List<Cluster<T>> clusters = chooseInitialCenters(points, k, random);\n        assignPointsToClusters(clusters, points);\n\n        // iterate through updating the centers until we're done\n        final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n        for (int count = 0; count < max; count++) {\n            boolean clusteringChanged = false;\n            List<Cluster<T>> newClusters = new ArrayList<Cluster<T>>();\n            for (final Cluster<T> cluster : clusters) {\n                final T newCenter;\n                if (cluster.getPoints().isEmpty()) {\n                    switch (emptyStrategy) {\n                        case LARGEST_VARIANCE :\n                            newCenter = getPointFromLargestVarianceCluster(clusters);\n                            break;\n                        case LARGEST_POINTS_NUMBER :\n                            newCenter = getPointFromLargestNumberCluster(clusters);\n                            break;\n                        case FARTHEST_POINT :\n                            newCenter = getFarthestPoint(clusters);\n                            break;\n                        default :\n                            throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);\n                    }\n                    clusteringChanged = true;\n                } else {\n                    newCenter = cluster.getCenter().centroidOf(cluster.getPoints());\n                    if (!newCenter.equals(cluster.getCenter())) {\n                        clusteringChanged = true;\n                    }\n                }\n                newClusters.add(new Cluster<T>(newCenter));\n            }\n            if (!clusteringChanged) {\n                return clusters;\n            }\n            assignPointsToClusters(newClusters, points);\n            clusters = newClusters;\n        }\n        return clusters;\n    }", "assignPointsToClusters": "    private static <T extends Clusterable<T>> void\n        assignPointsToClusters(final Collection<Cluster<T>> clusters, final Collection<T> points) {\n        for (final T p : points) {\n            Cluster<T> cluster = getNearestCluster(clusters, p);\n            cluster.addPoint(p);\n        }\n    }", "chooseInitialCenters": "    private static <T extends Clusterable<T>> List<Cluster<T>>\n        chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n\n        final List<T> pointSet = new ArrayList<T>(points);\n        final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n\n        // Choose one center uniformly at random from among the data points.\n        final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n        resultSet.add(new Cluster<T>(firstPoint));\n\n        final double[] dx2 = new double[pointSet.size()];\n        while (resultSet.size() < k) {\n            // For each data point x, compute D(x), the distance between x and\n            // the nearest center that has already been chosen.\n            int sum = 0;\n            for (int i = 0; i < pointSet.size(); i++) {\n                final T p = pointSet.get(i);\n                final Cluster<T> nearest = getNearestCluster(resultSet, p);\n                final double d = p.distanceFrom(nearest.getCenter());\n                sum += d * d;\n                dx2[i] = sum;\n            }\n\n            // Add one new data point as a center. Each point x is chosen with\n            // probability proportional to D(x)2\n            final double r = random.nextDouble() * sum;\n            for (int i = 0 ; i < dx2.length; i++) {\n                if (dx2[i] >= r) {\n                    final T p = pointSet.remove(i);\n                    resultSet.add(new Cluster<T>(p));\n                    break;\n                }\n            }\n        }\n\n        return resultSet;\n\n    }", "getPointFromLargestVarianceCluster": "    private T getPointFromLargestVarianceCluster(final Collection<Cluster<T>> clusters) {\n\n        double maxVariance = Double.NEGATIVE_INFINITY;\n        Cluster<T> selected = null;\n        for (final Cluster<T> cluster : clusters) {\n            if (!cluster.getPoints().isEmpty()) {\n\n                // compute the distance variance of the current cluster\n                final T center = cluster.getCenter();\n                final Variance stat = new Variance();\n                for (final T point : cluster.getPoints()) {\n                    stat.increment(point.distanceFrom(center));\n                }\n                final double variance = stat.getResult();\n\n                // select the cluster with the largest variance\n                if (variance > maxVariance) {\n                    maxVariance = variance;\n                    selected = cluster;\n                }\n\n            }\n        }\n\n        // did we find at least one non-empty cluster ?\n        if (selected == null) {\n            throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);\n        }\n\n        // extract a random point from the cluster\n        final List<T> selectedPoints = selected.getPoints();\n        return selectedPoints.remove(random.nextInt(selectedPoints.size()));\n\n    }", "getPointFromLargestNumberCluster": "    private T getPointFromLargestNumberCluster(final Collection<Cluster<T>> clusters) {\n\n        int maxNumber = 0;\n        Cluster<T> selected = null;\n        for (final Cluster<T> cluster : clusters) {\n\n            // get the number of points of the current cluster\n            final int number = cluster.getPoints().size();\n\n            // select the cluster with the largest number of points\n            if (number > maxNumber) {\n                maxNumber = number;\n                selected = cluster;\n            }\n\n        }\n\n        // did we find at least one non-empty cluster ?\n        if (selected == null) {\n            throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);\n        }\n\n        // extract a random point from the cluster\n        final List<T> selectedPoints = selected.getPoints();\n        return selectedPoints.remove(random.nextInt(selectedPoints.size()));\n\n    }", "getFarthestPoint": "    private T getFarthestPoint(final Collection<Cluster<T>> clusters) {\n\n        double maxDistance = Double.NEGATIVE_INFINITY;\n        Cluster<T> selectedCluster = null;\n        int selectedPoint = -1;\n        for (final Cluster<T> cluster : clusters) {\n\n            // get the farthest point\n            final T center = cluster.getCenter();\n            final List<T> points = cluster.getPoints();\n            for (int i = 0; i < points.size(); ++i) {\n                final double distance = points.get(i).distanceFrom(center);\n                if (distance > maxDistance) {\n                    maxDistance     = distance;\n                    selectedCluster = cluster;\n                    selectedPoint   = i;\n                }\n            }\n\n        }\n\n        // did we find at least one non-empty cluster ?\n        if (selectedCluster == null) {\n            throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);\n        }\n\n        return selectedCluster.getPoints().remove(selectedPoint);\n\n    }", "getNearestCluster": "    private static <T extends Clusterable<T>> Cluster<T>\n        getNearestCluster(final Collection<Cluster<T>> clusters, final T point) {\n        double minDistance = Double.MAX_VALUE;\n        Cluster<T> minCluster = null;\n        for (final Cluster<T> c : clusters) {\n            final double distance = point.distanceFrom(c.getCenter());\n            if (distance < minDistance) {\n                minDistance = distance;\n                minCluster = c;\n            }\n        }\n        return minCluster;\n    }"}