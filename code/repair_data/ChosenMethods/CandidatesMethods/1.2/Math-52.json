{"revert": "  public Rotation revert() {\n    return new Rotation(-q0, q1, q2, q3, false);\n  }", "getQ0": "  public double getQ0() {\n    return q0;\n  }", "getQ1": "  public double getQ1() {\n    return q1;\n  }", "getQ2": "  public double getQ2() {\n    return q2;\n  }", "getQ3": "  public double getQ3() {\n    return q3;\n  }", "applyInverseTo": "  public Rotation applyInverseTo(Rotation r) {\n    return new Rotation(-r.q0 * q0 - (r.q1 * q1 + r.q2 * q2 + r.q3 * q3),\n                        -r.q1 * q0 + r.q0 * q1 + (r.q2 * q3 - r.q3 * q2),\n                        -r.q2 * q0 + r.q0 * q2 + (r.q3 * q1 - r.q1 * q3),\n                        -r.q3 * q0 + r.q0 * q3 + (r.q1 * q2 - r.q2 * q1),\n                        false);\n  }", "distance": "  public static double distance(Rotation r1, Rotation r2) {\n      return r1.applyInverseTo(r2).getAngle();\n  }"}