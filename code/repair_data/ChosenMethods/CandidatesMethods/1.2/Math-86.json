{"getDeterminant": "    public double getDeterminant() {\n        double determinant = 1.0;\n        for (int i = 0; i < lTData.length; ++i) {\n            double lTii = lTData[i][i];\n            determinant *= lTii * lTii;\n        }\n        return determinant;\n    }", "isNonSingular": "        public boolean isNonSingular() {\n            // if we get this far, the matrix was positive definite, hence non-singular\n            return true;\n        }", "solve": "        public RealMatrix solve(RealMatrix b)\n            throws IllegalArgumentException, InvalidMatrixException {\n\n            final int m = lTData.length;\n            if (b.getRowDimension() != m) {\n                throw MathRuntimeException.createIllegalArgumentException(\n                        \"dimensions mismatch: got {0}x{1} but expected {2}x{3}\",\n                        b.getRowDimension(), b.getColumnDimension(), m, \"n\");\n            }\n\n            final int nColB = b.getColumnDimension();\n            double[][] x = b.getData();\n\n            // Solve LY = b\n            for (int j = 0; j < m; j++) {\n                final double[] lJ = lTData[j];\n                final double lJJ = lJ[j];\n                final double[] xJ = x[j];\n                for (int k = 0; k < nColB; ++k) {\n                    xJ[k] /= lJJ;\n                }\n                for (int i = j + 1; i < m; i++) {\n                    final double[] xI = x[i];\n                    final double lJI = lJ[i];\n                    for (int k = 0; k < nColB; ++k) {\n                        xI[k] -= xJ[k] * lJI;\n                    }\n                }\n            }\n\n            // Solve LTX = Y\n            for (int j = m - 1; j >= 0; j--) {\n                final double lJJ = lTData[j][j];\n                final double[] xJ = x[j];\n                for (int k = 0; k < nColB; ++k) {\n                    xJ[k] /= lJJ;\n                }\n                for (int i = 0; i < j; i++) {\n                    final double[] xI = x[i];\n                    final double lIJ = lTData[i][j];\n                    for (int k = 0; k < nColB; ++k) {\n                        xI[k] -= xJ[k] * lIJ;\n                    }\n                }\n            }\n\n            return new RealMatrixImpl(x, false);\n\n        }", "getInverse": "        public RealMatrix getInverse() throws InvalidMatrixException {\n            return solve(MatrixUtils.createRealIdentityMatrix(lTData.length));\n        }"}