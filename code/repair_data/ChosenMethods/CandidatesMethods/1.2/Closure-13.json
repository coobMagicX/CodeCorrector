{"reset": "    void reset() {\n      changed = false;\n      traverseChildScopes = true;\n    }", "peek": "    ScopeState peek() {\n      return states.get(currentDepth);\n    }", "push": "    void push() {\n      currentDepth++;\n      if (states.size() <= currentDepth) {\n        states.add(new ScopeState());\n      } else {\n        states.get(currentDepth).reset();\n      }\n    }", "pop": "    void pop() {\n      currentDepth--;\n    }", "reportChange": "    public void reportChange() {\n      traversalState.peek().changed = true;\n    }", "getCompiler": "  public AbstractCompiler getCompiler() {\n    return compiler;\n  }", "process": "  public void process(Node externs, Node root) {\n    PeepholeChangeHandler handler = new PeepholeChangeHandler();\n    compiler.addChangeHandler(handler);\n    beginTraversal();\n    traverse(root);\n    endTraversal();\n    compiler.removeChangeHandler(handler);\n  }", "traverse": "  private void traverse(Node node) {\n    // The goal here is to avoid retraversing\n    // the entire AST to catch newly created opportunities.\n    // So we track whether a \"unit of code\" has changed,\n    // and revisit immediately.\n    if (!shouldVisit(node)) {\n      return;\n    }\n\n    int visits = 0;\n    do {\n      Node c = node.getFirstChild();\n      while(c != null) {\n        traverse(c);\n        Node next = c.getNext();\n        c = next;\n      }\n\n      visit(node);\n      visits++;\n\n      Preconditions.checkState(visits < 10000, \"too many interations\");\n    } while (shouldRetraverse(node));\n\n    exitNode(node);\n  }", "shouldRetraverse": "  private boolean shouldRetraverse(Node node) {\n    if (node.getParent() != null && node.isFunction() || node.isScript()) {\n      ScopeState state = traversalState.peek();\n      if (state.changed) {\n        // prepare to re-visit the scope:\n        // when revisiting, only visit the immediate scope\n        // this reduces the cost of getting to a fixed\n        // point in global scope.\n        state.changed = false;\n        state.traverseChildScopes = false;\n        return true;\n      }\n    }\n    return false;\n  }", "shouldVisit": "  private boolean shouldVisit(Node node) {\n    if (node.isFunction() || node.isScript()) {\n      ScopeState previous = traversalState.peek();\n      if (!previous.traverseChildScopes) {\n        return false;\n      }\n      traversalState.push();\n    }\n    return true;\n  }", "exitNode": "  private void exitNode(Node node) {\n    if (node.isFunction() || node.isScript()) {\n      traversalState.pop();\n    }\n  }", "visit": "  public void visit(Node n) {\n    Node currentVersionOfNode = n;\n    boolean somethingChanged = false;\n\n    do {\n      somethingChanged = false;\n      for (AbstractPeepholeOptimization optimization : peepholeOptimizations) {\n        Node newVersionOfNode =\n            optimization.optimizeSubtree(currentVersionOfNode);\n\n        if (newVersionOfNode != currentVersionOfNode) {\n          somethingChanged = true;\n\n          currentVersionOfNode = newVersionOfNode;\n        }\n\n        if (currentVersionOfNode == null) {\n          return;\n        }\n      }\n    } while(somethingChanged);\n  }"}