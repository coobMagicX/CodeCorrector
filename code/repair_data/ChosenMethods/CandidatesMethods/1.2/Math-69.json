{"getCorrelationMatrix": "    public RealMatrix getCorrelationMatrix() {\n        return correlationMatrix;\n    }", "getCorrelationStandardErrors": "    public RealMatrix getCorrelationStandardErrors() {\n        int nVars = correlationMatrix.getColumnDimension();\n        double[][] out = new double[nVars][nVars];\n        for (int i = 0; i < nVars; i++) {\n            for (int j = 0; j < nVars; j++) {\n                double r = correlationMatrix.getEntry(i, j);\n                out[i][j] = Math.sqrt((1 - r * r) /(nObs - 2));\n            }\n        }\n        return new BlockRealMatrix(out);\n    }", "getCorrelationPValues": "    public RealMatrix getCorrelationPValues() throws MathException {\n        TDistribution tDistribution = new TDistributionImpl(nObs - 2);\n        int nVars = correlationMatrix.getColumnDimension();\n        double[][] out = new double[nVars][nVars];\n        for (int i = 0; i < nVars; i++) {\n            for (int j = 0; j < nVars; j++) {\n                if (i == j) {\n                    out[i][j] = 0d;\n                } else {\n                    double r = correlationMatrix.getEntry(i, j);\n                    double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n                    out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n                }\n            }\n        }\n        return new BlockRealMatrix(out);\n    }", "computeCorrelationMatrix": "    public RealMatrix computeCorrelationMatrix(double[][] data) {\n       return computeCorrelationMatrix(new BlockRealMatrix(data));\n    }", "correlation": "    public double correlation(final double[] xArray, final double[] yArray) throws IllegalArgumentException {\n        SimpleRegression regression = new SimpleRegression();\n        if(xArray.length == yArray.length && xArray.length > 1) {\n            for(int i=0; i<xArray.length; i++) {\n                regression.addData(xArray[i], yArray[i]);\n            }\n            return regression.getR();\n        }\n        else {\n            throw MathRuntimeException.createIllegalArgumentException(\n                    \"invalid array dimensions. xArray has size {0}; yArray has {1} elements\",\n                    xArray.length, yArray.length);\n        }\n    }", "covarianceToCorrelation": "    public RealMatrix covarianceToCorrelation(RealMatrix covarianceMatrix) {\n        int nVars = covarianceMatrix.getColumnDimension();\n        RealMatrix outMatrix = new BlockRealMatrix(nVars, nVars);\n        for (int i = 0; i < nVars; i++) {\n            double sigma = Math.sqrt(covarianceMatrix.getEntry(i, i));\n            outMatrix.setEntry(i, i, 1d);\n            for (int j = 0; j < i; j++) {\n                double entry = covarianceMatrix.getEntry(i, j) /\n                       (sigma * Math.sqrt(covarianceMatrix.getEntry(j, j)));\n                outMatrix.setEntry(i, j, entry);\n                outMatrix.setEntry(j, i, entry);\n            }\n        }\n        return outMatrix;\n    }", "checkSufficientData": "    private void checkSufficientData(final RealMatrix matrix) {\n        int nRows = matrix.getRowDimension();\n        int nCols = matrix.getColumnDimension();\n        if (nRows < 2 || nCols < 2) {\n            throw MathRuntimeException.createIllegalArgumentException(\n                    \"insufficient data: only {0} rows and {1} columns.\",\n                    nRows, nCols);\n        }\n    }"}