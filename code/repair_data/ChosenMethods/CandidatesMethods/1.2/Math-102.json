{"chiSquare": "    public double chiSquare(long[][] counts) throws IllegalArgumentException {\n        \n        checkArray(counts);\n        int nRows = counts.length;\n        int nCols = counts[0].length;\n        \n        // compute row, column and total sums\n        double[] rowSum = new double[nRows];\n        double[] colSum = new double[nCols];\n        double total = 0.0d;\n        for (int row = 0; row < nRows; row++) {\n            for (int col = 0; col < nCols; col++) {\n                rowSum[row] += (double) counts[row][col];\n                colSum[col] += (double) counts[row][col];\n                total += (double) counts[row][col];\n            }\n        }\n        \n        // compute expected counts and chi-square\n        double sumSq = 0.0d;\n        double expected = 0.0d;\n        for (int row = 0; row < nRows; row++) {\n            for (int col = 0; col < nCols; col++) {\n                expected = (rowSum[row] * colSum[col]) / total;\n                sumSq += (((double) counts[row][col] - expected) * \n                        ((double) counts[row][col] - expected)) / expected; \n            }\n        } \n        return sumSq;\n    }", "chiSquareTest": "    public boolean chiSquareTest(long[][] counts, double alpha)\n    throws IllegalArgumentException, MathException {\n        if ((alpha <= 0) || (alpha > 0.5)) {\n            throw new IllegalArgumentException(\"bad significance level: \" + alpha);\n        }\n        return (chiSquareTest(counts) < alpha);\n    }", "chiSquareDataSetsComparison": "    public double chiSquareDataSetsComparison(long[] observed1, long[] observed2)\n        throws IllegalArgumentException {\n        \n        // Make sure lengths are same\n        if ((observed1.length < 2) || (observed1.length != observed2.length)) {\n            throw new IllegalArgumentException(\n                    \"oberved1, observed2 array lengths incorrect\");\n        }\n        // Ensure non-negative counts\n        if (!isNonNegative(observed1) || !isNonNegative(observed2)) {\n            throw new IllegalArgumentException(\n                \"observed counts must be non-negative\");\n        }\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n        boolean unequalCounts = false;\n        double weight = 0.0;\n        for (int i = 0; i < observed1.length; i++) {\n            countSum1 += observed1[i];\n            countSum2 += observed2[i];   \n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 * countSum2 == 0) {\n            throw new IllegalArgumentException(\n             \"observed counts cannot all be 0\"); \n        }\n        // Compare and compute weight only if different\n        unequalCounts = (countSum1 != countSum2);\n        if (unequalCounts) {\n            weight = Math.sqrt((double) countSum1 / (double) countSum2);\n        }\n        // Compute ChiSquare statistic\n        double sumSq = 0.0d;\n        double dev = 0.0d;\n        double obs1 = 0.0d;\n        double obs2 = 0.0d;\n        for (int i = 0; i < observed1.length; i++) {\n            if (observed1[i] == 0 && observed2[i] == 0) {\n                throw new IllegalArgumentException(\n                        \"observed counts must not both be zero\");\n            } else {\n                obs1 = (double) observed1[i];\n                obs2 = (double) observed2[i];\n                if (unequalCounts) { // apply weights\n                    dev = obs1/weight - obs2 * weight;\n                } else {\n                    dev = obs1 - obs2;\n                }\n                sumSq += (dev * dev) / (obs1 + obs2);\n            }\n        }\n        return sumSq;\n    }", "chiSquareTestDataSetsComparison": "    public boolean chiSquareTestDataSetsComparison(long[] observed1, long[] observed2,\n            double alpha) throws IllegalArgumentException, MathException {\n        if ((alpha <= 0) || (alpha > 0.5)) {\n            throw new IllegalArgumentException(\n                    \"bad significance level: \" + alpha);\n        }\n        return (chiSquareTestDataSetsComparison(observed1, observed2) < alpha);\n    }", "getDistributionFactory": "    protected DistributionFactory getDistributionFactory() {\n        return DistributionFactory.newInstance();\n    }", "isRectangular": "    private boolean isRectangular(long[][] in) {\n        for (int i = 1; i < in.length; i++) {\n            if (in[i].length != in[0].length) {\n                return false;\n            }\n        }  \n        return true;\n    }", "isPositive": "    private boolean isPositive(double[] in) {\n        for (int i = 0; i < in.length; i ++) {\n            if (in[i] <= 0) {\n                return false;\n            }\n        }\n        return true;\n    }", "isNonNegative": "    private boolean isNonNegative(long[][] in) {\n        for (int i = 0; i < in.length; i ++) {\n            for (int j = 0; j < in[i].length; j++) {\n                if (in[i][j] < 0) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }", "setDistribution": "    public void setDistribution(ChiSquaredDistribution value) {\n        distribution = value;\n    }"}