{"defineProperty": "  boolean defineProperty(String propertyName, JSType type,\n      boolean inferred, Node propertyNode) {\n    if (!isResolved()) {\n      // If this is an unresolved object type, we need to save all its\n      // properties and define them when it is resolved.\n      if (propertyContinuations == null) {\n        propertyContinuations = Lists.newArrayList();\n      }\n      propertyContinuations.add(\n          new PropertyContinuation(\n              propertyName, type, inferred, propertyNode));\n      return true;\n    } else {\n      return super.defineProperty(\n          propertyName, type, inferred, propertyNode);\n    }\n  }", "finishPropertyContinuations": "  private void finishPropertyContinuations() {\n    ObjectType referencedObjType = getReferencedObjTypeInternal();\n    if (referencedObjType != null && !referencedObjType.isUnknownType()) {\n      if (propertyContinuations != null) {\n        for (PropertyContinuation c : propertyContinuations) {\n          c.commit(this);\n        }\n      }\n    }\n    propertyContinuations = null;\n  }", "getReferencedType": "  public JSType getReferencedType() {\n    return getReferencedTypeInternal();\n  }", "getReferenceName": "  public String getReferenceName() {\n    return reference;\n  }", "toStringHelper": "  String toStringHelper(boolean forAnnotations) {\n    return reference;\n  }", "isNamedType": "  boolean isNamedType() {\n    return true;\n  }", "isNominalType": "  public boolean isNominalType() {\n    return true;\n  }", "resolveInternal": "  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    // TODO(user): Investigate whether it is really necessary to keep two\n    // different mechanisms for resolving named types, and if so, which order\n    // makes more sense. Now, resolution via registry is first in order to\n    // avoid triggering the warnings built into the resolution via properties.\n    boolean resolved = resolveViaRegistry(t, enclosing);\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n\n    if (resolved) {\n      super.resolveInternal(t, enclosing);\n      finishPropertyContinuations();\n      return registry.isLastGeneration() ?\n          getReferencedType() : this;\n    }\n\n    resolveViaProperties(t, enclosing);\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n\n    super.resolveInternal(t, enclosing);\n    if (isResolved()) {\n      finishPropertyContinuations();\n    }\n    return registry.isLastGeneration() ?\n        getReferencedType() : this;\n  }", "resolveViaRegistry": "  private boolean resolveViaRegistry(\n      ErrorReporter t, StaticScope<JSType> enclosing) {\n    JSType type = registry.getType(reference);\n    if (type != null) {\n      setReferencedAndResolvedType(type, t, enclosing);\n      return true;\n    }\n    return false;\n  }", "resolveViaProperties": "  private void resolveViaProperties(ErrorReporter t,\n                                    StaticScope<JSType> enclosing) {\n    JSType value = lookupViaProperties(t, enclosing);\n    // last component of the chain\n    if (value != null && value.isFunctionType() &&\n        (value.isConstructor() || value.isInterface())) {\n      FunctionType functionType = value.toMaybeFunctionType();\n      setReferencedAndResolvedType(\n          functionType.getInstanceType(), t, enclosing);\n    } else if (value != null && value.isNoObjectType()) {\n      setReferencedAndResolvedType(\n          registry.getNativeFunctionType(\n              JSTypeNative.NO_OBJECT_TYPE).getInstanceType(), t, enclosing);\n    } else if (value instanceof EnumType) {\n      setReferencedAndResolvedType(\n          ((EnumType) value).getElementsType(), t, enclosing);\n    } else {\n      // We've been running into issues where people forward-declare\n      // non-named types. (This is legitimate...our dependency management\n      // code doubles as our forward-declaration code.)\n      //\n      // So if the type does resolve to an actual value, but it's not named,\n      // then don't respect the forward declaration.\n      handleUnresolvedType(t, value == null || value.isUnknownType());\n    }\n  }", "lookupViaProperties": "  private JSType lookupViaProperties( ErrorReporter t,\n      StaticScope<JSType> enclosing) {\n    String[] componentNames = reference.split(\"\\\\.\", -1);\n    if (componentNames[0].length() == 0) {\n      return null;\n    }\n    StaticSlot<JSType> slot = enclosing.getSlot(componentNames[0]);\n    if (slot == null) {\n      return null;\n    }\n    // If the first component has a type of 'Unknown', then any type\n    // names using it should be regarded as silently 'Unknown' rather than be\n    // noisy about it.\n    JSType slotType = slot.getType();\n    if (slotType == null || slotType.isAllType() || slotType.isNoType()) {\n      return null;\n    }\n    JSType value = getTypedefType(t, slot, componentNames[0]);\n    if (value == null) {\n      return null;\n    }\n\n    // resolving component by component\n    for (int i = 1; i < componentNames.length; i++) {\n      ObjectType parentClass = ObjectType.cast(value);\n      if (parentClass == null) {\n        return null;\n      }\n      if (componentNames[i].length() == 0) {\n        return null;\n      }\n      value = parentClass.getPropertyType(componentNames[i]);\n    }\n    return value;\n  }", "setReferencedAndResolvedType": "  private void setReferencedAndResolvedType(JSType type, ErrorReporter t,\n      StaticScope<JSType> enclosing) {\n    if (validator != null) {\n      validator.apply(type);\n    }\n    setReferencedType(type);\n    checkEnumElementCycle(t);\n    setResolvedTypeInternal(getReferencedType());\n  }", "handleTypeCycle": "  private void handleTypeCycle(ErrorReporter t) {\n    setReferencedType(\n        registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));\n    t.warning(\"Cycle detected in inheritance chain of type \" + reference,\n        sourceName, lineno, charno);\n    setResolvedTypeInternal(getReferencedType());\n  }", "checkEnumElementCycle": "  private void checkEnumElementCycle(ErrorReporter t) {\n    JSType referencedType = getReferencedType();\n    if (referencedType instanceof EnumElementType &&\n        ((EnumElementType) referencedType).getPrimitiveType() == this) {\n      handleTypeCycle(t);\n    }\n  }", "handleUnresolvedType": "  private void handleUnresolvedType(\n      ErrorReporter t, boolean ignoreForwardReferencedTypes) {\n    if (registry.isLastGeneration()) {\n      boolean isForwardDeclared =\n          ignoreForwardReferencedTypes &&\n          registry.isForwardDeclaredType(reference);\n      if (!isForwardDeclared && registry.isLastGeneration()) {\n        t.warning(\"Bad type annotation. Unknown type \" + reference,\n            sourceName, lineno, charno);\n      } else {\n        setReferencedType(\n            registry.getNativeObjectType(\n                JSTypeNative.NO_RESOLVED_TYPE));\n\n        if (registry.isLastGeneration() && validator != null) {\n          validator.apply(getReferencedType());\n        }\n      }\n\n      setResolvedTypeInternal(getReferencedType());\n    } else {\n      setResolvedTypeInternal(this);\n    }\n  }", "getTypedefType": "  JSType getTypedefType(ErrorReporter t, StaticSlot<JSType> slot, String name) {\n    JSType type = slot.getType();\n    if (type != null) {\n      return type;\n    }\n    handleUnresolvedType(t, true);\n    return null;\n  }", "setValidator": "  public boolean setValidator(Predicate<JSType> validator) {\n    // If the type is already resolved, we can validate it now. If\n    // the type has not been resolved yet, we need to wait till its\n    // resolved before we can validate it.\n    if (this.isResolved()) {\n      return super.setValidator(validator);\n    } else {\n      this.validator = validator;\n      return true;\n    }\n  }", "commit": "    void commit(ObjectType target) {\n      target.defineProperty(\n          propertyName, type, inferred, propertyNode);\n    }"}