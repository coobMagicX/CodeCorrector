{"next": "        public Integer next() {\n            for (int i = last; i >= 0; i--) {\n                if (counter[i] == size[i] - 1) {\n                    counter[i] = 0;\n                } else {\n                    ++counter[i];\n                    break;\n                }\n            }\n\n            return ++count;\n        }", "getCount": "    public int getCount(int ... c) throws OutOfRangeException {\n        if (c.length != dimension) {\n            throw new DimensionMismatchException(c.length, dimension);\n        }\n        int count = 0;\n        for (int i = 0; i < dimension; i++) {\n            final int index = c[i];\n            if (index < 0 ||\n                index >= size[i]) {\n                throw new OutOfRangeException(index, 0, size[i] - 1);\n            }\n            count += uniCounterOffset[i] * c[i];\n        }\n        return count + c[last];\n    }", "getCounts": "    public int[] getCounts(int index) {\n        if (index < 0 ||\n            index >= totalSize) {\n            throw new OutOfRangeException(index, 0, totalSize);\n        }\n\n        final int[] indices = new int[dimension];\n\n        int count = 0;\n        for (int i = 0; i < last; i++) {\n            int idx = 0;\n            final int offset = uniCounterOffset[i];\n            while (count <= index) {\n                count += offset;\n                ++idx;\n            }\n            --idx;\n            count -= offset;\n            indices[i] = idx;\n        }\n\n        int idx = 1;\n        while (count < index) {\n            count += idx;\n            ++idx;\n        }\n        --idx;\n        indices[last] = idx;\n\n        return indices;\n    }", "remove": "        public void remove() {\n            throw new UnsupportedOperationException();\n        }", "iterator": "    public Iterator iterator() {\n        return new Iterator();\n    }", "getDimension": "    public int getDimension() {\n        return dimension;\n    }", "getSize": "    public int getSize() {\n        return totalSize;\n    }", "getSizes": "    public int[] getSizes() {\n        return MathUtils.copyOf(size);\n    }", "toString": "    public String toString() {\n        final StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < dimension; i++) {\n            sb.append(\"[\").append(getCount(i)).append(\"]\");\n        }\n        return sb.toString();\n    }"}