{"getAlternates": "  public Iterable<JSType> getAlternates() {\n    return alternates;\n  }", "meet": "  JSType meet(JSType that) {\n    UnionTypeBuilder builder = new UnionTypeBuilder(registry);\n    for (JSType alternate : alternates) {\n      if (alternate.isSubtype(that)) {\n        builder.addAlternate(alternate);\n      }\n    }\n\n    if (that instanceof UnionType) {\n      for (JSType otherAlternate : ((UnionType) that).alternates) {\n        if (otherAlternate.isSubtype(this)) {\n          builder.addAlternate(otherAlternate);\n        }\n      }\n    } else if (that.isSubtype(this)) {\n      builder.addAlternate(that);\n    }\n    JSType result = builder.build();\n    if (result != null) {\n      return result;\n    } else if (this.isObject() && that.isObject()) {\n      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n    } else {\n      return getNativeType(JSTypeNative.NO_TYPE);\n    }\n  }", "equals": "  public boolean equals(Object object) {\n    if (object instanceof UnionType) {\n      UnionType that = (UnionType) object;\n      return alternates.equals(that.alternates);\n    } else {\n      return false;\n    }\n  }", "isUnionType": "  public boolean isUnionType() {\n    return true;\n  }", "isObject": "  public boolean isObject() {\n    for (JSType alternate : alternates) {\n      if (!alternate.isObject()) {\n        return false;\n      }\n    }\n    return true;\n  }", "contains": "  public boolean contains(JSType alternate) {\n    return alternates.contains(alternate);\n  }", "isSubtype": "  public boolean isSubtype(JSType that) {\n    for (JSType element : alternates) {\n      if (!element.isSubtype(that)) {\n        return false;\n      }\n    }\n    return true;\n  }", "visit": "  public <T> T visit(Visitor<T> visitor) {\n    return visitor.caseUnionType(this);\n  }"}