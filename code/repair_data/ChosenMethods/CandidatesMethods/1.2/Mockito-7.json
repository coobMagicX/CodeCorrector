{"registerTypeVariablesOn": "    protected void registerTypeVariablesOn(Type classType) {\n        if (!(classType instanceof ParameterizedType)) {\n            return;\n        }\n        ParameterizedType parameterizedType = (ParameterizedType) classType;\n        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n        for (int i = 0; i < actualTypeArguments.length; i++) {\n            TypeVariable typeParameter = typeParameters[i];\n            Type actualTypeArgument = actualTypeArguments[i];\n\n            if (actualTypeArgument instanceof WildcardType) {\n                contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n            } else if (typeParameter != actualTypeArgument) {\n                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n            }\n            // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");\n        }\n    }", "registerTypeParametersOn": "    protected void registerTypeParametersOn(TypeVariable[] typeParameters) {\n        for (TypeVariable type : typeParameters) {\n            registerTypeVariableIfNotPresent(type);\n        }\n    }", "registerTypeVariableIfNotPresent": "    private void registerTypeVariableIfNotPresent(TypeVariable typeVariable) {\n        if (!contextualActualTypeParameters.containsKey(typeVariable)) {\n            contextualActualTypeParameters.put(typeVariable, boundsOf(typeVariable));\n            // logger.log(\"For '\" + typeVariable.getGenericDeclaration() + \"' found type variable : { '\" + typeVariable + \"(\" + System.identityHashCode(typeVariable) + \")\" + \"' : '\" + boundsOf(typeVariable) + \"' }\");\n        }\n    }", "rawType": "        public Class<?> rawType() {\n            return returnType;\n        }", "actualTypeArguments": "    public Map<TypeVariable, Type> actualTypeArguments() {\n        TypeVariable[] typeParameters = rawType().getTypeParameters();\n        LinkedHashMap<TypeVariable, Type> actualTypeArguments = new LinkedHashMap<TypeVariable, Type>();\n\n        for (TypeVariable typeParameter : typeParameters) {\n\n            Type actualType = getActualTypeArgumentFor(typeParameter);\n\n            actualTypeArguments.put(typeParameter, actualType);\n            // logger.log(\"For '\" + rawType().getCanonicalName() + \"' returning explicit TypeVariable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualType +\"' }\");\n        }\n\n        return actualTypeArguments;\n    }", "getActualTypeArgumentFor": "    protected Type getActualTypeArgumentFor(TypeVariable typeParameter) {\n        Type type = this.contextualActualTypeParameters.get(typeParameter);\n        if (type instanceof TypeVariable) {\n            TypeVariable typeVariable = (TypeVariable) type;\n            return getActualTypeArgumentFor(typeVariable);\n        }\n\n        return type;\n    }", "resolveGenericReturnType": "    public GenericMetadataSupport resolveGenericReturnType(Method method) {\n        Type genericReturnType = method.getGenericReturnType();\n        // logger.log(\"Method '\" + method.toGenericString() + \"' has return type : \" + genericReturnType.getClass().getInterfaces()[0].getSimpleName() + \" : \" + genericReturnType);\n\n        if (genericReturnType instanceof Class) {\n            return new NotGenericReturnTypeSupport(genericReturnType);\n        }\n        if (genericReturnType instanceof ParameterizedType) {\n            return new ParameterizedReturnType(this, method.getTypeParameters(), (ParameterizedType) method.getGenericReturnType());\n        }\n        if (genericReturnType instanceof TypeVariable) {\n            return new TypeVariableReturnType(this, method.getTypeParameters(), (TypeVariable) genericReturnType);\n        }\n\n        throw new MockitoException(\"Ouch, it shouldn't happen, type '\" + genericReturnType.getClass().getCanonicalName() + \"' on method : '\" + method.toGenericString() + \"' is not supported : \" + genericReturnType);\n    }", "readActualTypeParametersOnDeclaringClass": "        private void readActualTypeParametersOnDeclaringClass(Class<?> clazz) {\n            registerTypeParametersOn(clazz.getTypeParameters());\n            registerTypeVariablesOn(clazz.getGenericSuperclass());\n            for (Type genericInterface : clazz.getGenericInterfaces()) {\n                registerTypeVariablesOn(genericInterface);\n            }\n        }", "readActualTypeParameters": "        private void readActualTypeParameters() {\n            registerTypeVariablesOn(parameterizedType.getRawType());\n            registerTypeVariablesOn(parameterizedType);\n        }", "readTypeParameters": "        private void readTypeParameters() {\n            registerTypeParametersOn(typeParameters);\n        }", "readTypeVariables": "        private void readTypeVariables() {\n            for (Type type : typeVariable.getBounds()) {\n                registerTypeVariablesOn(type);\n            }\n            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n        }", "extractRawTypeOf": "        private Class<?> extractRawTypeOf(Type type) {\n            if (type instanceof Class) {\n                return (Class<?>) type;\n            }\n            if (type instanceof ParameterizedType) {\n                return (Class<?>) ((ParameterizedType) type).getRawType();\n            }\n            if (type instanceof BoundedType) {\n                return extractRawTypeOf(((BoundedType) type).firstBound());\n            }\n            if (type instanceof TypeVariable) {\n                /*\n                 * If type is a TypeVariable, then it is needed to gather data elsewhere. Usually TypeVariables are declared\n                 * on the class definition, such as such as List<E>.\n                 */\n                return extractRawTypeOf(contextualActualTypeParameters.get(type));\n            }\n            throw new MockitoException(\"Raw extraction not supported for : '\" + type + \"'\");\n        }", "extractActualBoundedTypeOf": "        private Type extractActualBoundedTypeOf(Type type) {\n            if (type instanceof TypeVariable) {\n                /*\n                If type is a TypeVariable, then it is needed to gather data elsewhere. Usually TypeVariables are declared\n                on the class definition, such as such as List<E>.\n                */\n                return extractActualBoundedTypeOf(contextualActualTypeParameters.get(type));\n            }\n            if (type instanceof BoundedType) {\n                Type actualFirstBound = extractActualBoundedTypeOf(((BoundedType) type).firstBound());\n                if (!(actualFirstBound instanceof BoundedType)) {\n                    return type; // avoid going one step further, ie avoid : O(TypeVar) -> K(TypeVar) -> Some ParamType\n                }\n                return actualFirstBound;\n            }\n            return type; // irrelevant, we don't manage other types as they are not bounded.\n        }", "equals": "        public boolean equals(Object o) {\n            if (this == o) return true;\n            if (o == null || getClass() != o.getClass()) return false;\n\n            return wildcard.equals(((TypeVarBoundedType) o).typeVariable);\n\n        }", "typeVariable": "        public TypeVariable typeVariable() {\n            return typeVariable;\n        }"}