{"getChronology": "    public Chronology getChronology() {\n        return iChrono;\n    }", "getLocale": "    public Locale getLocale() {\n        return iLocale;\n    }", "getZone": "    public DateTimeZone getZone() {\n        return iZone;\n    }", "setZone": "    public void setZone(DateTimeZone zone) {\n        iSavedState = null;\n        iZone = zone == DateTimeZone.UTC ? null : zone;\n        iOffset = 0;\n    }", "getOffset": "    public int getOffset() {\n        return iOffset;\n    }", "setOffset": "    public void setOffset(int offset) {\n        iSavedState = null;\n        iOffset = offset;\n        iZone = null;\n    }", "getPivotYear": "    public Integer getPivotYear() {\n        return iPivotYear;\n    }", "setPivotYear": "    public void setPivotYear(Integer pivotYear) {\n        iPivotYear = pivotYear;\n    }", "saveField": "    private void saveField(SavedField field) {\n        SavedField[] savedFields = iSavedFields;\n        int savedFieldsCount = iSavedFieldsCount;\n        \n        if (savedFieldsCount == savedFields.length || iSavedFieldsShared) {\n            // Expand capacity or merely copy if saved fields are shared.\n            SavedField[] newArray = new SavedField\n                [savedFieldsCount == savedFields.length ? savedFieldsCount * 2 : savedFields.length];\n            System.arraycopy(savedFields, 0, newArray, 0, savedFieldsCount);\n            iSavedFields = savedFields = newArray;\n            iSavedFieldsShared = false;\n        }\n        \n        iSavedState = null;\n        savedFields[savedFieldsCount] = field;\n        iSavedFieldsCount = savedFieldsCount + 1;\n    }", "saveState": "    public Object saveState() {\n        if (iSavedState == null) {\n            iSavedState = new SavedState();\n        }\n        return iSavedState;\n    }", "restoreState": "        boolean restoreState(DateTimeParserBucket enclosing) {\n            if (enclosing != DateTimeParserBucket.this) {\n                return false;\n            }\n            enclosing.iZone = this.iZone;\n            enclosing.iOffset = this.iOffset;\n            enclosing.iSavedFields = this.iSavedFields;\n            if (this.iSavedFieldsCount < enclosing.iSavedFieldsCount) {\n                // Since count is being restored to a lower count, the\n                // potential exists for new saved fields to destroy data being\n                // shared by another state. Set this flag such that the array\n                // of saved fields is cloned prior to modification.\n                enclosing.iSavedFieldsShared = true;\n            }\n            enclosing.iSavedFieldsCount = this.iSavedFieldsCount;\n            return true;\n        }", "computeMillis": "    public long computeMillis(boolean resetFields, String text) {\n        SavedField[] savedFields = iSavedFields;\n        int count = iSavedFieldsCount;\n        if (iSavedFieldsShared) {\n            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n            iSavedFieldsShared = false;\n        }\n        sort(savedFields, count);\n        if (count > 0) {\n            // alter base year for parsing if first field is month or day\n            DurationField months = DurationFieldType.months().getField(iChrono);\n            DurationField days = DurationFieldType.days().getField(iChrono);\n            DurationField first = savedFields[0].iField.getDurationField();\n            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n                saveField(DateTimeFieldType.year(), iDefaultYear);\n                return computeMillis(resetFields, text);\n            }\n        }\n\n        long millis = iMillis;\n        try {\n            for (int i = 0; i < count; i++) {\n                millis = savedFields[i].set(millis, resetFields);\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }\n        \n        if (iZone == null) {\n            millis -= iOffset;\n        } else {\n            int offset = iZone.getOffsetFromLocal(millis);\n            millis -= offset;\n            if (offset != iZone.getOffset(millis)) {\n                String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                if (text != null) {\n                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                }\n                throw new IllegalArgumentException(message);\n            }\n        }\n        \n        return millis;\n    }", "sort": "    private static void sort(SavedField[] array, int high) {\n        if (high > 10) {\n            Arrays.sort(array, 0, high);\n        } else {\n            for (int i=0; i<high; i++) {\n                for (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {\n                    SavedField t = array[j];\n                    array[j] = array[j-1];\n                    array[j-1] = t;\n                }\n            }\n        }\n    }", "set": "        long set(long millis, boolean reset) {\n            if (iText == null) {\n                millis = iField.set(millis, iValue);\n            } else {\n                millis = iField.set(millis, iText, iLocale);\n            }\n            if (reset) {\n                millis = iField.roundFloor(millis);\n            }\n            return millis;\n        }", "compareTo": "        public int compareTo(SavedField obj) {\n            DateTimeField other = obj.iField;\n            int result = compareReverse\n                (iField.getRangeDurationField(), other.getRangeDurationField());\n            if (result != 0) {\n                return result;\n            }\n            return compareReverse\n                (iField.getDurationField(), other.getDurationField());\n        }", "compareReverse": "    static int compareReverse(DurationField a, DurationField b) {\n        if (a == null || !a.isSupported()) {\n            if (b == null || !b.isSupported()) {\n                return 0;\n            }\n            return -1;\n        }\n        if (b == null || !b.isSupported()) {\n            return 1;\n        }\n        return -a.compareTo(b);\n    }"}