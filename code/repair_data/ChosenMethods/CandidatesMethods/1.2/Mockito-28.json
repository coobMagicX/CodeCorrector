{"injectMocksOnFields": "    public void injectMocksOnFields(Set<Field> injectMocksFields, Set<Object> mocks, Object testClassInstance) {\n        for (Field field : injectMocksFields) {\n            Set<Object> mocksToBeInjected = new HashSet<Object>(mocks);\n            Object injectMocksFieldInstance = null;\n            try {\n                injectMocksFieldInstance = new FieldInitializer(testClassInstance, field).initialize();\n            } catch (MockitoException e) {\n                new Reporter().cannotInitializeForInjectMocksAnnotation(field.getName(), e);\n            }\n\n            // for each field in the class hierarchy\n            Class<?> fieldClass = injectMocksFieldInstance.getClass();\n            while (fieldClass != Object.class) {\n                injectMockCandidate(fieldClass, mocksToBeInjected, injectMocksFieldInstance);\n                fieldClass = fieldClass.getSuperclass();\n            }\n        }\n    }", "injectMockCandidate": "    private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n        }\n    }", "orderedInstanceFieldsFrom": "    private Field[] orderedInstanceFieldsFrom(Class<?> awaitingInjectionClazz) {\n        Field[] declaredFields = awaitingInjectionClazz.getDeclaredFields();\n        Arrays.sort(declaredFields, supertypesLast);\n        return declaredFields;\n    }"}