{"formatComplex": "    public static String formatComplex( Complex c ) {\n        return getInstance().format( c );\n    }", "format": "    public StringBuffer format(Object obj, StringBuffer toAppendTo,\n            FieldPosition pos) {\n        \n        StringBuffer ret = null;\n        \n        if (obj instanceof Complex) {\n            ret = format( (Complex)obj, toAppendTo, pos);\n        } else if (obj instanceof Number) {\n            ret = format( new Complex(((Number)obj).doubleValue(), 0.0),\n                toAppendTo, pos);\n        } else { \n            throw new IllegalArgumentException(\n                \"Cannot format given Object as a Date\");\n        }\n        \n        return ret;\n    }", "getAvailableLocales": "    public static Locale[] getAvailableLocales() {\n        return NumberFormat.getAvailableLocales();\n    }", "getDefaultNumberFormat": "    private static NumberFormat getDefaultNumberFormat(Locale locale) {\n        NumberFormat nf = NumberFormat.getInstance(locale);\n        nf.setMaximumFractionDigits(2);\n        return nf;\n    }", "getImaginaryCharacter": "    public String getImaginaryCharacter() {\n        return imaginaryCharacter;\n    }", "getImaginaryFormat": "    public NumberFormat getImaginaryFormat() {\n        return imaginaryFormat;\n    }", "getInstance": "    public static ComplexFormat getInstance(Locale locale) {\n        NumberFormat f = getDefaultNumberFormat(locale);\n        return new ComplexFormat(f);\n    }", "getRealFormat": "    public NumberFormat getRealFormat() {\n        return realFormat;\n    }", "parse": "    public Complex parse(String source, ParsePosition pos) {\n        int initialIndex = pos.getIndex();\n\n        // parse whitespace\n        parseAndIgnoreWhitespace(source, pos);\n\n        // parse real\n        Number re = parseNumber(source, getRealFormat(), pos);\n        if (re == null) {\n            // invalid real number\n            // set index back to initial, error index should already be set\n            // character examined.\n            pos.setIndex(initialIndex);\n            return null;\n        }\n\n        // parse sign\n        int startIndex = pos.getIndex();\n        char c = parseNextCharacter(source, pos);\n        int sign = 0;\n        switch (c) {\n        case 0 :\n            // no sign\n            // return real only complex number\n            return new Complex(re.doubleValue(), 0.0);\n        case '-' :\n            sign = -1;\n            break;\n        case '+' :\n            sign = 1;\n            break;\n        default :\n            // invalid sign\n            // set index back to initial, error index should be the last\n            // character examined.\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(startIndex);\n            return null;\n        }\n\n        // parse whitespace\n        parseAndIgnoreWhitespace(source, pos);\n\n        // parse imaginary\n        Number im = parseNumber(source, getRealFormat(), pos);\n        if (im == null) {\n            // invalid imaginary number\n            // set index back to initial, error index should already be set\n            // character examined.\n            pos.setIndex(initialIndex);\n            return null;\n        }\n\n        // parse imaginary character\n        int n = getImaginaryCharacter().length();\n        startIndex = pos.getIndex();\n        int endIndex = startIndex + n;\n        if (\n            source.substring(startIndex, endIndex).compareTo(\n            getImaginaryCharacter()) != 0) {\n            // set index back to initial, error index should be the start index\n            // character examined.\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(startIndex);\n            return null;\n        }\n        pos.setIndex(endIndex);\n\n        return new Complex(re.doubleValue(), im.doubleValue() * sign);\n    }", "parseAndIgnoreWhitespace": "    private void parseAndIgnoreWhitespace(String source, ParsePosition pos) {\n        parseNextCharacter(source, pos);\n        pos.setIndex(pos.getIndex() - 1);\n    }", "parseNextCharacter": "    private char parseNextCharacter(String source, ParsePosition pos) {\n         int index = pos.getIndex();\n         int n = source.length();\n         char ret = 0;\n\n         if (index < n) {\n             char c;\n             do {\n                 c = source.charAt(index++);\n             } while (Character.isWhitespace(c) && index < n);\n             pos.setIndex(index);\n         \n             if (index < n) {\n                 ret = c;\n             }\n         }\n         \n         return ret;\n    }", "parseNumber": "    private Number parseNumber(String source, NumberFormat format, ParsePosition pos) {\n        int startIndex = pos.getIndex();\n        Number number = format.parse(source, pos);\n        int endIndex = pos.getIndex();\n        \n        // check for error parsing number\n        if (startIndex == endIndex) {\n            // try parsing special numbers\n            double[] special = {Double.NaN, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY};\n            for (int i = 0; i < special.length; ++i) {\n                number = parseNumber(source, special[i], pos);\n                if (number != null) {\n                    break;\n                }\n            }\n        }\n        \n        return number;\n    }", "parseObject": "    public Object parseObject(String source, ParsePosition pos) {\n        return parse(source, pos);\n    }", "setImaginaryCharacter": "    public void setImaginaryCharacter(String imaginaryCharacter) {\n        if (imaginaryCharacter == null || imaginaryCharacter.length() == 0) {\n            throw new IllegalArgumentException(\n                \"imaginaryCharacter must be a non-empty string.\");\n        }\n        this.imaginaryCharacter = imaginaryCharacter;\n    }", "setImaginaryFormat": "    public void setImaginaryFormat(NumberFormat imaginaryFormat) {\n        if (imaginaryFormat == null) {\n            throw new IllegalArgumentException(\n                \"imaginaryFormat can not be null.\");\n        }\n        this.imaginaryFormat = imaginaryFormat;\n    }", "setRealFormat": "    public void setRealFormat(NumberFormat realFormat) {\n        if (realFormat == null) {\n            throw new IllegalArgumentException(\n                \"realFormat can not be null.\");\n        }\n        this.realFormat = realFormat;\n    }"}