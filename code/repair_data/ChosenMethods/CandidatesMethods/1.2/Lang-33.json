{"addAbbreviation": "    private static void addAbbreviation(String primitive, String abbreviation) {\n        abbreviationMap.put(primitive, abbreviation);\n        reverseAbbreviationMap.put(abbreviation, primitive);\n    }", "getShortClassName": "    public static String getShortClassName(String className) {\n        if (className == null) {\n            return StringUtils.EMPTY;\n        }\n        if (className.length() == 0) {\n            return StringUtils.EMPTY;\n        }\n\n        StringBuilder arrayPrefix = new StringBuilder();\n\n        // Handle array encoding\n        if (className.startsWith(\"[\")) {\n            while (className.charAt(0) == '[') {\n                className = className.substring(1);\n                arrayPrefix.append(\"[]\");\n            }\n            // Strip Object type encoding\n            if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {\n                className = className.substring(1, className.length() - 1);\n            }\n        }\n\n        if (reverseAbbreviationMap.containsKey(className)) {\n            className = reverseAbbreviationMap.get(className);\n        }\n\n        int lastDotIdx = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR);\n        int innerIdx = className.indexOf(\n                INNER_CLASS_SEPARATOR_CHAR, lastDotIdx == -1 ? 0 : lastDotIdx + 1);\n        String out = className.substring(lastDotIdx + 1);\n        if (innerIdx != -1) {\n            out = out.replace(INNER_CLASS_SEPARATOR_CHAR, PACKAGE_SEPARATOR_CHAR);\n        }\n        return out + arrayPrefix;\n    }", "getAllSuperclasses": "    public static List<Class<?>> getAllSuperclasses(Class<?> cls) {\n        if (cls == null) {\n            return null;\n        }\n        List<Class<?>> classes = new ArrayList<Class<?>>();\n        Class<?> superclass = cls.getSuperclass();\n        while (superclass != null) {\n            classes.add(superclass);\n            superclass = superclass.getSuperclass();\n        }\n        return classes;\n    }", "getAllInterfaces": "    private static void getAllInterfaces(Class<?> cls, HashSet<Class<?>> interfacesFound) {\n        while (cls != null) {\n            Class<?>[] interfaces = cls.getInterfaces();\n\n            for (Class<?> i : interfaces) {\n                if (interfacesFound.add(i)) {\n                    getAllInterfaces(i, interfacesFound);\n                }\n            }\n\n            cls = cls.getSuperclass();\n         }\n     }", "convertClassNamesToClasses": "    public static List<Class<?>> convertClassNamesToClasses(List<String> classNames) {\n        if (classNames == null) {\n            return null;\n        }\n        List<Class<?>> classes = new ArrayList<Class<?>>(classNames.size());\n        for (String className : classNames) {\n            try {\n                classes.add(Class.forName(className));\n            } catch (Exception ex) {\n                classes.add(null);\n            }\n        }\n        return classes;\n    }", "convertClassesToClassNames": "    public static List<String> convertClassesToClassNames(List<Class<?>> classes) {\n        if (classes == null) {\n            return null;\n        }\n        List<String> classNames = new ArrayList<String>(classes.size());\n        for (Class<?> cls : classes) {\n            if (cls == null) {\n                classNames.add(null);\n            } else {\n                classNames.add(cls.getName());\n            }\n        }\n        return classNames;\n    }", "isAssignable": "    public static boolean isAssignable(Class<?> cls, Class<?> toClass, boolean autoboxing) {\n        if (toClass == null) {\n            return false;\n        }\n        // have to check for null, as isAssignableFrom doesn't\n        if (cls == null) {\n            return !(toClass.isPrimitive());\n        }\n        //autoboxing:\n        if (autoboxing) {\n            if (cls.isPrimitive() && !toClass.isPrimitive()) {\n                cls = primitiveToWrapper(cls);\n                if (cls == null) {\n                    return false;\n                }\n            }\n            if (toClass.isPrimitive() && !cls.isPrimitive()) {\n                cls = wrapperToPrimitive(cls);\n                if (cls == null) {\n                    return false;\n                }\n            }\n        }\n        if (cls.equals(toClass)) {\n            return true;\n        }\n        if (cls.isPrimitive()) {\n            if (toClass.isPrimitive() == false) {\n                return false;\n            }\n            if (Integer.TYPE.equals(cls)) {\n                return Long.TYPE.equals(toClass)\n                    || Float.TYPE.equals(toClass)\n                    || Double.TYPE.equals(toClass);\n            }\n            if (Long.TYPE.equals(cls)) {\n                return Float.TYPE.equals(toClass)\n                    || Double.TYPE.equals(toClass);\n            }\n            if (Boolean.TYPE.equals(cls)) {\n                return false;\n            }\n            if (Double.TYPE.equals(cls)) {\n                return false;\n            }\n            if (Float.TYPE.equals(cls)) {\n                return Double.TYPE.equals(toClass);\n            }\n            if (Character.TYPE.equals(cls)) {\n                return Integer.TYPE.equals(toClass)\n                    || Long.TYPE.equals(toClass)\n                    || Float.TYPE.equals(toClass)\n                    || Double.TYPE.equals(toClass);\n            }\n            if (Short.TYPE.equals(cls)) {\n                return Integer.TYPE.equals(toClass)\n                    || Long.TYPE.equals(toClass)\n                    || Float.TYPE.equals(toClass)\n                    || Double.TYPE.equals(toClass);\n            }\n            if (Byte.TYPE.equals(cls)) {\n                return Short.TYPE.equals(toClass)\n                    || Integer.TYPE.equals(toClass)\n                    || Long.TYPE.equals(toClass)\n                    || Float.TYPE.equals(toClass)\n                    || Double.TYPE.equals(toClass);\n            }\n            // should never get here\n            return false;\n        }\n        return toClass.isAssignableFrom(cls);\n    }", "primitiveToWrapper": "    public static Class<?> primitiveToWrapper(Class<?> cls) {\n        Class<?> convertedClass = cls;\n        if (cls != null && cls.isPrimitive()) {\n            convertedClass = primitiveWrapperMap.get(cls);\n        }\n        return convertedClass;\n    }", "primitivesToWrappers": "    public static Class<?>[] primitivesToWrappers(Class<?>[] classes) {\n        if (classes == null) {\n            return null;\n        }\n\n        if (classes.length == 0) {\n            return classes;\n        }\n\n        Class<?>[] convertedClasses = new Class[classes.length];\n        for (int i = 0; i < classes.length; i++) {\n            convertedClasses[i] = primitiveToWrapper(classes[i]);\n        }\n        return convertedClasses;\n    }", "wrapperToPrimitive": "    public static Class<?> wrapperToPrimitive(Class<?> cls) {\n        return wrapperPrimitiveMap.get(cls);\n    }", "wrappersToPrimitives": "    public static Class<?>[] wrappersToPrimitives(Class<?>[] classes) {\n        if (classes == null) {\n            return null;\n        }\n\n        if (classes.length == 0) {\n            return classes;\n        }\n\n        Class<?>[] convertedClasses = new Class[classes.length];\n        for (int i = 0; i < classes.length; i++) {\n            convertedClasses[i] = wrapperToPrimitive(classes[i]);\n        }\n        return convertedClasses;\n    }", "isInnerClass": "    public static boolean isInnerClass(Class<?> cls) {\n        if (cls == null) {\n            return false;\n        }\n        return cls.getName().indexOf(INNER_CLASS_SEPARATOR_CHAR) >= 0;\n    }", "getClass": "    public static Class<?> getClass(String className, boolean initialize) throws ClassNotFoundException {\n        ClassLoader contextCL = Thread.currentThread().getContextClassLoader();\n        ClassLoader loader = contextCL == null ? ClassUtils.class.getClassLoader() : contextCL;\n        return getClass(loader, className, initialize );\n    }", "getPublicMethod": "    public static Method getPublicMethod(Class<?> cls, String methodName, Class<?> parameterTypes[])\n            throws SecurityException, NoSuchMethodException {\n\n        Method declaredMethod = cls.getMethod(methodName, parameterTypes);\n        if (Modifier.isPublic(declaredMethod.getDeclaringClass().getModifiers())) {\n            return declaredMethod;\n        }\n\n        List<Class<?>> candidateClasses = new ArrayList<Class<?>>();\n        candidateClasses.addAll(getAllInterfaces(cls));\n        candidateClasses.addAll(getAllSuperclasses(cls));\n\n        for (Class<?> candidateClass : candidateClasses) {\n            if (!Modifier.isPublic(candidateClass.getModifiers())) {\n                continue;\n            }\n            Method candidateMethod;\n            try {\n                candidateMethod = candidateClass.getMethod(methodName, parameterTypes);\n            } catch (NoSuchMethodException ex) {\n                continue;\n            }\n            if (Modifier.isPublic(candidateMethod.getDeclaringClass().getModifiers())) {\n                return candidateMethod;\n            }\n        }\n\n        throw new NoSuchMethodException(\"Can't find a public method for \" +\n                methodName + \" \" + ArrayUtils.toString(parameterTypes));\n    }", "toCanonicalName": "    private static String toCanonicalName(String className) {\n        className = StringUtils.deleteWhitespace(className);\n        if (className == null) {\n            throw new NullPointerException(\"className must not be null.\");\n        } else if (className.endsWith(\"[]\")) {\n            StringBuilder classNameBuffer = new StringBuilder();\n            while (className.endsWith(\"[]\")) {\n                className = className.substring(0, className.length() - 2);\n                classNameBuffer.append(\"[\");\n            }\n            String abbreviation = abbreviationMap.get(className);\n            if (abbreviation != null) {\n                classNameBuffer.append(abbreviation);\n            } else {\n                classNameBuffer.append(\"L\").append(className).append(\";\");\n            }\n            className = classNameBuffer.toString();\n        }\n        return className;\n    }", "toClass": "    public static Class<?>[] toClass(Object[] array) {\n        if (array == null) {\n            return null;\n        } else if (array.length == 0) {\n            return ArrayUtils.EMPTY_CLASS_ARRAY;\n        }\n        Class<?>[] classes = new Class[array.length];\n        for (int i = 0; i < array.length; i++) {\n            classes[i] = array[i].getClass();\n        }\n        return classes;\n    }", "getShortCanonicalName": "    public static String getShortCanonicalName(String canonicalName) {\n        return ClassUtils.getShortClassName(getCanonicalName(canonicalName));\n    }", "getPackageCanonicalName": "    public static String getPackageCanonicalName(String canonicalName) {\n        return ClassUtils.getPackageName(getCanonicalName(canonicalName));\n    }", "getCanonicalName": "    private static String getCanonicalName(String className) {\n        className = StringUtils.deleteWhitespace(className);\n        if (className == null) {\n            return null;\n        } else {\n            int dim = 0;\n            while (className.startsWith(\"[\")) {\n                dim++;\n                className = className.substring(1);\n            }\n            if (dim < 1) {\n                return className;\n            } else {\n                if (className.startsWith(\"L\")) {\n                    className = className.substring(\n                        1,\n                        className.endsWith(\";\")\n                            ? className.length() - 1\n                            : className.length());\n                } else {\n                    if (className.length() > 0) {\n                        className = reverseAbbreviationMap.get(className.substring(0, 1));\n                    }\n                }\n                StringBuilder canonicalClassNameBuffer = new StringBuilder(className);\n                for (int i = 0; i < dim; i++) {\n                    canonicalClassNameBuffer.append(\"[]\");\n                }\n                return canonicalClassNameBuffer.toString();\n            }\n        }\n    }"}