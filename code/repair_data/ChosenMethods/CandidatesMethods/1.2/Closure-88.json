{"process": "  public void process(Node externs, Node root) {\n    Preconditions.checkNotNull(externs);\n    Preconditions.checkNotNull(root);\n    NodeTraversal.traverse(compiler, root, this);\n  }", "enterScope": "  public void enterScope(NodeTraversal t) {\n    Scope scope = t.getScope();\n    // Global scope _SHOULD_ work, however, liveness won't finish without\n    // -Xmx1024 in closure. We might have to look at coding conventions for\n    // exported variables as well.\n    if (scope.isGlobal()) {\n      return;\n    }\n\n    // We are not going to do any dead assignment elimination in when there is\n    // at least one inner function because in most browsers, when there is a\n    // closure, ALL the variables are saved (escaped).\n    Node fnBlock = t.getScopeRoot().getLastChild();\n    if (NodeUtil.containsFunction(fnBlock)) {\n      return;\n    }\n\n    // We don't do any dead assignment elimination if there are no assigns\n    // to eliminate. :)\n    if (!NodeUtil.has(fnBlock, matchRemovableAssigns,\n            Predicates.<Node>alwaysTrue())) {\n      return;\n    }\n\n    // Computes liveness information first.\n    ControlFlowGraph<Node> cfg = t.getControlFlowGraph();\n    liveness = new LiveVariablesAnalysis(cfg, scope, compiler);\n    liveness.analyze();\n    tryRemoveDeadAssignments(t, cfg);\n  }", "visit": "  public void visit(NodeTraversal t, Node n, Node parent) {\n  }", "tryRemoveDeadAssignments": "  private void tryRemoveDeadAssignments(NodeTraversal t,\n      ControlFlowGraph<Node> cfg) {\n    Iterable<DiGraphNode<Node, Branch>> nodes = cfg.getDirectedGraphNodes();\n\n    for (DiGraphNode<Node, Branch> cfgNode : nodes) {\n      FlowState<LiveVariableLattice> state =\n          cfgNode.getAnnotation();\n      Node n = cfgNode.getValue();\n      if (n == null) {\n        continue;\n      }\n      switch (n.getType()) {\n        case Token.IF:\n        case Token.WHILE:\n        case Token.DO:\n          tryRemoveAssignment(t, NodeUtil.getConditionExpression(n), state);\n          continue;\n        case Token.FOR:\n          if (!NodeUtil.isForIn(n)) {\n            tryRemoveAssignment(\n                t, NodeUtil.getConditionExpression(n), state);\n          }\n          continue;\n        case Token.SWITCH:\n        case Token.CASE:\n        case Token.RETURN:\n          if (n.hasChildren()) {\n            tryRemoveAssignment(t, n.getFirstChild(), state);\n          }\n          continue;\n        // TODO(user): case Token.VAR: Remove var a=1;a=2;.....\n      }\n\n      tryRemoveAssignment(t, n, state);\n    }\n  }", "tryRemoveAssignment": "  private void tryRemoveAssignment(NodeTraversal t, Node n, Node exprRoot,\n      FlowState<LiveVariableLattice> state) {\n\n    Node parent = n.getParent();\n\n    if (NodeUtil.isAssignmentOp(n) ||\n        n.getType() == Token.INC || n.getType() == Token.DEC) {\n\n      Node lhs = n.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      // Recurse first. Example: dead_x = dead_y = 1; We try to clean up dead_y\n      // first.\n      if (rhs != null) {\n        tryRemoveAssignment(t, rhs, exprRoot, state);\n        rhs = lhs.getNext();\n      }\n\n      Scope scope = t.getScope();\n      if (!NodeUtil.isName(lhs)) {\n        return; // Not a local variable assignment.\n      }\n      String name = lhs.getString();\n      if (!scope.isDeclared(name, false)) {\n        return;\n      }\n      Var var = scope.getVar(name);\n\n      if (liveness.getEscapedLocals().contains(var)) {\n        return; // Local variable that might be escaped due to closures.\n      }\n\n      // If we have an identity assignment such as a=a, always remove it\n      // regardless of what the liveness results because it\n      // does not change the result afterward.\n      if (rhs != null &&\n          NodeUtil.isName(rhs) &&\n          rhs.getString().equals(var.name) &&\n          NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n        compiler.reportCodeChange();\n        return;\n      }\n\n      if (state.getOut().isLive(var)) {\n        return; // Variable not dead.\n      }\n\n      if (state.getIn().isLive(var) &&\n          isVariableStillLiveWithinExpression(n, exprRoot, var.name)) {\n        // The variable is killed here but it is also live before it.\n        // This is possible if we have say:\n        //    if (X = a && a = C) {..} ; .......; a = S;\n        // In this case we are safe to remove \"a = C\" because it is dead.\n        // However if we have:\n        //    if (a = C && X = a) {..} ; .......; a = S;\n        // removing \"a = C\" is NOT correct, although the live set at the node\n        // is exactly the same.\n        // TODO(user): We need more fine grain CFA or we need to keep track\n        // of GEN sets when we recurse here.\n        return;\n      }\n\n      if (NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n      } else if (NodeUtil.isAssignmentOp(n)) {\n        n.removeChild(rhs);\n        n.removeChild(lhs);\n        Node op = new Node(NodeUtil.getOpFromAssignmentOp(n), lhs, rhs);\n        parent.replaceChild(n, op);\n      } else if (n.getType() == Token.INC || n.getType() == Token.DEC) {\n        if (NodeUtil.isExpressionNode(parent)) {\n          parent.replaceChild(n,\n              new Node(Token.VOID, Node.newNumber(0).copyInformationFrom(n)));\n        } else if(n.getType() == Token.COMMA && n != parent.getLastChild()) {\n          parent.removeChild(n);\n        } else if (parent.getType() == Token.FOR && !NodeUtil.isForIn(parent) &&\n            NodeUtil.getConditionExpression(parent) != n) {\n          parent.replaceChild(n, new Node(Token.EMPTY));\n        } else {\n          // Cannot replace x = a++ with x = a because that's not valid\n          // when a is not a number.\n          return;\n        }\n      } else {\n        // Not reachable.\n        Preconditions.checkState(false, \"Unknown statement\");\n      }\n\n      compiler.reportCodeChange();\n      return;\n\n    } else {\n      for (Node c = n.getFirstChild(); c != null;) {\n        Node next = c.getNext();\n        if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n          tryRemoveAssignment(t, c, exprRoot, state);\n        }\n        c = next;\n      }\n      return;\n    }\n  }", "isVariableStillLiveWithinExpression": "  private boolean isVariableStillLiveWithinExpression(\n      Node n, Node exprRoot, String variable) {\n    while (n != exprRoot) {\n      for(Node sibling = n.getNext(); sibling != null;\n          sibling = sibling.getNext()) {\n        if (!ControlFlowGraph.isEnteringNewCfgNode(sibling)) {\n          VariableLiveness state = isVariableReadBeforeKill(sibling, variable);\n\n          // If we see a READ or KILL there is no need to continue.\n          if (state == VariableLiveness.READ) {\n            return true;\n          } else if (state == VariableLiveness.KILL) {\n            return false;\n          }\n        }\n      }\n      n = n.getParent();\n    }\n    return false;\n  }", "isVariableReadBeforeKill": "  private VariableLiveness isVariableReadBeforeKill(\n      Node n, String variable) {\n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n      if (NodeUtil.isLhs(n, n.getParent())) {\n        // The expression to which the assignment is made is evaluated before\n        // the RHS is evaluated (normal left to right evaluation) but the KILL\n        // occurs after the RHS is evaluated.\n        return VariableLiveness.KILL;\n      } else {\n        return VariableLiveness.READ;\n      }\n    }\n\n    // Expressions are evaluated left-right, depth first.\n    for (Node child = n.getFirstChild();\n        child != null; child = child.getNext()) {\n      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n        VariableLiveness state = isVariableReadBeforeKill(child, variable);\n        if (state != VariableLiveness.MAYBE_LIVE) {\n          return state;\n        }\n      }\n    }\n    return VariableLiveness.MAYBE_LIVE;\n  }"}