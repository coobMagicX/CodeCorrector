{"addStepHandler": "    public void addStepHandler(final StepHandler handler) {\n        stepHandlers.add(handler);\n    }", "getStepHandlers": "    public Collection<StepHandler> getStepHandlers() {\n        return Collections.unmodifiableCollection(stepHandlers);\n    }", "clearStepHandlers": "    public void clearStepHandlers() {\n        stepHandlers.clear();\n    }", "addEventHandler": "    public void addEventHandler(final EventHandler handler,\n                                final double maxCheckInterval,\n                                final double convergence,\n                                final int maxIterationCount,\n                                final UnivariateSolver solver) {\n        eventsStates.add(new EventState(handler, maxCheckInterval, convergence,\n                                        maxIterationCount, solver));\n    }", "getEventHandlers": "    public Collection<EventHandler> getEventHandlers() {\n        final List<EventHandler> list = new ArrayList<EventHandler>();\n        for (EventState state : eventsStates) {\n            list.add(state.getEventHandler());\n        }\n        return Collections.unmodifiableCollection(list);\n    }", "clearEventHandlers": "    public void clearEventHandlers() {\n        eventsStates.clear();\n    }", "integrate": "    public abstract void integrate(ExpandableStatefulODE equations, double t)\n        throws NumberIsTooSmallException, DimensionMismatchException,\n               MaxCountExceededException, NoBracketingException;\n\n    /** Compute the derivatives and check the number of evaluations.\n     * @param t current value of the independent <I>time</I> variable\n     * @param y array containing the current value of the state vector\n     * @param yDot placeholder array where to put the time derivative of the state vector\n     * @exception MaxCountExceededException if the number of functions evaluations is exceeded\n     * @exception DimensionMismatchException if arrays dimensions do not match equations settings\n     */\n    public void computeDerivatives(final double t, final double[] y, final double[] yDot)\n        throws MaxCountExceededException, DimensionMismatchException {\n        evaluations.incrementCount();\n        expandable.computeDerivatives(t, y, yDot);\n    }", "computeDerivatives": "    public void computeDerivatives(final double t, final double[] y, final double[] yDot)\n        throws MaxCountExceededException, DimensionMismatchException {\n        evaluations.incrementCount();\n        expandable.computeDerivatives(t, y, yDot);\n    }", "setStateInitialized": "    protected void setStateInitialized(final boolean stateInitialized) {\n        this.statesInitialized = stateInitialized;\n    }", "sanityChecks": "    protected void sanityChecks(final ExpandableStatefulODE equations, final double t)\n        throws NumberIsTooSmallException, DimensionMismatchException {\n\n        final double threshold = 1000 * FastMath.ulp(FastMath.max(FastMath.abs(equations.getTime()),\n                                                                  FastMath.abs(t)));\n        final double dt = FastMath.abs(equations.getTime() - t);\n        if (dt <= threshold) {\n            throw new NumberIsTooSmallException(LocalizedFormats.TOO_SMALL_INTEGRATION_INTERVAL,\n                                                dt, threshold, false);\n        }\n\n    }"}