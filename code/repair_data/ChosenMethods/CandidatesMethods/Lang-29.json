{"getJavaVersionAsFloat": "    private static float getJavaVersionAsFloat() {\n        return toVersionFloat(toJavaVersionIntArray(SystemUtils.JAVA_VERSION, JAVA_VERSION_TRIM_SIZE));\n    }", "getJavaVersionAsInt": "    private static int getJavaVersionAsInt() {\n        return toVersionInt(toJavaVersionIntArray(SystemUtils.JAVA_VERSION, JAVA_VERSION_TRIM_SIZE));\n    }", "getJavaVersionMatches": "    private static boolean getJavaVersionMatches(String versionPrefix) {\n        return isJavaVersionMatch(JAVA_VERSION_TRIMMED, versionPrefix);\n    }", "getJavaVersionTrimmed": "    private static String getJavaVersionTrimmed() {\n        if (JAVA_VERSION != null) {\n            for (int i = 0; i < JAVA_VERSION.length(); i++) {\n                char ch = JAVA_VERSION.charAt(i);\n                if (ch >= '0' && ch <= '9') {\n                    return JAVA_VERSION.substring(i);\n                }\n            }\n        }\n        return null;\n    }", "isJavaVersionAtLeast": "    public static boolean isJavaVersionAtLeast(int requiredVersion) {\n        return JAVA_VERSION_INT >= requiredVersion;\n    }", "isJavaVersionMatch": "    static boolean isJavaVersionMatch(String version, String versionPrefix) {\n        if (version == null) {\n            return false;\n        }\n        return version.startsWith(versionPrefix);\n    }", "toJavaVersionFloat": "    static float toJavaVersionFloat(String version) {\n        return toVersionFloat(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));\n    }", "toJavaVersionInt": "    static float toJavaVersionInt(String version) {\n        return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));\n    }", "toJavaVersionIntArray": "    private static int[] toJavaVersionIntArray(String version, int limit) {\n        if (version == null) {\n            return ArrayUtils.EMPTY_INT_ARRAY;\n        }\n        String[] strings = Pattern.compile(\"[^\\\\d]\").split(version);\n        int[] ints = new int[Math.min(limit, strings.length)];\n        int j = 0;\n        for (int i = 0; i < strings.length && j < limit; i++) {\n            String s = strings[i];\n            if (s.length() > 0) {\n                ints[j++] = Integer.parseInt(s);\n            }\n        }\n        return ints;\n    }", "toVersionFloat": "    private static float toVersionFloat(int[] javaVersions) {\n        if (javaVersions == null || javaVersions.length == 0) {\n            return 0f;\n        }\n        if (javaVersions.length == 1) {\n            return javaVersions[0];\n        }\n        StringBuilder builder = new StringBuilder();\n        builder.append(javaVersions[0]);\n        builder.append('.');\n        for (int i = 1; i < javaVersions.length; i++) {\n            builder.append(javaVersions[i]);\n        }\n        try {\n            return Float.parseFloat(builder.toString());\n        } catch (Exception ex) {\n            return 0f;\n        }\n    }", "toVersionInt": "    private static int toVersionInt(int[] javaVersions) {\n        if (javaVersions == null) {\n            return 0;\n        }\n        int intVersion = 0;\n        int len = javaVersions.length;\n        if (len >= 1) {\n            intVersion = javaVersions[0] * 100;\n        }\n        if (len >= 2) {\n            intVersion += javaVersions[1] * 10;\n        }\n        if (len >= 3) {\n            intVersion += javaVersions[2];\n        }\n        return intVersion;\n    }"}