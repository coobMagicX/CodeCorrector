{"reseedRandomGenerator": "    public void reseedRandomGenerator(long seed) {\n        random.setSeed(seed);\n    }", "probability": "    double probability(final T x) {\n        double probability = 0;\n\n        for (int i = 0; i < probabilities.length; i++) {\n            if ((x == null && singletons.get(i) == null) ||\n                (x != null && x.equals(singletons.get(i)))) {\n                probability += probabilities[i];\n            }\n        }\n\n        return probability;\n    }", "getSamples": "    public List<Pair<T, Double>> getSamples() {\n        final List<Pair<T, Double>> samples = new ArrayList<Pair<T, Double>>(probabilities.length);\n\n        for (int i = 0; i < probabilities.length; i++) {\n            samples.add(new Pair<T, Double>(singletons.get(i), probabilities[i]));\n        }\n\n        return samples;\n    }", "sample": "    public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n        if (sampleSize <= 0) {\n            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n                    sampleSize);\n        }\n\n        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n\n        for (int i = 0; i < sampleSize; i++) {\n            out[i] = sample();\n        }\n\n        return out;\n\n    }"}