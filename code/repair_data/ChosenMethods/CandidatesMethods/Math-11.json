{"density": "    public double density(final double[] vals) throws DimensionMismatchException {\n        final int dim = getDimension();\n        if (vals.length != dim) {\n            throw new DimensionMismatchException(vals.length, dim);\n        }\n\n        return FastMath.pow(2 * FastMath.PI, -dim / 2) *\n            FastMath.pow(covarianceMatrixDeterminant, -0.5) *\n            getExponentTerm(vals);\n    }", "sample": "    public double[] sample() {\n        final int dim = getDimension();\n        final double[] normalVals = new double[dim];\n\n        for (int i = 0; i < dim; i++) {\n            normalVals[i] = random.nextGaussian();\n        }\n\n        final double[] vals = samplingMatrix.operate(normalVals);\n\n        for (int i = 0; i < dim; i++) {\n            vals[i] += means[i];\n        }\n\n        return vals;\n    }", "getExponentTerm": "    private double getExponentTerm(final double[] values) {\n        final double[] centered = new double[values.length];\n        for (int i = 0; i < centered.length; i++) {\n            centered[i] = values[i] - getMeans()[i];\n        }\n        final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered);\n        double sum = 0;\n        for (int i = 0; i < preMultiplied.length; i++) {\n            sum += preMultiplied[i] * centered[i];\n        }\n        return FastMath.exp(-0.5 * sum);\n    }"}