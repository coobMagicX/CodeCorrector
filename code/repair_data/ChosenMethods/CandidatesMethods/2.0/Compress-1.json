{"closeArchiveEntry": "    public void closeArchiveEntry() throws IOException {\n        ensureOpen();\n\n        if (this.cpioEntry.getSize() != this.written) {\n            throw new IOException(\"invalid entry size (expected \"\n                    + this.cpioEntry.getSize() + \" but got \" + this.written\n                    + \" bytes)\");\n        }\n        if ((this.cpioEntry.getFormat() | FORMAT_NEW_MASK) == FORMAT_NEW_MASK) {\n            pad(this.cpioEntry.getSize(), 4);\n        } else if ((this.cpioEntry.getFormat() | FORMAT_OLD_BINARY) == FORMAT_OLD_BINARY) {\n            pad(this.cpioEntry.getSize(), 2);\n        }\n        if ((this.cpioEntry.getFormat() | FORMAT_NEW_CRC) == FORMAT_NEW_CRC) {\n            if (this.crc != this.cpioEntry.getChksum()) {\n                throw new IOException(\"CRC Error\");\n            }\n        }\n        this.cpioEntry = null;\n        this.crc = 0;\n        this.written = 0;\n    }", "write": "    public void write(int b) throws IOException {\n        out.write(b);\n    }", "finish": "    public void finish() throws IOException {\n        ensureOpen();\n\n        if (this.finished) {\n            return;\n        }\n        if (this.cpioEntry != null) {\n            closeArchiveEntry();\n        }\n        this.cpioEntry = new CpioArchiveEntry(this.entryFormat);\n        this.cpioEntry.setMode(0);\n        this.cpioEntry.setName(\"TRAILER!!!\");\n        this.cpioEntry.setNumberOfLinks(1);\n        writeHeader(this.cpioEntry);\n        closeArchiveEntry();\n    }", "close": "    public void close() throws IOException {\n        if (!this.closed) {\n            super.close();\n            this.closed = true;\n        }\n    }", "pad": "    private void pad(final long count, final int border) throws IOException {\n        long skip = count % border;\n        if (skip > 0) {\n            byte tmp[] = new byte[(int) (border - skip)];\n            out.write(tmp);\n        }\n    }"}