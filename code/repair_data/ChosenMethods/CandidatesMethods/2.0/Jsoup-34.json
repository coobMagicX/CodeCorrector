{"pos": "    int pos() {\n        return pos;\n    }", "isEmpty": "    boolean isEmpty() {\n        return pos >= length;\n    }", "current": "    char current() {\n        return isEmpty() ? EOF : input[pos];\n    }", "consume": "    char consume() {\n        char val = isEmpty() ? EOF : input[pos];\n        pos++;\n        return val;\n    }", "unconsume": "    void unconsume() {\n        pos--;\n    }", "advance": "    void advance() {\n        pos++;\n    }", "mark": "    void mark() {\n        mark = pos;\n    }", "rewindToMark": "    void rewindToMark() {\n        pos = mark;\n    }", "consumeAsString": "    String consumeAsString() {\n        return new String(input, pos++, 1);\n    }", "nextIndexOf": "    int nextIndexOf(CharSequence seq) {\n        // doesn't handle scanning for surrogates\n        char startChar = seq.charAt(0);\n        for (int offset = pos; offset < length; offset++) {\n            // scan to first instance of startchar:\n            if (startChar != input[offset])\n                while(++offset < length && startChar != input[offset]);\n            int i = offset + 1;\n            int last = i + seq.length()-1;\n            if (offset < length) {\n                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);\n                if (i == last) // found full sequence\n                    return offset - pos;\n            }\n        }\n        return -1;\n    }", "consumeLetterSequence": "    String consumeLetterSequence() {\n        int start = pos;\n        while (pos < length) {\n            char c = input[pos];\n            if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'))\n                pos++;\n            else\n                break;\n        }\n\n        return new String(input, start, pos - start);\n    }", "consumeLetterThenDigitSequence": "    String consumeLetterThenDigitSequence() {\n        int start = pos;\n        while (pos < length) {\n            char c = input[pos];\n            if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'))\n                pos++;\n            else\n                break;\n        }\n        while (!isEmpty()) {\n            char c = input[pos];\n            if (c >= '0' && c <= '9')\n                pos++;\n            else\n                break;\n        }\n\n        return new String(input, start, pos - start);\n    }", "consumeHexSequence": "    String consumeHexSequence() {\n        int start = pos;\n        while (pos < length) {\n            char c = input[pos];\n            if ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f'))\n                pos++;\n            else\n                break;\n        }\n        return new String(input, start, pos - start);\n    }", "consumeDigitSequence": "    String consumeDigitSequence() {\n        int start = pos;\n        while (pos < length) {\n            char c = input[pos];\n            if (c >= '0' && c <= '9')\n                pos++;\n            else\n                break;\n        }\n        return new String(input, start, pos - start);\n    }", "matches": "    boolean matches(String seq) {\n        int scanLength = seq.length();\n        if (scanLength > length - pos)\n            return false;\n\n        for (int offset = 0; offset < scanLength; offset++)\n            if (seq.charAt(offset) != input[pos+offset])\n                return false;\n        return true;\n    }", "matchesIgnoreCase": "    boolean matchesIgnoreCase(String seq) {\n        int scanLength = seq.length();\n        if (scanLength > length - pos)\n            return false;\n\n        for (int offset = 0; offset < scanLength; offset++) {\n            char upScan = Character.toUpperCase(seq.charAt(offset));\n            char upTarget = Character.toUpperCase(input[pos + offset]);\n            if (upScan != upTarget)\n                return false;\n        }\n        return true;\n    }", "matchesDigit": "    boolean matchesDigit() {\n        if (isEmpty())\n            return false;\n        char c = input[pos];\n        return (c >= '0' && c <= '9');\n    }", "matchConsumeIgnoreCase": "    boolean matchConsumeIgnoreCase(String seq) {\n        if (matchesIgnoreCase(seq)) {\n            pos += seq.length();\n            return true;\n        } else {\n            return false;\n        }\n    }", "containsIgnoreCase": "    boolean containsIgnoreCase(String seq) {\n        // used to check presence of </title>, </style>. only finds consistent case.\n        String loScan = seq.toLowerCase(Locale.ENGLISH);\n        String hiScan = seq.toUpperCase(Locale.ENGLISH);\n        return (nextIndexOf(loScan) > -1) || (nextIndexOf(hiScan) > -1);\n    }", "toString": "    public String toString() {\n        return new String(input, pos, length - pos);\n    }"}