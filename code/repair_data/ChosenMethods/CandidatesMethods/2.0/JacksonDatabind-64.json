{"getClassAnnotations": "    public Annotations getClassAnnotations() {\n        return _beanDesc.getClassAnnotations();\n    }", "buildWriter": "    protected BeanPropertyWriter buildWriter(SerializerProvider prov,\n            BeanPropertyDefinition propDef, JavaType declaredType, JsonSerializer<?> ser,\n            TypeSerializer typeSer, TypeSerializer contentTypeSer,\n            AnnotatedMember am, boolean defaultUseStaticTyping)\n        throws JsonMappingException\n    {\n        // do we have annotation that forces type to use (to declared type or its super type)?\n        JavaType serializationType;\n        try {\n            serializationType = findSerializationType(am, defaultUseStaticTyping, declaredType);\n        } catch (JsonMappingException e) {\n            return prov.reportBadPropertyDefinition(_beanDesc, propDef, e.getMessage());\n        }\n\n        // Container types can have separate type serializers for content (value / element) type\n        if (contentTypeSer != null) {\n            /* 04-Feb-2010, tatu: Let's force static typing for collection, if there is\n             *    type information for contents. Should work well (for JAXB case); can be\n             *    revisited if this causes problems.\n             */\n            if (serializationType == null) {\n//                serializationType = TypeFactory.type(am.getGenericType(), _beanDesc.getType());\n                serializationType = declaredType;\n            }\n            JavaType ct = serializationType.getContentType();\n            // Not exactly sure why, but this used to occur; better check explicitly:\n            if (ct == null) {\n                prov.reportBadPropertyDefinition(_beanDesc, propDef,\n                        \"serialization type \"+serializationType+\" has no content\");\n            }\n            serializationType = serializationType.withContentTypeHandler(contentTypeSer);\n            ct = serializationType.getContentType();\n        }\n\n        Object valueToSuppress = null;\n        boolean suppressNulls = false;\n\n        // 12-Jul-2016, tatu: [databind#1256] Need to make sure we consider type refinement\n        JavaType actualType = (serializationType == null) ? declaredType : serializationType;\n        \n        // 17-Aug-2016, tatu: Default inclusion covers global default (for all types), as well\n        //   as type-default for enclosing POJO. What we need, then, is per-type default (if any)\n        //   for declared property type... and finally property annotation overrides\n        JsonInclude.Value inclV = _config.getDefaultPropertyInclusion(actualType.getRawClass(),\n                _defaultInclusion);\n\n        // property annotation override\n        \n        inclV = inclV.withOverrides(propDef.findInclusion());\n        JsonInclude.Include inclusion = inclV.getValueInclusion();\n\n        if (inclusion == JsonInclude.Include.USE_DEFAULTS) { // should not occur but...\n            inclusion = JsonInclude.Include.ALWAYS;\n        }\n        \n        switch (inclusion) {\n        case NON_DEFAULT:\n            // 11-Nov-2015, tatu: This is tricky because semantics differ between cases,\n            //    so that if enclosing class has this, we may need to access values of property,\n            //    whereas for global defaults OR per-property overrides, we have more\n            //    static definition. Sigh.\n            // First: case of class/type specifying it; try to find POJO property defaults\n\n            // 16-Oct-2016, tatu: Note: if we can not for some reason create \"default instance\",\n            //    revert logic to the case of general/per-property handling, so both\n            //    type-default AND null are to be excluded.\n            //    (as per [databind#1417]\n            if (_useRealPropertyDefaults) {\n                // 07-Sep-2016, tatu: may also need to front-load access forcing now\n                if (prov.isEnabled(MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS)) {\n                    am.fixAccess(_config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));\n                }\n                valueToSuppress = getPropertyDefaultValue(propDef.getName(), am, actualType);\n            } else {\n                valueToSuppress = getDefaultValue(actualType);\n                suppressNulls = true;\n            }\n            if (valueToSuppress == null) {\n                suppressNulls = true;\n            } else {\n                if (valueToSuppress.getClass().isArray()) {\n                    valueToSuppress = ArrayBuilders.getArrayComparator(valueToSuppress);\n                }\n            }\n            break;\n        case NON_ABSENT: // new with 2.6, to support Guava/JDK8 Optionals\n            // always suppress nulls\n            suppressNulls = true;\n            // and for referential types, also \"empty\", which in their case means \"absent\"\n            if (actualType.isReferenceType()) {\n                valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;\n            }\n            break;\n        case NON_EMPTY:\n            // always suppress nulls\n            suppressNulls = true;\n            // but possibly also 'empty' values:\n            valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;\n            break;\n        case NON_NULL:\n            suppressNulls = true;\n            // fall through\n        case ALWAYS: // default\n        default:\n            // we may still want to suppress empty collections, as per [JACKSON-254]:\n            if (actualType.isContainerType()\n                    && !_config.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)) {\n                valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;\n            }\n            break;\n        }\n        BeanPropertyWriter bpw = new BeanPropertyWriter(propDef,\n                am, _beanDesc.getClassAnnotations(), declaredType,\n                ser, typeSer, serializationType, suppressNulls, valueToSuppress);\n\n        // How about custom null serializer?\n        Object serDef = _annotationIntrospector.findNullSerializer(am);\n        if (serDef != null) {\n            bpw.assignNullSerializer(prov.serializerInstance(am, serDef));\n        }\n        // And then, handling of unwrapping\n        NameTransformer unwrapper = _annotationIntrospector.findUnwrappingNameTransformer(am);\n        if (unwrapper != null) {\n            bpw = bpw.unwrappingWriter(unwrapper);\n        }\n        return bpw;\n    }", "findSerializationType": "    protected JavaType findSerializationType(Annotated a, boolean useStaticTyping, JavaType declaredType)\n        throws JsonMappingException\n    {\n        JavaType secondary = _annotationIntrospector.refineSerializationType(_config, a, declaredType);\n\n        // 11-Oct-2015, tatu: As of 2.7, not 100% sure following checks are needed. But keeping\n        //    for now, just in case\n        if (secondary != declaredType) {\n            Class<?> serClass = secondary.getRawClass();\n            // Must be a super type to be usable\n            Class<?> rawDeclared = declaredType.getRawClass();\n            if (serClass.isAssignableFrom(rawDeclared)) {\n                ; // fine as is\n            } else {\n                /* 18-Nov-2010, tatu: Related to fixing [JACKSON-416], an issue with such\n                 *   check is that for deserialization more specific type makes sense;\n                 *   and for serialization more generic. But alas JAXB uses but a single\n                 *   annotation to do both... Hence, we must just discard type, as long as\n                 *   types are related\n                 */\n                if (!rawDeclared.isAssignableFrom(serClass)) {\n                    throw new IllegalArgumentException(\"Illegal concrete-type annotation for method '\"+a.getName()+\"': class \"+serClass.getName()+\" not a super-type of (declared) class \"+rawDeclared.getName());\n                }\n                /* 03-Dec-2010, tatu: Actually, ugh, we may need to further relax this\n                 *   and actually accept subtypes too for serialization. Bit dangerous in theory\n                 *   but need to trust user here...\n                 */\n            }\n            useStaticTyping = true;\n            declaredType = secondary;\n        }\n        // If using static typing, declared type is known to be the type...\n        JsonSerialize.Typing typing = _annotationIntrospector.findSerializationTyping(a);\n        if ((typing != null) && (typing != JsonSerialize.Typing.DEFAULT_TYPING)) {\n            useStaticTyping = (typing == JsonSerialize.Typing.STATIC);\n        }\n        if (useStaticTyping) {\n            // 11-Oct-2015, tatu: Make sure JavaType also \"knows\" static-ness...\n            return declaredType.withStaticTyping();\n            \n        }\n        return null;\n    }", "getDefaultBean": "    protected Object getDefaultBean()\n    {\n        Object def = _defaultBean;\n        if (def == null) {\n            /* If we can fix access rights, we should; otherwise non-public\n             * classes or default constructor will prevent instantiation\n             */\n            def = _beanDesc.instantiateBean(_config.canOverrideAccessModifiers());\n            if (def == null) {\n                // 06-Nov-2015, tatu: As per [databind#998], do not fail.\n                /*\n                Class<?> cls = _beanDesc.getClassInfo().getAnnotated();\n                throw new IllegalArgumentException(\"Class \"+cls.getName()+\" has no default constructor; can not instantiate default bean value to support 'properties=JsonSerialize.Inclusion.NON_DEFAULT' annotation\");\n                 */\n\n                // And use a marker\n                def = NO_DEFAULT_MARKER;\n            }\n            _defaultBean = def;\n        }\n        return (def == NO_DEFAULT_MARKER) ? null : _defaultBean;\n    }", "getPropertyDefaultValue": "    protected Object getPropertyDefaultValue(String name, AnnotatedMember member,\n            JavaType type)\n    {\n        Object defaultBean = getDefaultBean();\n        if (defaultBean == null) {\n            return getDefaultValue(type);\n        }\n        try {\n            return member.getValue(defaultBean);\n        } catch (Exception e) {\n            return _throwWrapped(e, name, defaultBean);\n        }\n    }", "getDefaultValue": "    protected Object getDefaultValue(JavaType type)\n    {\n        // 06-Nov-2015, tatu: Returning null is fine for Object types; but need special\n        //   handling for primitives since they are never passed as nulls.\n        Class<?> cls = type.getRawClass();\n\n        Class<?> prim = ClassUtil.primitiveType(cls);\n        if (prim != null) {\n            return ClassUtil.defaultValue(prim);\n        }\n        if (type.isContainerType() || type.isReferenceType()) {\n            return JsonInclude.Include.NON_EMPTY;\n        }\n        if (cls == String.class) {\n            return \"\";\n        }\n        return null;\n    }", "_throwWrapped": "    protected Object _throwWrapped(Exception e, String propName, Object defaultBean)\n    {\n        Throwable t = e;\n        while (t.getCause() != null) {\n            t = t.getCause();\n        }\n        if (t instanceof Error) throw (Error) t;\n        if (t instanceof RuntimeException) throw (RuntimeException) t;\n        throw new IllegalArgumentException(\"Failed to get property '\"+propName+\"' of default \"+defaultBean.getClass().getName()+\" instance\");\n    }"}