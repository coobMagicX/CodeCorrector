{"none": "    public static Whitelist none() {\n        return new Whitelist();\n    }", "basic": "    public static Whitelist basic() {\n        return new Whitelist()\n                .addTags(\n                        \"a\", \"b\", \"blockquote\", \"br\", \"cite\", \"code\", \"dd\", \"dl\", \"dt\", \"em\",\n                        \"i\", \"li\", \"ol\", \"p\", \"pre\", \"q\", \"small\", \"strike\", \"strong\", \"sub\",\n                        \"sup\", \"u\", \"ul\")\n\n                .addAttributes(\"a\", \"href\")\n                .addAttributes(\"blockquote\", \"cite\")\n                .addAttributes(\"q\", \"cite\")\n\n                .addProtocols(\"a\", \"href\", \"ftp\", \"http\", \"https\", \"mailto\")\n                .addProtocols(\"blockquote\", \"cite\", \"http\", \"https\")\n                .addProtocols(\"cite\", \"cite\", \"http\", \"https\")\n\n                .addEnforcedAttribute(\"a\", \"rel\", \"nofollow\")\n                ;\n\n    }", "relaxed": "    public static Whitelist relaxed() {\n        return new Whitelist()\n                .addTags(\n                        \"a\", \"b\", \"blockquote\", \"br\", \"caption\", \"cite\", \"code\", \"col\",\n                        \"colgroup\", \"dd\", \"div\", \"dl\", \"dt\", \"em\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\",\n                        \"i\", \"img\", \"li\", \"ol\", \"p\", \"pre\", \"q\", \"small\", \"strike\", \"strong\",\n                        \"sub\", \"sup\", \"table\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\", \"u\",\n                        \"ul\")\n\n                .addAttributes(\"a\", \"href\", \"title\")\n                .addAttributes(\"blockquote\", \"cite\")\n                .addAttributes(\"col\", \"span\", \"width\")\n                .addAttributes(\"colgroup\", \"span\", \"width\")\n                .addAttributes(\"img\", \"align\", \"alt\", \"height\", \"src\", \"title\", \"width\")\n                .addAttributes(\"ol\", \"start\", \"type\")\n                .addAttributes(\"q\", \"cite\")\n                .addAttributes(\"table\", \"summary\", \"width\")\n                .addAttributes(\"td\", \"abbr\", \"axis\", \"colspan\", \"rowspan\", \"width\")\n                .addAttributes(\n                        \"th\", \"abbr\", \"axis\", \"colspan\", \"rowspan\", \"scope\",\n                        \"width\")\n                .addAttributes(\"ul\", \"type\")\n\n                .addProtocols(\"a\", \"href\", \"ftp\", \"http\", \"https\", \"mailto\")\n                .addProtocols(\"blockquote\", \"cite\", \"http\", \"https\")\n                .addProtocols(\"img\", \"src\", \"http\", \"https\")\n                .addProtocols(\"q\", \"cite\", \"http\", \"https\")\n                ;\n    }", "addAttributes": "    public Whitelist addAttributes(String tag, String... keys) {\n        Validate.notEmpty(tag);\n        Validate.notNull(keys);\n\n        TagName tagName = TagName.valueOf(tag);\n        Set<AttributeKey> attributeSet = new HashSet<AttributeKey>();\n        for (String key : keys) {\n            Validate.notEmpty(key);\n            attributeSet.add(AttributeKey.valueOf(key));\n        }\n        if (attributes.containsKey(tagName)) {\n            Set<AttributeKey> currentSet = attributes.get(tagName);\n            currentSet.addAll(attributeSet);\n        } else {\n            attributes.put(tagName, attributeSet);\n        }\n        return this;\n    }", "addEnforcedAttribute": "    public Whitelist addEnforcedAttribute(String tag, String key, String value) {\n        Validate.notEmpty(tag);\n        Validate.notEmpty(key);\n        Validate.notEmpty(value);\n\n        TagName tagName = TagName.valueOf(tag);\n        AttributeKey attrKey = AttributeKey.valueOf(key);\n        AttributeValue attrVal = AttributeValue.valueOf(value);\n\n        if (enforcedAttributes.containsKey(tagName)) {\n            enforcedAttributes.get(tagName).put(attrKey, attrVal);\n        } else {\n            Map<AttributeKey, AttributeValue> attrMap = new HashMap<AttributeKey, AttributeValue>();\n            attrMap.put(attrKey, attrVal);\n            enforcedAttributes.put(tagName, attrMap);\n        }\n        return this;\n    }", "preserveRelativeLinks": "    public Whitelist preserveRelativeLinks(boolean preserve) {\n        preserveRelativeLinks = preserve;\n        return this;\n    }", "addProtocols": "    public Whitelist addProtocols(String tag, String key, String... protocols) {\n        Validate.notEmpty(tag);\n        Validate.notEmpty(key);\n        Validate.notNull(protocols);\n\n        TagName tagName = TagName.valueOf(tag);\n        AttributeKey attrKey = AttributeKey.valueOf(key);\n        Map<AttributeKey, Set<Protocol>> attrMap;\n        Set<Protocol> protSet;\n\n        if (this.protocols.containsKey(tagName)) {\n            attrMap = this.protocols.get(tagName);\n        } else {\n            attrMap = new HashMap<AttributeKey, Set<Protocol>>();\n            this.protocols.put(tagName, attrMap);\n        }\n        if (attrMap.containsKey(attrKey)) {\n            protSet = attrMap.get(attrKey);\n        } else {\n            protSet = new HashSet<Protocol>();\n            attrMap.put(attrKey, protSet);\n        }\n        for (String protocol : protocols) {\n            Validate.notEmpty(protocol);\n            Protocol prot = Protocol.valueOf(protocol);\n            protSet.add(prot);\n        }\n        return this;\n    }", "isSafeAttribute": "    boolean isSafeAttribute(String tagName, Element el, Attribute attr) {\n        TagName tag = TagName.valueOf(tagName);\n        AttributeKey key = AttributeKey.valueOf(attr.getKey());\n\n        if (attributes.containsKey(tag)) {\n            if (attributes.get(tag).contains(key)) {\n                if (protocols.containsKey(tag)) {\n                    Map<AttributeKey, Set<Protocol>> attrProts = protocols.get(tag);\n                    // ok if not defined protocol; otherwise test\n                    return !attrProts.containsKey(key) || testValidProtocol(el, attr, attrProts.get(key));\n                } else { // attribute found, no protocols defined, so OK\n                    return true;\n                }\n            }\n        } else { // no attributes defined for tag, try :all tag\n            return !tagName.equals(\":all\") && isSafeAttribute(\":all\", el, attr);\n        }\n        return false;\n    }", "testValidProtocol": "    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n        // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.\n        // rels without a baseuri get removed\n        String value = el.absUrl(attr.getKey());\n        if (!preserveRelativeLinks)\n            attr.setValue(value);\n        \n        for (Protocol protocol : protocols) {\n            String prot = protocol.toString() + \":\";\n            if (value.toLowerCase().startsWith(prot)) {\n                return true;\n            }\n        }\n        return false;\n    }", "getEnforcedAttributes": "    Attributes getEnforcedAttributes(String tagName) {\n        Attributes attrs = new Attributes();\n        TagName tag = TagName.valueOf(tagName);\n        if (enforcedAttributes.containsKey(tag)) {\n            Map<AttributeKey, AttributeValue> keyVals = enforcedAttributes.get(tag);\n            for (Map.Entry<AttributeKey, AttributeValue> entry : keyVals.entrySet()) {\n                attrs.put(entry.getKey().toString(), entry.getValue().toString());\n            }\n        }\n        return attrs;\n    }", "valueOf": "        static Protocol valueOf(String value) {\n            return new Protocol(value);\n        }", "equals": "        public boolean equals(Object obj) {\n            if (this == obj) return true;\n            if (obj == null) return false;\n            if (getClass() != obj.getClass()) return false;\n            TypedValue other = (TypedValue) obj;\n            if (value == null) {\n                if (other.value != null) return false;\n            } else if (!value.equals(other.value)) return false;\n            return true;\n        }", "toString": "        public String toString() {\n            return value;\n        }"}