{"get": "    public String get(String key) {\n        Validate.notEmpty(key);\n\n        if (attributes == null)\n            return \"\";\n\n        Attribute attr = attributes.get(key);\n        return attr != null ? attr.getValue() : \"\";\n    }", "put": "        public String put(String key, String value) {\n            String dataKey = dataKey(key);\n            String oldValue = hasKey(dataKey) ? attributes.get(dataKey).getValue() : null;\n            Attribute attr = new Attribute(dataKey, value);\n            attributes.put(dataKey, attr);\n            return oldValue;\n        }", "remove": "            public void remove() {\n                attributes.remove(attr.getKey());\n            }", "removeIgnoreCase": "    public void removeIgnoreCase(String key) {\n        Validate.notEmpty(key);\n        if (attributes == null)\n            return;\n        for (Iterator<String> it = attributes.keySet().iterator(); it.hasNext(); ) {\n            String attrKey = it.next();\n            if (attrKey.equalsIgnoreCase(key))\n                attributes.remove(attrKey);\n        }\n    }", "hasKey": "    public boolean hasKey(String key) {\n        return attributes != null && attributes.containsKey(key);\n    }", "hasKeyIgnoreCase": "    public boolean hasKeyIgnoreCase(String key) {\n        if (attributes == null)\n            return false;\n        for (String attrKey : attributes.keySet()) {\n            if (attrKey.equalsIgnoreCase(key))\n                return true;\n        }\n        return false;\n    }", "size": "            public int size() {\n                int count = 0;\n                Iterator iter = new DatasetIterator();\n                while (iter.hasNext())\n                    count++;\n                return count;\n            }", "iterator": "            public Iterator<Map.Entry<String, String>> iterator() {\n                return new DatasetIterator();\n            }", "dataset": "    public Map<String, String> dataset() {\n        return new Dataset();\n    }", "html": "    void html(Appendable accum, Document.OutputSettings out) throws IOException {\n        if (attributes == null)\n            return;\n\n        for (Map.Entry<String, Attribute> entry : attributes.entrySet()) {\n            Attribute attribute = entry.getValue();\n            accum.append(\" \");\n            attribute.html(accum, out);\n        }\n    }", "toString": "    public String toString() {\n        return html();\n    }", "equals": "    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (!(o instanceof Attributes)) return false;\n\n        Attributes that = (Attributes) o;\n\n        return !(attributes != null ? !attributes.equals(that.attributes) : that.attributes != null);\n    }", "clone": "    public Attributes clone() {\n        if (attributes == null)\n            return new Attributes();\n\n        Attributes clone;\n        try {\n            clone = (Attributes) super.clone();\n        } catch (CloneNotSupportedException e) {\n            throw new RuntimeException(e);\n        }\n        clone.attributes = new LinkedHashMap<String, Attribute>(attributes.size());\n        for (Attribute attribute: this)\n            clone.attributes.put(attribute.getKey(), attribute.clone());\n        return clone;\n    }", "hasNext": "            public boolean hasNext() {\n                while (attrIter.hasNext()) {\n                    attr = attrIter.next();\n                    if (attr.isDataAttribute()) return true;\n                }\n                return false;\n            }", "next": "            public Entry<String, String> next() {\n                return new Attribute(attr.getKey().substring(dataPrefix.length()), attr.getValue());\n            }", "dataKey": "    private static String dataKey(String key) {\n        return dataPrefix + key;\n    }"}