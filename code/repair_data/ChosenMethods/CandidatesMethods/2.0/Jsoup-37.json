{"tag": "    public Tag tag() {\n        return tag;\n    }", "id": "    public String id() {\n        String id = attr(\"id\");\n        return id == null ? \"\" : id;\n    }", "attr": "    public Element attr(String attributeKey, String attributeValue) {\n        super.attr(attributeKey, attributeValue);\n        return this;\n    }", "dataset": "    public Map<String, String> dataset() {\n        return attributes.dataset();\n    }", "parent": "    public final Element parent() {\n        return (Element) parentNode;\n    }", "parents": "    public Elements parents() {\n        Elements parents = new Elements();\n        accumulateParents(this, parents);\n        return parents;\n    }", "accumulateParents": "    private static void accumulateParents(Element el, Elements parents) {\n        Element parent = el.parent();\n        if (parent != null && !parent.tagName().equals(\"#root\")) {\n            parents.add(parent);\n            accumulateParents(parent, parents);\n        }\n    }", "child": "    public Element child(int index) {\n        return children().get(index);\n    }", "children": "    public Elements children() {\n        // create on the fly rather than maintaining two lists. if gets slow, memoize, and mark dirty on change\n        List<Element> elements = new ArrayList<Element>();\n        for (Node node : childNodes) {\n            if (node instanceof Element)\n                elements.add((Element) node);\n        }\n        return new Elements(elements);\n    }", "select": "    public Elements select(String cssQuery) {\n        return Selector.select(cssQuery, this);\n    }", "append": "    public Element append(String html) {\n        Validate.notNull(html);\n\n        List<Node> nodes = Parser.parseFragment(html, this, baseUri());\n        addChildren(nodes.toArray(new Node[nodes.size()]));\n        return this;\n    }", "prepend": "    public Element prepend(String html) {\n        Validate.notNull(html);\n        \n        List<Node> nodes = Parser.parseFragment(html, this, baseUri());\n        addChildren(0, nodes.toArray(new Node[nodes.size()]));\n        return this;\n    }", "before": "    public Element before(Node node) {\n        return (Element) super.before(node);\n    }", "after": "    public Element after(Node node) {\n        return (Element) super.after(node);\n    }", "empty": "    public Element empty() {\n        childNodes.clear();\n        return this;\n    }", "wrap": "    public Element wrap(String html) {\n        return (Element) super.wrap(html);\n    }", "text": "    public Element text(String text) {\n        Validate.notNull(text);\n\n        empty();\n        TextNode textNode = new TextNode(text, baseUri);\n        appendChild(textNode);\n\n        return this;\n    }", "data": "    public String data() {\n        StringBuilder sb = new StringBuilder();\n\n        for (Node childNode : childNodes) {\n            if (childNode instanceof DataNode) {\n                DataNode data = (DataNode) childNode;\n                sb.append(data.getWholeData());\n            } else if (childNode instanceof Element) {\n                Element element = (Element) childNode;\n                String elementData = element.data();\n                sb.append(elementData);\n            }\n        }\n        return sb.toString();\n    }   ", "val": "    public Element val(String value) {\n        if (tagName().equals(\"textarea\"))\n            text(value);\n        else\n            attr(\"value\", value);\n        return this;\n    }", "outerHtmlHead": "    void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out) {\n        if (accum.length() > 0 && out.prettyPrint() && (tag.formatAsBlock() || (parent() != null && parent().tag().formatAsBlock()) || out.outline()) )\n            indent(accum, depth, out);\n        accum\n                .append(\"<\")\n                .append(tagName());\n        attributes.html(accum, out);\n\n        if (childNodes.isEmpty() && tag.isSelfClosing())\n            accum.append(\" />\");\n        else\n            accum.append(\">\");\n    }", "outerHtmlTail": "    void outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out) {\n        if (!(childNodes.isEmpty() && tag.isSelfClosing())) {\n            if (out.prettyPrint() && (!childNodes.isEmpty() && (\n                    tag.formatAsBlock() || (out.outline() && (childNodes.size()>1 || (childNodes.size()==1 && !(childNodes.get(0) instanceof TextNode))))\n            )))\n                indent(accum, depth, out);\n            accum.append(\"</\").append(tagName()).append(\">\");\n        }\n    }", "html": "    public Element html(String html) {\n        empty();\n        append(html);\n        return this;\n    }", "toString": "    public String toString() {\n        return outerHtml();\n    }", "equals": "    public boolean equals(Object o) {\n        return this == o;\n    }", "clone": "    public Element clone() {\n        Element clone = (Element) super.clone();\n        clone.classNames = null; // derived on first hit, otherwise gets a pointer to source classnames\n        return clone;\n    }"}