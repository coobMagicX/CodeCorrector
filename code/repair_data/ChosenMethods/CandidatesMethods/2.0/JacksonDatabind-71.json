{"forType": "        public static StringKD forType(Class<?> nominalType)\n        {\n            if (nominalType == String.class) {\n                return sString;\n            }\n            if (nominalType == Object.class) {\n                return sObject;\n            }\n            return new StringKD(nominalType);\n        }", "deserializeKey": "        public final Object deserializeKey(String key, DeserializationContext ctxt)\n            throws IOException, JsonProcessingException\n        {\n            if (key == null) { // is this even legal call?\n                return null;\n            }\n            try {\n                // Ugh... should not have to give parser which may or may not be correct one...\n                Object result = _delegate.deserialize(ctxt.getParser(), ctxt);\n                if (result != null) {\n                    return result;\n                }\n            } catch (Exception re) {\n                throw ctxt.weirdKeyException(_keyClass, key, \"not a valid representation: \"+re.getMessage());\n            }\n            throw ctxt.weirdKeyException(_keyClass, key, \"not a valid representation\");\n        }", "getKeyClass": "        public Class<?> getKeyClass() { return _keyClass; }", "_parse": "        public Object _parse(String key, DeserializationContext ctxt) throws Exception\n        {\n            return _factoryMethod.invoke(null, key);\n        }", "_parseLong": "    protected long _parseLong(String key) throws IllegalArgumentException {\n        return Long.parseLong(key);\n    }", "_parseDouble": "    protected double _parseDouble(String key) throws IllegalArgumentException {\n        return NumberInput.parseDouble(key);\n    }", "_getToStringResolver": "        private EnumResolver _getToStringResolver()\n        {\n            EnumResolver res = _byToStringResolver;\n            if (res == null) {\n                synchronized (this) {\n                    res = EnumResolver.constructUnsafeUsingToString(_byNameResolver.getEnumClass());\n                }\n            }\n            return res;\n        }"}