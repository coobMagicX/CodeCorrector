{"resolve": "    public void resolve(DeserializationContext ctxt) throws JsonMappingException\n    {\n        // May need to resolve types for delegate- and/or property-based creators:\n        if (_valueInstantiator.canCreateUsingDelegate()) {\n            JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());\n            if (delegateType == null) {\n                throw new IllegalArgumentException(\"Invalid delegate-creator definition for \"+_mapType\n                        +\": value instantiator (\"+_valueInstantiator.getClass().getName()\n                        +\") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'\");\n            }\n            /* Theoretically should be able to get CreatorProperty for delegate\n             * parameter to pass; but things get tricky because DelegateCreator\n             * may contain injectable values. So, for now, let's pass nothing.\n             */\n            _delegateDeserializer = findDeserializer(ctxt, delegateType, null);\n        }\n        if (_valueInstantiator.canCreateFromObjectWith()) {\n            SettableBeanProperty[] creatorProps = _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n            _propertyBasedCreator = PropertyBasedCreator.construct(ctxt, _valueInstantiator, creatorProps);\n        }\n        _standardStringKey = _isStdKeyDeser(_mapType, _keyDeserializer);\n    }", "deserialize": "    public Map<Object,Object> deserialize(JsonParser jp, DeserializationContext ctxt,\n            Map<Object,Object> result)\n        throws IOException, JsonProcessingException\n    {\n        // Ok: must point to START_OBJECT or FIELD_NAME\n        JsonToken t = jp.getCurrentToken();\n        if (t != JsonToken.START_OBJECT && t != JsonToken.FIELD_NAME) {\n            throw ctxt.mappingException(getMapClass());\n        }\n        if (_standardStringKey) {\n            _readAndBindStringMap(jp, ctxt, result);\n            return result;\n        }\n        _readAndBind(jp, ctxt, result);\n        return result;\n    }", "put": "        public void put(Object key, Object value)\n        {\n            if (_accumulator.isEmpty()) {\n                _result.put(key, value);\n            } else {\n                MapReferring ref = _accumulator.get(_accumulator.size() - 1);\n                ref.next.put(key, value);\n            }\n        }"}