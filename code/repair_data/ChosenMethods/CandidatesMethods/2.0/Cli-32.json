{"setWidth": "    public void setWidth(int width)\n    {\n        this.defaultWidth = width;\n    }", "getWidth": "    public int getWidth()\n    {\n        return defaultWidth;\n    }", "setDescPadding": "    public void setDescPadding(int padding)\n    {\n        this.defaultDescPad = padding;\n    }", "getDescPadding": "    public int getDescPadding()\n    {\n        return defaultDescPad;\n    }", "getOptionComparator": "    public Comparator getOptionComparator()\n    {\n        return optionComparator;\n    }", "setOptionComparator": "    public void setOptionComparator(Comparator comparator)\n    {\n        if (comparator == null)\n        {\n            this.optionComparator = new OptionComparator();\n        }\n        else\n        {\n            this.optionComparator = comparator;\n        }\n    }", "renderWrappedText": "    protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                             int nextLineTabStop, String text)\n    {\n        int pos = findWrapPos(text, width, 0);\n\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n        if (nextLineTabStop >= width)\n        {\n            // stops infinite loop happening\n            nextLineTabStop = 1;\n        }\n\n        // all following lines must be padded with nextLineTabStop space characters\n        final String padding = createPadding(nextLineTabStop);\n\n        while (true)\n        {\n            text = padding + text.substring(pos).trim();\n            pos = findWrapPos(text, width, 0);\n\n            if (pos == -1)\n            {\n                sb.append(text);\n\n                return sb;\n            }\n            \n            if ((text.length() > width) && (pos == nextLineTabStop - 1))\n            {\n                pos = width;\n            }\n\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        }\n    }", "findWrapPos": "    protected int findWrapPos(String text, int width, int startPos)\n    {\n        int pos;\n        \n        // the line ends before the max wrap pos or a new line char found\n        if (((pos = text.indexOf('\\n', startPos)) != -1 && pos <= width)\n                || ((pos = text.indexOf('\\t', startPos)) != -1 && pos <= width))\n        {\n            return pos + 1;\n        }\n        else if (startPos + width >= text.length())\n        {\n            return -1;\n        }\n\n\n        // look for the last whitespace character before startPos+width\n        pos = startPos + width;\n\n        char c;\n\n        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')\n                && (c != '\\n') && (c != '\\r'))\n        {\n            --pos;\n        }\n\n        // if we found it - just return\n        if (pos > startPos)\n        {\n            return pos;\n        }\n        \n        // if we didn't find one, simply chop at startPos+width\n        pos = startPos + width;\n        while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')\n               && (c != '\\n') && (c != '\\r'))\n        {\n            ++pos;\n        }        \n        return pos == text.length() ? -1 : pos;\n    }", "createPadding": "    protected String createPadding(int len)\n    {\n        char[] padding = new char[len];\n        Arrays.fill(padding, ' ');\n        \n        return new String(padding);\n    }", "rtrim": "    protected String rtrim(String s)\n    {\n        if ((s == null) || (s.length() == 0))\n        {\n            return s;\n        }\n\n        int pos = s.length();\n\n        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))\n        {\n            --pos;\n        }\n\n        return s.substring(0, pos);\n    }", "compare": "        public int compare(Object o1, Object o2)\n        {\n            Option opt1 = (Option) o1;\n            Option opt2 = (Option) o2;\n\n            return opt1.getKey().compareToIgnoreCase(opt2.getKey());\n        }"}