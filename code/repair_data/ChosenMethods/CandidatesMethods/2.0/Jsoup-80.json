{"defaultSettings": "    ParseSettings defaultSettings() {\n        return ParseSettings.preserveCase;\n    }", "parse": "    Document parse(String input, String baseUri) {\n        return parse(new StringReader(input), baseUri, ParseErrorList.noTracking(), ParseSettings.preserveCase);\n    }", "initialiseParse": "    protected void initialiseParse(Reader input, String baseUri, ParseErrorList errors, ParseSettings settings) {\n        super.initialiseParse(input, baseUri, errors, settings);\n        stack.add(doc); // place the document onto the stack. differs from HtmlTreeBuilder (not on stack)\n        doc.outputSettings().syntax(Document.OutputSettings.Syntax.xml);\n    }", "process": "    protected boolean process(Token token) {\n        // start tag, end tag, doctype, comment, character, eof\n        switch (token.type) {\n            case StartTag:\n                insert(token.asStartTag());\n                break;\n            case EndTag:\n                popStackToClose(token.asEndTag());\n                break;\n            case Comment:\n                insert(token.asComment());\n                break;\n            case Character:\n                insert(token.asCharacter());\n                break;\n            case Doctype:\n                insert(token.asDoctype());\n                break;\n            case EOF: // could put some normalisation here if desired\n                break;\n            default:\n                Validate.fail(\"Unexpected token type: \" + token.type);\n        }\n        return true;\n    }", "insertNode": "    private void insertNode(Node node) {\n        currentElement().appendChild(node);\n    }", "insert": "    void insert(Token.Doctype d) {\n        DocumentType doctypeNode = new DocumentType(settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier());\n        doctypeNode.setPubSysKey(d.getPubSysKey());\n        insertNode(doctypeNode);\n    }", "parseFragment": "    List<Node> parseFragment(String inputFragment, String baseUri, ParseErrorList errors, ParseSettings settings) {\n        initialiseParse(new StringReader(inputFragment), baseUri, errors, settings);\n        runParser();\n        return doc.childNodes();\n    }"}