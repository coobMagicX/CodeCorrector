{"addOption": "    public void addOption(Option option) {\n        options.add(option);\n        nameToOption.put(option.getPreferredName(), option);\n\n        for (Iterator i = option.getTriggers().iterator(); i.hasNext();) {\n            nameToOption.put(i.next(), option);\n        }\n    }", "hasOption": "    public boolean hasOption(final Option option) {\n        final boolean present = options.contains(option);\n\n        return present;\n    }", "getOption": "    public Option getOption(final String trigger) {\n        return (Option) nameToOption.get(trigger);\n    }", "getValues": "    public List getValues(final Option option,\n                          List defaultValues) {\n        // initialize the return list\n        List valueList = (List) values.get(option);\n\n        // grab the correct default values\n        if ((valueList == null) || valueList.isEmpty()) {\n            valueList = defaultValues;\n        }\n\n        // augment the list with the default values\n        if ((valueList == null) || valueList.isEmpty()) {\n            valueList = (List) this.defaultValues.get(option);\n        }\n                // if there are more default values as specified, add them to\n                // the list.\n                    // copy the list first\n        \n        return valueList == null ? Collections.EMPTY_LIST : valueList;\n    }", "getUndefaultedValues": "    public List getUndefaultedValues(Option option) {\n      // First grab the command line values\n      List valueList = (List) values.get(option);\n\n      // Finally use an empty list\n      if (valueList == null) {\n        valueList = Collections.EMPTY_LIST;\n      }\n\n      return valueList;\n    }", "getSwitch": "    public Boolean getSwitch(final Option option,\n                             final Boolean defaultValue) {\n        // First grab the command line values\n        Boolean bool = (Boolean) switches.get(option);\n\n        // Secondly try the defaults supplied to the method\n        if (bool == null) {\n            bool = defaultValue;\n        }\n\n        // Thirdly try the option's default values\n        if (bool == null) {\n            bool = (Boolean) this.defaultSwitches.get(option);\n        }\n\n        return bool;\n    }", "getProperty": "    public String getProperty(final Option option,\n                              final String property,\n                              final String defaultValue) {\n        Properties properties = (Properties) optionToProperties.get(option);\n        if (properties == null) {\n            return defaultValue;\n        }\n        return properties.getProperty(property, defaultValue);\n    }", "getProperties": "    public Set getProperties() {\n        return getProperties(new PropertyOption());\n    }", "looksLikeOption": "    public boolean looksLikeOption(final String trigger) {\n        for (final Iterator i = prefixes.iterator(); i.hasNext();) {\n            final String prefix = (String) i.next();\n\n            if (trigger.startsWith(prefix)) {\n                return true;\n            }\n        }\n\n        return false;\n    }", "getOptions": "    public List getOptions() {\n        return Collections.unmodifiableList(options);\n    }", "getOptionTriggers": "    public Set getOptionTriggers() {\n        return Collections.unmodifiableSet(nameToOption.keySet());\n    }", "setDefaultValues": "    public void setDefaultValues(final Option option,\n                                 final List defaults) {\n        if (defaults == null) {\n            defaultValues.remove(option);\n        } else {\n            defaultValues.put(option, defaults);\n        }\n    }", "getNormalised": "    public List getNormalised() {\n        return Collections.unmodifiableList(normalised);\n    }"}