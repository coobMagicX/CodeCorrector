{"getTypeInclusion": "    public abstract JsonTypeInfo.As getTypeInclusion();\n\n    public String baseTypeName() { return _baseType.getRawClass().getName(); }", "baseTypeName": "    public String baseTypeName() { return _baseType.getRawClass().getName(); }", "getPropertyName": "    public final String getPropertyName() { return _typePropertyName; }", "getTypeIdResolver": "    public TypeIdResolver getTypeIdResolver() { return _idResolver; }", "getDefaultImpl": "    public Class<?> getDefaultImpl() {\n        return ClassUtil.rawClass(_defaultImpl);\n    }", "baseType": "    public JavaType baseType() {\n        return _baseType;\n    }", "toString": "    public String toString()\n    {\n        StringBuilder sb = new StringBuilder();\n        sb.append('[').append(getClass().getName());\n        sb.append(\"; base-type:\").append(_baseType);\n        sb.append(\"; id-resolver: \").append(_idResolver);\n    \t    sb.append(']');\n    \t    return sb.toString();\n    }", "_findDeserializer": "    protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n            String typeId) throws IOException\n    {\n        JsonDeserializer<Object> deser = _deserializers.get(typeId);\n        if (deser == null) {\n            /* As per [databind#305], need to provide contextual info. But for\n             * backwards compatibility, let's start by only supporting this\n             * for base class, not via interface. Later on we can add this\n             * to the interface, assuming deprecation at base class helps.\n             */\n            JavaType type = _idResolver.typeFromId(ctxt, typeId);\n            if (type == null) {\n                // use the default impl if no type id available:\n                deser = _findDefaultImplDeserializer(ctxt);\n                if (deser == null) {\n                    // 10-May-2016, tatu: We may get some help...\n                    JavaType actual = _handleUnknownTypeId(ctxt, typeId);\n                    if (actual == null) { // what should this be taken to mean?\n                        // 17-Jan-2019, tatu: As per [databind#2221], better NOT return `null` but...\n                        return null;\n                    }\n                    // ... would this actually work?\n                    deser = ctxt.findContextualValueDeserializer(actual, _property);\n                }\n            } else {\n                /* 16-Dec-2010, tatu: Since nominal type we get here has no (generic) type parameters,\n                 *   we actually now need to explicitly narrow from base type (which may have parameterization)\n                 *   using raw type.\n                 *\n                 *   One complication, though; cannot change 'type class' (simple type to container); otherwise\n                 *   we may try to narrow a SimpleType (Object.class) into MapType (Map.class), losing actual\n                 *   type in process (getting SimpleType of Map.class which will not work as expected)\n                 */\n                if ((_baseType != null)\n                        && _baseType.getClass() == type.getClass()) {\n                    /* 09-Aug-2015, tatu: Not sure if the second part of the check makes sense;\n                     *   but it appears to check that JavaType impl class is the same which is\n                     *   important for some reason?\n                     *   Disabling the check will break 2 Enum-related tests.\n                     */\n                    // 19-Jun-2016, tatu: As per [databind#1270] we may actually get full\n                    //   generic type with custom type resolvers. If so, should try to retain them.\n                    //  Whether this is sufficient to avoid problems remains to be seen, but for\n                    //  now it should improve things.\n                    if (!type.hasGenericTypes()) {\n                        type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());\n                    }\n                }\n                deser = ctxt.findContextualValueDeserializer(type, _property);\n            }\n            _deserializers.put(typeId, deser);\n        }\n        return deser;\n    }", "_findDefaultImplDeserializer": "    protected final JsonDeserializer<Object> _findDefaultImplDeserializer(DeserializationContext ctxt) throws IOException\n    {\n        /* 06-Feb-2013, tatu: As per [databind#148], consider default implementation value of\n         *   {@link java.lang.Void} to mean \"serialize as null\"; as well as DeserializationFeature\n         *   to do swift mapping to null\n         */\n        if (_defaultImpl == null) {\n            if (!ctxt.isEnabled(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE)) {\n                return NullifyingDeserializer.instance;\n            }\n            return null;\n        }\n        Class<?> raw = _defaultImpl.getRawClass();\n        if (ClassUtil.isBogusClass(raw)) {\n            return NullifyingDeserializer.instance;\n        }\n        \n        synchronized (_defaultImpl) {\n            if (_defaultImplDeserializer == null) {\n                _defaultImplDeserializer = ctxt.findContextualValueDeserializer(\n                        _defaultImpl, _property);\n            }\n            return _defaultImplDeserializer;\n        }\n    }", "_deserializeWithNativeTypeId": "    protected Object _deserializeWithNativeTypeId(JsonParser jp, DeserializationContext ctxt, Object typeId)\n        throws IOException\n    {\n        JsonDeserializer<Object> deser;\n        if (typeId == null) {\n            /* 04-May-2014, tatu: Should error be obligatory, or should there be another method\n             *   for \"try to deserialize with native tpye id\"?\n             */\n            deser = _findDefaultImplDeserializer(ctxt);\n            if (deser == null) {\n                return ctxt.reportInputMismatch(baseType(),\n                        \"No (native) type id found when one was expected for polymorphic type handling\");\n            }\n        } else {\n            String typeIdStr = (typeId instanceof String) ? (String) typeId : String.valueOf(typeId);\n            deser = _findDeserializer(ctxt, typeIdStr);\n        }\n        return deser.deserialize(jp, ctxt);\n    }", "_handleUnknownTypeId": "    protected JavaType _handleUnknownTypeId(DeserializationContext ctxt, String typeId)\n        throws IOException\n    {\n        String extraDesc = _idResolver.getDescForKnownTypeIds();\n        if (extraDesc == null) {\n            extraDesc = \"type ids are not statically known\";\n        } else {\n            extraDesc = \"known type ids = \" + extraDesc;\n        }\n        if (_property != null) {\n            extraDesc = String.format(\"%s (for POJO property '%s')\", extraDesc,\n                    _property.getName());\n        }\n        return ctxt.handleUnknownTypeId(_baseType, typeId, _idResolver, extraDesc);\n    }", "_handleMissingTypeId": "    protected JavaType _handleMissingTypeId(DeserializationContext ctxt, String extraDesc)\n        throws IOException\n    {\n        return ctxt.handleMissingTypeId(_baseType, _idResolver, extraDesc);\n    }"}