{"pos": "    int pos() {\n        return pos;\n    }", "isEmpty": "    boolean isEmpty() {\n        return pos >= length;\n    }", "current": "    char current() {\n        return pos >= length ? EOF : input[pos];\n    }", "consume": "    char consume() {\n        char val = pos >= length ? EOF : input[pos];\n        pos++;\n        return val;\n    }", "unconsume": "    void unconsume() {\n        pos--;\n    }", "advance": "    void advance() {\n        pos++;\n    }", "mark": "    void mark() {\n        mark = pos;\n    }", "consumeAsString": "    String consumeAsString() {\n        return new String(input, pos++, 1);\n    }", "consumeTo": "    String consumeTo(String seq) {\n        int offset = nextIndexOf(seq);\n        if (offset != -1) {\n            String consumed = cacheString(pos, offset);\n            pos += offset;\n            return consumed;\n        } else {\n            return consumeToEnd();\n        }\n    }", "consumeToAny": "    String consumeToAny(final char... chars) {\n        final int start = pos;\n        final int remaining = length;\n        final char[] val = input;\n\n        OUTER: while (pos < remaining) {\n            for (char c : chars) {\n                if (val[pos] == c)\n                    break OUTER;\n            }\n            pos++;\n        }\n\n        return pos > start ? cacheString(start, pos-start) : \"\";\n    }", "consumeToAnySorted": "    String consumeToAnySorted(final char... chars) {\n        final int start = pos;\n        final int remaining = length;\n        final char[] val = input;\n\n        while (pos < remaining) {\n            if (Arrays.binarySearch(chars, val[pos]) >= 0)\n                break;\n            pos++;\n        }\n\n        return pos > start ? cacheString(start, pos-start) : \"\";\n    }", "consumeData": "    String consumeData() {\n        // &, <, null\n        final int start = pos;\n        final int remaining = length;\n        final char[] val = input;\n\n        while (pos < remaining) {\n            final char c = val[pos];\n            if (c == '&'|| c ==  '<' || c ==  TokeniserState.nullChar)\n                break;\n            pos++;\n        }\n\n        return pos > start ? cacheString(start, pos-start) : \"\";\n    }", "consumeTagName": "    String consumeTagName() {\n        // '\\t', '\\n', '\\r', '\\f', ' ', '/', '>', nullChar\n        final int start = pos;\n        final int remaining = length;\n        final char[] val = input;\n\n        while (pos < remaining) {\n            final char c = val[pos];\n            if (c == '\\t'|| c ==  '\\n'|| c ==  '\\r'|| c ==  '\\f'|| c ==  ' '|| c ==  '/'|| c ==  '>'|| c ==  TokeniserState.nullChar)\n                break;\n            pos++;\n        }\n\n        return pos > start ? cacheString(start, pos-start) : \"\";\n    }", "consumeToEnd": "    String consumeToEnd() {\n        String data = cacheString(pos, length-pos);\n        pos = length;\n        return data;\n    }", "consumeLetterSequence": "    String consumeLetterSequence() {\n        int start = pos;\n        while (pos < length) {\n            char c = input[pos];\n            if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'))\n                pos++;\n            else\n                break;\n        }\n\n        return cacheString(start, pos - start);\n    }", "consumeLetterThenDigitSequence": "    String consumeLetterThenDigitSequence() {\n        int start = pos;\n        while (pos < length) {\n            char c = input[pos];\n            if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'))\n                pos++;\n            else\n                break;\n        }\n        while (!isEmpty()) {\n            char c = input[pos];\n            if (c >= '0' && c <= '9')\n                pos++;\n            else\n                break;\n        }\n\n        return cacheString(start, pos - start);\n    }", "consumeHexSequence": "    String consumeHexSequence() {\n        int start = pos;\n        while (pos < length) {\n            char c = input[pos];\n            if ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f'))\n                pos++;\n            else\n                break;\n        }\n        return cacheString(start, pos - start);\n    }", "consumeDigitSequence": "    String consumeDigitSequence() {\n        int start = pos;\n        while (pos < length) {\n            char c = input[pos];\n            if (c >= '0' && c <= '9')\n                pos++;\n            else\n                break;\n        }\n        return cacheString(start, pos - start);\n    }", "matches": "    boolean matches(String seq) {\n        int scanLength = seq.length();\n        if (scanLength > length - pos)\n            return false;\n\n        for (int offset = 0; offset < scanLength; offset++)\n            if (seq.charAt(offset) != input[pos+offset])\n                return false;\n        return true;\n    }", "matchesIgnoreCase": "    boolean matchesIgnoreCase(String seq) {\n        int scanLength = seq.length();\n        if (scanLength > length - pos)\n            return false;\n\n        for (int offset = 0; offset < scanLength; offset++) {\n            char upScan = Character.toUpperCase(seq.charAt(offset));\n            char upTarget = Character.toUpperCase(input[pos + offset]);\n            if (upScan != upTarget)\n                return false;\n        }\n        return true;\n    }", "matchesAny": "    boolean matchesAny(char... seq) {\n        if (isEmpty())\n            return false;\n\n        char c = input[pos];\n        for (char seek : seq) {\n            if (seek == c)\n                return true;\n        }\n        return false;\n    }", "matchesAnySorted": "    boolean matchesAnySorted(char[] seq) {\n        return !isEmpty() && Arrays.binarySearch(seq, input[pos]) >= 0;\n    }", "matchesLetter": "    boolean matchesLetter() {\n        if (isEmpty())\n            return false;\n        char c = input[pos];\n        return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');\n    }", "matchesDigit": "    boolean matchesDigit() {\n        if (isEmpty())\n            return false;\n        char c = input[pos];\n        return (c >= '0' && c <= '9');\n    }", "matchConsume": "    boolean matchConsume(String seq) {\n        if (matches(seq)) {\n            pos += seq.length();\n            return true;\n        } else {\n            return false;\n        }\n    }", "matchConsumeIgnoreCase": "    boolean matchConsumeIgnoreCase(String seq) {\n        if (matchesIgnoreCase(seq)) {\n            pos += seq.length();\n            return true;\n        } else {\n            return false;\n        }\n    }", "containsIgnoreCase": "    boolean containsIgnoreCase(String seq) {\n        // used to check presence of </title>, </style>. only finds consistent case.\n        String loScan = seq.toLowerCase(Locale.ENGLISH);\n        String hiScan = seq.toUpperCase(Locale.ENGLISH);\n        return (nextIndexOf(loScan) > -1) || (nextIndexOf(hiScan) > -1);\n    }", "cacheString": "    private String cacheString(final int start, final int count) {\n        final char[] val = input;\n        final String[] cache = stringCache;\n\n        // limit (no cache):\n        if (count > maxCacheLen)\n            return new String(val, start, count);\n\n        // calculate hash:\n        int hash = 0;\n        int offset = start;\n        for (int i = 0; i < count; i++) {\n            hash = 31 * hash + val[offset++];\n        }\n\n        // get from cache\n        final int index = hash & cache.length - 1;\n        String cached = cache[index];\n\n        if (cached == null) { // miss, add\n            cached = new String(val, start, count);\n            cache[index] = cached;\n        } else { // hashcode hit, check equality\n            if (rangeEquals(start, count, cached)) { // hit\n                return cached;\n            } else { // hashcode conflict\n                cached = new String(val, start, count);\n                cache[index] = cached; // update the cache, as recently used strings are more likely to show up again\n            }\n        }\n        return cached;\n    }"}