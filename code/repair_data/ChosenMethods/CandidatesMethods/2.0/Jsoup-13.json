{"attr": "    public Node attr(String attributeKey, String attributeValue) {\n        attributes.put(attributeKey, attributeValue);\n        return this;\n    }", "attributes": "    public Attributes attributes() {\n        return attributes;\n    }", "parent": "    public Node parent() {\n        return parentNode;\n    }", "remove": "    public void remove() {\n        Validate.notNull(parentNode);\n        parentNode.removeChild(this);\n    }", "before": "    public Node before(Node node) {\n        Validate.notNull(node);\n        Validate.notNull(parentNode);\n\n        parentNode.addChildren(siblingIndex(), node);\n        return this;\n    }", "after": "    public Node after(Node node) {\n        Validate.notNull(node);\n        Validate.notNull(parentNode);\n\n        parentNode.addChildren(siblingIndex()+1, node);\n        return this;\n    }", "wrap": "    public Node wrap(String html) {\n        Validate.notEmpty(html);\n\n        Element context = parent() instanceof Element ? (Element) parent() : null;\n        List<Node> wrapChildren = Parser.parseFragment(html, context, baseUri());\n        Node wrapNode = wrapChildren.get(0);\n        if (wrapNode == null || !(wrapNode instanceof Element)) // nothing to wrap with; noop\n            return null;\n\n        Element wrap = (Element) wrapNode;\n        Element deepest = getDeepChild(wrap);\n        parentNode.replaceChild(this, wrap);\n        deepest.addChildren(this);\n\n        // remainder (unbalanced wrap, like <div></div><p></p> -- The <p> is remainder\n        if (wrapChildren.size() > 0) {\n            for (int i = 0; i < wrapChildren.size(); i++) {\n                Node remainder = wrapChildren.get(i);\n                remainder.parentNode.removeChild(remainder);\n                wrap.appendChild(remainder);\n            }\n        }\n        return this;\n    }", "toString": "    public String toString() {\n        return outerHtml();\n    }", "indent": "    protected void indent(StringBuilder accum, int depth, Document.OutputSettings out) {\n        accum.append(\"\\n\").append(StringUtil.padding(depth * out.indentAmount()));\n    }", "equals": "    public boolean equals(Object o) {\n        if (this == o) return true;\n        // todo: have nodes hold a child index, compare against that and parent (not children)\n        return false;\n    }", "clone": "    public Node clone() {\n        return doClone(null); // splits for orphan\n    }", "head": "        public void head(Node node, int depth) {\n            node.outerHtmlHead(accum, depth, out);\n        }", "tail": "        public void tail(Node node, int depth) {\n            if (!node.nodeName().equals(\"#text\")) // saves a void hit.\n                node.outerHtmlTail(accum, depth, out);\n        }"}