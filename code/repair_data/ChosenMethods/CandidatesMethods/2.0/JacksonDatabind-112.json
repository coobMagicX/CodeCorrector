{"withResolved": "    protected StringCollectionDeserializer withResolved(JsonDeserializer<?> delegateDeser,\n            JsonDeserializer<?> valueDeser,\n            NullValueProvider nuller, Boolean unwrapSingle)\n    {\n        if ((_unwrapSingle == unwrapSingle) && (_nullProvider == nuller)\n                && (_valueDeserializer == valueDeser) && (_delegateDeserializer == delegateDeser)) {\n            return this;\n        }\n        return new StringCollectionDeserializer(_containerType, _valueInstantiator,\n                delegateDeser, valueDeser, nuller, unwrapSingle);\n    }", "createContextual": "    public JsonDeserializer<?> createContextual(DeserializationContext ctxt,\n            BeanProperty property) throws JsonMappingException\n    {\n        // May need to resolve types for delegate-based creators:\n        JsonDeserializer<Object> delegate = null;\n        if (_valueInstantiator != null) {\n            // [databind#2324]: check both array-delegating and delegating\n            AnnotatedWithParams delegateCreator = _valueInstantiator.getDelegateCreator();\n            if (delegateCreator != null) {\n                JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());\n                delegate = findDeserializer(ctxt, delegateType, property);\n            }\n        }\n        JsonDeserializer<?> valueDeser = _valueDeserializer;\n        final JavaType valueType = _containerType.getContentType();\n        if (valueDeser == null) {\n            // [databind#125]: May have a content converter\n            valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);\n            if (valueDeser == null) {\n            // And we may also need to get deserializer for String\n                valueDeser = ctxt.findContextualValueDeserializer(valueType, property);\n            }\n        } else { // if directly assigned, probably not yet contextual, so:\n            valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, valueType);\n        }\n        // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly\n        //   comes down to \"List vs Collection\" I suppose... for now, pass Collection\n        Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,\n                JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);\n        NullValueProvider nuller = findContentNullProvider(ctxt, property, valueDeser);\n        if (isDefaultDeserializer(valueDeser)) {\n            valueDeser = null;\n        }\n        return withResolved(delegate, valueDeser, nuller, unwrapSingle);\n    }", "deserialize": "    public Collection<String> deserialize(JsonParser p, DeserializationContext ctxt,\n            Collection<String> result)\n        throws IOException\n    {\n        // Ok: must point to START_ARRAY\n        if (!p.isExpectedStartArrayToken()) {\n            return handleNonArray(p, ctxt, result);\n        }\n\n        if (_valueDeserializer != null) {\n            return deserializeUsingCustom(p, ctxt, result, _valueDeserializer);\n        }\n        try {\n            while (true) {\n                // First the common case:\n                String value = p.nextTextValue();\n                if (value != null) {\n                    result.add(value);\n                    continue;\n                }\n                JsonToken t = p.getCurrentToken();\n                if (t == JsonToken.END_ARRAY) {\n                    break;\n                }\n                if (t == JsonToken.VALUE_NULL) {\n                    if (_skipNullValues) {\n                        continue;\n                    }\n                    value = (String) _nullProvider.getNullValue(ctxt);\n                } else {\n                    value = _parseString(p, ctxt);\n                }\n                result.add(value);\n            }\n        } catch (Exception e) {\n            throw JsonMappingException.wrapWithPath(e, result, result.size());\n        }\n        return result;\n    }"}