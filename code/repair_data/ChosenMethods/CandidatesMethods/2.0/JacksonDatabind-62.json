{"withResolved": "    protected CollectionDeserializer withResolved(JsonDeserializer<?> dd,\n            JsonDeserializer<?> vd, TypeDeserializer vtd)\n    {\n        return withResolved(dd, vd, vtd, _unwrapSingle);\n    }", "createContextual": "    public CollectionDeserializer createContextual(DeserializationContext ctxt,\n            BeanProperty property) throws JsonMappingException\n    {\n        // May need to resolve types for delegate-based creators:\n        JsonDeserializer<Object> delegateDeser = null;\n        if (_valueInstantiator != null) {\n            if (_valueInstantiator.canCreateUsingDelegate()) {\n                JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());\n                if (delegateType == null) {\n                    throw new IllegalArgumentException(\"Invalid delegate-creator definition for \"+_collectionType\n                            +\": value instantiator (\"+_valueInstantiator.getClass().getName()\n                            +\") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'\");\n                }\n                delegateDeser = findDeserializer(ctxt, delegateType, property);\n            }\n        }\n        // [databind#1043]: allow per-property allow-wrapping of single overrides:\n        // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly\n        //   comes down to \"List vs Collection\" I suppose... for now, pass Collection\n        Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,\n                JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);\n        // also, often value deserializer is resolved here:\n        JsonDeserializer<?> valueDeser = _valueDeserializer;\n        \n        // May have a content converter\n        valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);\n        final JavaType vt = _collectionType.getContentType();\n        if (valueDeser == null) {\n            valueDeser = ctxt.findContextualValueDeserializer(vt, property);\n        } else { // if directly assigned, probably not yet contextual, so:\n            valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);\n        }\n        // and finally, type deserializer needs context as well\n        TypeDeserializer valueTypeDeser = _valueTypeDeserializer;\n        if (valueTypeDeser != null) {\n            valueTypeDeser = valueTypeDeser.forProperty(property);\n        }\n        return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);\n    }", "getContentType": "    public JavaType getContentType() {\n        return _collectionType.getContentType();\n    }", "deserialize": "    public Collection<Object> deserialize(JsonParser p, DeserializationContext ctxt,\n            Collection<Object> result)\n        throws IOException\n    {\n        // Ok: must point to START_ARRAY (or equivalent)\n        if (!p.isExpectedStartArrayToken()) {\n            return handleNonArray(p, ctxt, result);\n        }\n        // [databind#631]: Assign current value, to be accessible by custom serializers\n        p.setCurrentValue(result);\n\n        JsonDeserializer<Object> valueDes = _valueDeserializer;\n        final TypeDeserializer typeDeser = _valueTypeDeserializer;\n        CollectionReferringAccumulator referringAccumulator =\n            (valueDes.getObjectIdReader() == null) ? null :\n                new CollectionReferringAccumulator(_collectionType.getContentType().getRawClass(), result);\n\n        JsonToken t;\n        while ((t = p.nextToken()) != JsonToken.END_ARRAY) {\n            try {\n                Object value;\n                if (t == JsonToken.VALUE_NULL) {\n                    value = valueDes.getNullValue(ctxt);\n                } else if (typeDeser == null) {\n                    value = valueDes.deserialize(p, ctxt);\n                } else {\n                    value = valueDes.deserializeWithType(p, ctxt, typeDeser);\n                }\n                if (referringAccumulator != null) {\n                    referringAccumulator.add(value);\n                } else {\n                    result.add(value);\n                }\n            } catch (UnresolvedForwardReference reference) {\n                if (referringAccumulator == null) {\n                    throw JsonMappingException\n                            .from(p, \"Unresolved forward reference but no identity info\", reference);\n                }\n                Referring ref = referringAccumulator.handleUnresolvedReference(reference);\n                reference.getRoid().appendReferring(ref);\n            } catch (Exception e) {\n                boolean wrap = (ctxt == null) || ctxt.isEnabled(DeserializationFeature.WRAP_EXCEPTIONS);\n                if (!wrap && e instanceof RuntimeException) {\n                    throw (RuntimeException)e;\n                }\n                throw JsonMappingException.wrapWithPath(e, result, result.size());\n            }\n        }\n        return result;\n    }", "add": "        public void add(Object value)\n        {\n            if (_accumulator.isEmpty()) {\n                _result.add(value);\n            } else {\n                CollectionReferring ref = _accumulator.get(_accumulator.size() - 1);\n                ref.next.add(value);\n            }\n        }"}