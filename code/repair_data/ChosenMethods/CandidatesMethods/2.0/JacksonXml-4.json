{"serializeValue": "    public void serializeValue(JsonGenerator gen, Object value, JavaType rootType,\n            JsonSerializer<Object> ser) throws IOException\n    {\n        if (value == null) {\n            _serializeXmlNull(gen);\n            return;\n        }\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) { // called by convertValue()\n            asArray = false;\n        } else {\n            QName rootName = _rootNameFromConfig();\n            if (rootName == null) {\n                rootName = _rootNameLookup.findRootName(rootType, _config);\n            }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(rootType);\n            if (asArray) {\n                _startRootArray(xgen, rootName);\n            }\n        }\n        if (ser == null) {\n            ser = findTypedValueSerializer(rootType, true, null);\n        }\n        // From super-class implementation\n        try {\n            ser.serialize(value, gen, this);\n        } catch (IOException ioe) { // no wrapping for IO (and derived)\n            throw ioe;\n        } catch (Exception e) { // but others do need to be, to get path etc\n            String msg = e.getMessage();\n            if (msg == null) {\n                msg = \"[no message for \"+e.getClass().getName()+\"]\";\n            }\n            throw JsonMappingException.from(gen, msg, e);\n        }\n        // end of super-class implementation\n        if (asArray) {\n            gen.writeEndObject();\n        }\n    }", "_serializeXmlNull": "    protected void _serializeXmlNull(JsonGenerator jgen) throws IOException\n    {\n        // 14-Nov-2016, tatu: As per [dataformat-xml#213], we may have explicitly\n        //    configured root name...\n        if (jgen instanceof ToXmlGenerator) {\n            _initWithRootName((ToXmlGenerator) jgen, ROOT_NAME_FOR_NULL);\n        }\n        super.serializeValue(jgen, null);\n    }", "_initWithRootName": "    protected void _initWithRootName(ToXmlGenerator xgen, QName rootName) throws IOException\n    {\n        /* 28-Nov-2012, tatu: We should only initialize the root\n         *  name if no name has been set, as per [dataformat-xml#42],\n         *  to allow for custom serializers to work.\n         */\n        if (!xgen.setNextNameIfMissing(rootName)) {\n            // however, if we are root, we... insist\n            if (xgen.inRoot()) {\n                xgen.setNextName(rootName);\n            }\n        }\n        xgen.initGenerator();\n        String ns = rootName.getNamespaceURI();\n        /* [dataformat-xml#26] If we just try writing root element with namespace,\n         * we will get an explicit prefix. But we'd rather use the default\n         * namespace, so let's try to force that.\n         */\n        if (ns != null && ns.length() > 0) {\n            try {\n                xgen.getStaxWriter().setDefaultNamespace(ns);\n            } catch (XMLStreamException e) {\n                StaxUtil.throwXmlAsIOException(e);\n            }\n        }\n    }"}