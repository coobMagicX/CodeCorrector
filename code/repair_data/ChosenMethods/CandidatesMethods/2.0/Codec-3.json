{"encode": "    public String encode(String value) {\n        return doubleMetaphone(value);   \n    }", "handleGH": "    private int handleGH(String value, \n                         DoubleMetaphoneResult result, \n                         int index) {\n        if (index > 0 && !isVowel(charAt(value, index - 1))) {\n            result.append('K');\n            index += 2;\n        } else if (index == 0) {\n            if (charAt(value, index + 2) == 'I') {\n                result.append('J');\n            } else {\n                result.append('K');\n            }\n            index += 2;\n        } else if ((index > 1 && contains(value, index - 2, 1, \"B\", \"H\", \"D\")) ||\n                   (index > 2 && contains(value, index - 3, 1, \"B\", \"H\", \"D\")) ||\n                   (index > 3 && contains(value, index - 4, 1, \"B\", \"H\"))) {\n            //-- Parker's rule (with some further refinements) - \"hugh\"\n            index += 2;\n        } else {\n            if (index > 2 && charAt(value, index - 1) == 'U' && \n                contains(value, index - 3, 1, \"C\", \"G\", \"L\", \"R\", \"T\")) {\n                //-- \"laugh\", \"McLaughlin\", \"cough\", \"gough\", \"rough\", \"tough\"\n                result.append('F');\n            } else if (index > 0 && charAt(value, index - 1) != 'I') {\n                result.append('K');\n            }\n            index += 2;\n        }\n        return index;\n    }", "isSlavoGermanic": "    private boolean isSlavoGermanic(String value) {\n        return value.indexOf('W') > -1 || value.indexOf('K') > -1 || \n            value.indexOf(\"CZ\") > -1 || value.indexOf(\"WITZ\") > -1;\n    }", "isVowel": "    private boolean isVowel(char ch) {\n        return VOWELS.indexOf(ch) != -1;\n    }", "charAt": "    protected char charAt(String value, int index) {\n        if (index < 0 || index >= value.length()) {\n            return Character.MIN_VALUE;\n        } \n        return value.charAt(index);\n    }", "contains": "    protected static boolean contains(String value, int start, int length, \n                                      String[] criteria) {\n        boolean result = false;\n        if (start >= 0 && start + length <= value.length()) {\n            String target = value.substring(start, start + length);\n\n            for (int i = 0; i < criteria.length; i++) {\n                if (target.equals(criteria[i])) {\n                    result = true;\n                    break;\n                }\n            }\n        }\n        return result;\n    }", "append": "        public void append(String primary, String alternate) {\n            appendPrimary(primary);\n            appendAlternate(alternate);\n        }", "appendPrimary": "        public void appendPrimary(String value) {\n            int addChars = this.maxLength - this.primary.length();\n            if (value.length() <= addChars) {\n                this.primary.append(value);\n            } else {\n                this.primary.append(value.substring(0, addChars));\n            }\n        }", "appendAlternate": "        public void appendAlternate(String value) {\n            int addChars = this.maxLength - this.alternate.length();\n            if (value.length() <= addChars) {\n                this.alternate.append(value);\n            } else {\n                this.alternate.append(value.substring(0, addChars));\n            }\n        }"}