{"getKey": "    public String getKey() {\n        return key;\n    }", "setKey": "    public void setKey(String key) {\n        Validate.notNull(key);\n        key = key.trim();\n        Validate.notEmpty(key); // trimming could potentially make empty, so validate here\n        if (parent != null) {\n            int i = parent.indexOfKey(this.key);\n            if (i != Attributes.NotFound)\n                parent.keys[i] = key;\n        }\n        this.key = key;\n    }", "getValue": "    public String getValue() {\n        return Attributes.checkNotNull(val);\n    }", "setValue": "    public String setValue(String val) {\n        String oldVal = parent.get(this.key);\n        if (parent != null) {\n            int i = parent.indexOfKey(this.key);\n            if (i != Attributes.NotFound)\n                parent.vals[i] = val;\n        }\n        this.val = val;\n        return Attributes.checkNotNull(oldVal);\n    }", "html": "    protected void html(Appendable accum, Document.OutputSettings out) throws IOException {\n        html(key, val, accum, out);\n    }", "toString": "    public String toString() {\n        return html();\n    }", "isDataAttribute": "    protected static boolean isDataAttribute(String key) {\n        return key.startsWith(Attributes.dataPrefix) && key.length() > Attributes.dataPrefix.length();\n    }", "shouldCollapseAttribute": "    protected static boolean shouldCollapseAttribute(final String key, final String val, final Document.OutputSettings out) {\n        return (\n            out.syntax() == Document.OutputSettings.Syntax.html &&\n                (val == null || (\"\".equals(val) || val.equalsIgnoreCase(key)) && Attribute.isBooleanAttribute(key)));\n    }", "isBooleanAttribute": "    protected static boolean isBooleanAttribute(final String key) {\n        return Arrays.binarySearch(booleanAttributes, key) >= 0;\n    }", "equals": "    public boolean equals(Object o) { // note parent not considered\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        Attribute attribute = (Attribute) o;\n        if (key != null ? !key.equals(attribute.key) : attribute.key != null) return false;\n        return val != null ? val.equals(attribute.val) : attribute.val == null;\n    }", "clone": "    public Attribute clone() {\n        try {\n            return (Attribute) super.clone();\n        } catch (CloneNotSupportedException e) {\n            throw new RuntimeException(e);\n        }\n    }"}