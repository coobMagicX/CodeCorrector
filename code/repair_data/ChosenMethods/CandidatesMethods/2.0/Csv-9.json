{"get": "    public String get(final String name) {\n        if (mapping == null) {\n            throw new IllegalStateException(\n                    \"No header mapping was specified, the record values can't be accessed by name\");\n        }\n        final Integer index = mapping.get(name);\n        if (index == null) {\n            throw new IllegalArgumentException(String.format(\"Mapping for %s not found, expected one of %s\", name,\n                    mapping.keySet()));\n        }\n        try {\n            return values[index.intValue()];\n        } catch (final ArrayIndexOutOfBoundsException e) {\n            throw new IllegalArgumentException(String.format(\n                    \"Index for header '%s' is %d but CSVRecord only has %d values!\", name, index,\n                    Integer.valueOf(values.length)));\n        }\n    }", "getComment": "    public String getComment() {\n        return comment;\n    }", "getRecordNumber": "    public long getRecordNumber() {\n        return recordNumber;\n    }", "isMapped": "    public boolean isMapped(final String name) {\n        return mapping != null && mapping.containsKey(name);\n    }", "iterator": "    public Iterator<String> iterator() {\n        return toList().iterator();\n    }", "putIn": "    <M extends Map<String, String>> M putIn(final M map) {\n        for (final Entry<String, Integer> entry : mapping.entrySet()) {\n            final int col = entry.getValue().intValue();\n            if (col < values.length) {\n                map.put(entry.getKey(), values[col]);\n            }\n        }\n        return map;\n    }", "size": "    public int size() {\n        return values.length;\n    }", "toMap": "    public Map<String, String> toMap() {\n        return putIn(new HashMap<String, String>(values.length));\n    }", "toString": "    public String toString() {\n        return Arrays.toString(values);\n    }", "values": "    String[] values() {\n        return values;\n    }"}