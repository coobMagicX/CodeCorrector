{"equals": "    public boolean equals(final Object it) {\n        if (it == null || getClass() != it.getClass()) {\n            return false;\n        }\n        return equals((TarArchiveEntry) it);\n    }", "getName": "    public String getName() {\n        return name;\n    }", "getFile": "    public File getFile() {\n        return file;\n    }", "isDirectory": "    public boolean isDirectory() {\n        if (file != null) {\n            return file.isDirectory();\n        }\n\n        if (linkFlag == LF_DIR) {\n            return true;\n        }\n\n        if (getName().endsWith(\"/\")) {\n            return true;\n        }\n\n        return false;\n    }", "isFile": "    public boolean isFile() {\n        if (file != null) {\n            return file.isFile();\n        }\n        if (linkFlag == LF_OLDNORM || linkFlag == LF_NORMAL) {\n            return true;\n        }\n        return !getName().endsWith(\"/\");\n    }", "normalizeFileName": "    private static String normalizeFileName(String fileName,\n                                            final boolean preserveLeadingSlashes) {\n        final String osname = System.getProperty(\"os.name\").toLowerCase(Locale.ENGLISH);\n\n        if (osname != null) {\n\n            // Strip off drive letters!\n            // REVIEW Would a better check be \"(File.separator == '\\')\"?\n\n            if (osname.startsWith(\"windows\")) {\n                if (fileName.length() > 2) {\n                    final char ch1 = fileName.charAt(0);\n                    final char ch2 = fileName.charAt(1);\n\n                    if (ch2 == ':'\n                        && (ch1 >= 'a' && ch1 <= 'z'\n                            || ch1 >= 'A' && ch1 <= 'Z')) {\n                        fileName = fileName.substring(2);\n                    }\n                }\n            } else if (osname.contains(\"netware\")) {\n                final int colon = fileName.indexOf(':');\n                if (colon != -1) {\n                    fileName = fileName.substring(colon + 1);\n                }\n            }\n        }\n\n        fileName = fileName.replace(File.separatorChar, '/');\n\n        // No absolute pathnames\n        // Windows (and Posix?) paths can start with \"\\\\NetworkDrive\\\",\n        // so we loop on starting /'s.\n        while (!preserveLeadingSlashes && fileName.startsWith(\"/\")) {\n            fileName = fileName.substring(1);\n        }\n        return fileName;\n    }"}