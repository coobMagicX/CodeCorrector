{"getLocalFileDataLength": "    public ZipShort getLocalFileDataLength() {\n        return new ZipShort(size != null ? 2 * DWORD : 0);\n    }", "getCentralDirectoryLength": "    public ZipShort getCentralDirectoryLength() {\n        return new ZipShort((size != null ? DWORD : 0)\n                            + (compressedSize != null ? DWORD : 0)\n                            + (relativeHeaderOffset != null ? DWORD : 0)\n                            + (diskStart != null ? WORD : 0));\n    }", "reparseCentralDirectoryData": "    public void reparseCentralDirectoryData(boolean hasUncompressedSize,\n                                            boolean hasCompressedSize,\n                                            boolean hasRelativeHeaderOffset,\n                                            boolean hasDiskStart)\n        throws ZipException {\n        if (rawCentralDirectoryData != null) {\n            int expectedLength = (hasUncompressedSize ? DWORD : 0)\n                + (hasCompressedSize ? DWORD : 0)\n                + (hasRelativeHeaderOffset ? DWORD : 0)\n                + (hasDiskStart ? WORD : 0);\n            if (rawCentralDirectoryData.length != expectedLength) {\n                throw new ZipException(\"central directory zip64 extended\"\n                                       + \" information extra field's length\"\n                                       + \" doesn't match central directory\"\n                                       + \" data.  Expected length \"\n                                       + expectedLength + \" but is \"\n                                       + rawCentralDirectoryData.length);\n            }\n            int offset = 0;\n            if (hasUncompressedSize) {\n                size = new ZipEightByteInteger(rawCentralDirectoryData, offset);\n                offset += DWORD;\n            }\n            if (hasCompressedSize) {\n                compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,\n                                                         offset);\n                offset += DWORD;\n            }\n            if (hasRelativeHeaderOffset) {\n                relativeHeaderOffset =\n                    new ZipEightByteInteger(rawCentralDirectoryData, offset);\n                offset += DWORD;\n            }\n            if (hasDiskStart) {\n                diskStart = new ZipLong(rawCentralDirectoryData, offset);\n                offset += WORD;\n            }\n        }\n    }", "getSize": "    public ZipEightByteInteger getSize() {\n        return size;\n    }", "setSize": "    public void setSize(ZipEightByteInteger size) {\n        this.size = size;\n    }", "getCompressedSize": "    public ZipEightByteInteger getCompressedSize() {\n        return compressedSize;\n    }", "setCompressedSize": "    public void setCompressedSize(ZipEightByteInteger compressedSize) {\n        this.compressedSize = compressedSize;\n    }", "getRelativeHeaderOffset": "    public ZipEightByteInteger getRelativeHeaderOffset() {\n        return relativeHeaderOffset;\n    }", "setRelativeHeaderOffset": "    public void setRelativeHeaderOffset(ZipEightByteInteger rho) {\n        relativeHeaderOffset = rho;\n    }", "getDiskStartNumber": "    public ZipLong getDiskStartNumber() {\n        return diskStart;\n    }", "setDiskStartNumber": "    public void setDiskStartNumber(ZipLong ds) {\n        diskStart = ds;\n    }", "addSizes": "    private int addSizes(byte[] data) {\n        int off = 0;\n        if (size != null) {\n            System.arraycopy(size.getBytes(), 0, data, 0, DWORD);\n            off += DWORD;\n        }\n        if (compressedSize != null) {\n            System.arraycopy(compressedSize.getBytes(), 0, data, off, DWORD);\n            off += DWORD;\n        }\n        return off;\n    }"}