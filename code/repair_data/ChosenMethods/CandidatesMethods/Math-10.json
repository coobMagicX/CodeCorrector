{"getCompiler": "    public static DSCompiler getCompiler(int parameters, int order) {\n\n        // get the cached compilers\n        final DSCompiler[][] cache = compilers.get();\n        if (cache != null && cache.length > parameters && cache[parameters].length > order) {\n            if (cache[parameters][order] != null) {\n                // the compiler has already been created\n                return cache[parameters][order];\n            }\n        }\n\n        // we need to create more compilers\n        final int maxParameters = FastMath.max(parameters, cache == null ? 0 : cache.length);\n        final int maxOrder      = FastMath.max(order,     cache == null ? 0 : cache[0].length);\n        final DSCompiler[][] newCache = new DSCompiler[maxParameters + 1][maxOrder + 1];\n\n        if (cache != null) {\n            // preserve the already created compilers\n            for (int i = 0; i < cache.length; ++i) {\n                System.arraycopy(cache[i], 0, newCache[i], 0, cache[i].length);\n            }\n        }\n\n        // create the array in increasing diagonal order\n        for (int diag = 0; diag <= parameters + order; ++diag) {\n            for (int o = FastMath.max(0, diag - parameters); o <= FastMath.min(order, diag); ++o) {\n                final int p = diag - o;\n                if (newCache[p][o] == null) {\n                    final DSCompiler valueCompiler      = (p == 0) ? null : newCache[p - 1][o];\n                    final DSCompiler derivativeCompiler = (o == 0) ? null : newCache[p][o - 1];\n                    newCache[p][o] = new DSCompiler(p, o, valueCompiler, derivativeCompiler);\n                }\n            }\n        }\n\n        // atomically reset the cached compilers array\n        compilers.compareAndSet(cache, newCache);\n\n        return newCache[parameters][order];\n\n    }", "compileSizes": "    private static int[][] compileSizes(final int parameters, final int order,\n                                        final DSCompiler valueCompiler) {\n\n        final int[][] sizes = new int[parameters + 1][order + 1];\n        if (parameters == 0) {\n            Arrays.fill(sizes[0], 1);\n        } else {\n            System.arraycopy(valueCompiler.sizes, 0, sizes, 0, parameters);\n            sizes[parameters][0] = 1;\n            for (int i = 0; i < order; ++i) {\n                sizes[parameters][i + 1] = sizes[parameters][i] + sizes[parameters - 1][i + 1];\n            }\n        }\n\n        return sizes;\n\n    }", "compileDerivativesIndirection": "    private static int[][] compileDerivativesIndirection(final int parameters, final int order,\n                                                      final DSCompiler valueCompiler,\n                                                      final DSCompiler derivativeCompiler) {\n\n        if (parameters == 0 || order == 0) {\n            return new int[1][parameters];\n        }\n\n        final int vSize = valueCompiler.derivativesIndirection.length;\n        final int dSize = derivativeCompiler.derivativesIndirection.length;\n        final int[][] derivativesIndirection = new int[vSize + dSize][parameters];\n\n        // set up the indices for the value part\n        for (int i = 0; i < vSize; ++i) {\n            // copy the first indices, the last one remaining set to 0\n            System.arraycopy(valueCompiler.derivativesIndirection[i], 0,\n                             derivativesIndirection[i], 0,\n                             parameters - 1);\n        }\n\n        // set up the indices for the derivative part\n        for (int i = 0; i < dSize; ++i) {\n\n            // copy the indices\n            System.arraycopy(derivativeCompiler.derivativesIndirection[i], 0,\n                             derivativesIndirection[vSize + i], 0,\n                             parameters);\n\n            // increment the derivation order for the last parameter\n            derivativesIndirection[vSize + i][parameters - 1]++;\n\n        }\n\n        return derivativesIndirection;\n\n    }", "compileLowerIndirection": "    private static int[] compileLowerIndirection(final int parameters, final int order,\n                                              final DSCompiler valueCompiler,\n                                              final DSCompiler derivativeCompiler) {\n\n        if (parameters == 0 || order <= 1) {\n            return new int[] { 0 };\n        }\n\n        // this is an implementation of definition 6 in Dan Kalman's paper.\n        final int vSize = valueCompiler.lowerIndirection.length;\n        final int dSize = derivativeCompiler.lowerIndirection.length;\n        final int[] lowerIndirection = new int[vSize + dSize];\n        System.arraycopy(valueCompiler.lowerIndirection, 0, lowerIndirection, 0, vSize);\n        for (int i = 0; i < dSize; ++i) {\n            lowerIndirection[vSize + i] = valueCompiler.getSize() + derivativeCompiler.lowerIndirection[i];\n        }\n\n        return lowerIndirection;\n\n    }", "compileMultiplicationIndirection": "    private static int[][][] compileMultiplicationIndirection(final int parameters, final int order,\n                                                           final DSCompiler valueCompiler,\n                                                           final DSCompiler derivativeCompiler,\n                                                           final int[] lowerIndirection) {\n\n        if ((parameters == 0) || (order == 0)) {\n            return new int[][][] { { { 1, 0, 0 } } };\n        }\n\n        // this is an implementation of definition 3 in Dan Kalman's paper.\n        final int vSize = valueCompiler.multIndirection.length;\n        final int dSize = derivativeCompiler.multIndirection.length;\n        final int[][][] multIndirection = new int[vSize + dSize][][];\n\n        System.arraycopy(valueCompiler.multIndirection, 0, multIndirection, 0, vSize);\n\n        for (int i = 0; i < dSize; ++i) {\n            final int[][] dRow = derivativeCompiler.multIndirection[i];\n            List<int[]> row = new ArrayList<int[]>();\n            for (int j = 0; j < dRow.length; ++j) {\n                row.add(new int[] { dRow[j][0], lowerIndirection[dRow[j][1]], vSize + dRow[j][2] });\n                row.add(new int[] { dRow[j][0], vSize + dRow[j][1], lowerIndirection[dRow[j][2]] });\n            }\n\n            // combine terms with similar derivation orders\n            final List<int[]> combined = new ArrayList<int[]>(row.size());\n            for (int j = 0; j < row.size(); ++j) {\n                final int[] termJ = row.get(j);\n                if (termJ[0] > 0) {\n                    for (int k = j + 1; k < row.size(); ++k) {\n                        final int[] termK = row.get(k);\n                        if (termJ[1] == termK[1] && termJ[2] == termK[2]) {\n                            // combine termJ and termK\n                            termJ[0] += termK[0];\n                            // make sure we will skip termK later on in the outer loop\n                            termK[0] = 0;\n                        }\n                    }\n                    combined.add(termJ);\n                }\n            }\n\n            multIndirection[vSize + i] = combined.toArray(new int[combined.size()][]);\n\n        }\n\n        return multIndirection;\n\n    }", "compileCompositionIndirection": "    private static int[][][] compileCompositionIndirection(final int parameters, final int order,\n                                                        final DSCompiler valueCompiler,\n                                                        final DSCompiler derivativeCompiler,\n                                                        final int[][] sizes,\n                                                        final int[][] derivativesIndirection) {\n\n        if ((parameters == 0) || (order == 0)) {\n            return new int[][][] { { { 1, 0 } } };\n        }\n\n        final int vSize = valueCompiler.compIndirection.length;\n        final int dSize = derivativeCompiler.compIndirection.length;\n        final int[][][] compIndirection = new int[vSize + dSize][][];\n\n        // the composition rules from the value part can be reused as is\n        System.arraycopy(valueCompiler.compIndirection, 0, compIndirection, 0, vSize);\n\n        // the composition rules for the derivative part are deduced by\n        // differentiation the rules from the underlying compiler once\n        // with respect to the parameter this compiler handles and the\n        // underlying one did not handle\n        for (int i = 0; i < dSize; ++i) {\n            List<int[]> row = new ArrayList<int[]>();\n            for (int[] term : derivativeCompiler.compIndirection[i]) {\n\n                // handle term p * f_k(g(x)) * g_l1(x) * g_l2(x) * ... * g_lp(x)\n\n                // derive the first factor in the term: f_k with respect to new parameter\n                int[] derivedTermF = new int[term.length + 1];\n                derivedTermF[0] = term[0];     // p\n                derivedTermF[1] = term[1] + 1; // f_(k+1)\n                int[] orders = new int[parameters];\n                orders[parameters - 1] = 1;\n                derivedTermF[term.length] = getPartialDerivativeIndex(parameters, order, sizes, orders);  // g_1\n                for (int j = 2; j < term.length; ++j) {\n                    // convert the indices as the mapping for the current order\n                    // is different from the mapping with one less order\n                    derivedTermF[j] = convertIndex(term[j], parameters,\n                                                   derivativeCompiler.derivativesIndirection,\n                                                   parameters, order, sizes);\n                }\n                Arrays.sort(derivedTermF, 2, derivedTermF.length);\n                row.add(derivedTermF);\n\n                // derive the various g_l\n                for (int l = 2; l < term.length; ++l) {\n                    int[] derivedTermG = new int[term.length];\n                    derivedTermG[0] = term[0];\n                    derivedTermG[1] = term[1];\n                    for (int j = 2; j < term.length; ++j) {\n                        // convert the indices as the mapping for the current order\n                        // is different from the mapping with one less order\n                        derivedTermG[j] = convertIndex(term[j], parameters,\n                                                       derivativeCompiler.derivativesIndirection,\n                                                       parameters, order, sizes);\n                        if (j == l) {\n                            // derive this term\n                            System.arraycopy(derivativesIndirection[derivedTermG[j]], 0, orders, 0, parameters);\n                            orders[parameters - 1]++;\n                            derivedTermG[j] = getPartialDerivativeIndex(parameters, order, sizes, orders);\n                        }\n                    }\n                    Arrays.sort(derivedTermG, 2, derivedTermG.length);\n                    row.add(derivedTermG);\n                }\n\n            }\n\n            // combine terms with similar derivation orders\n            final List<int[]> combined = new ArrayList<int[]>(row.size());\n            for (int j = 0; j < row.size(); ++j) {\n                final int[] termJ = row.get(j);\n                if (termJ[0] > 0) {\n                    for (int k = j + 1; k < row.size(); ++k) {\n                        final int[] termK = row.get(k);\n                        boolean equals = termJ.length == termK.length;\n                        for (int l = 1; equals && l < termJ.length; ++l) {\n                            equals &= termJ[l] == termK[l];\n                        }\n                        if (equals) {\n                            // combine termJ and termK\n                            termJ[0] += termK[0];\n                            // make sure we will skip termK later on in the outer loop\n                            termK[0] = 0;\n                        }\n                    }\n                    combined.add(termJ);\n                }\n            }\n\n            compIndirection[vSize + i] = combined.toArray(new int[combined.size()][]);\n\n        }\n\n        return compIndirection;\n\n    }", "getPartialDerivativeIndex": "    private static int getPartialDerivativeIndex(final int parameters, final int order,\n                                                 final int[][] sizes, final int ... orders)\n        throws NumberIsTooLargeException {\n\n        // the value is obtained by diving into the recursive Dan Kalman's structure\n        // this is theorem 2 of his paper, with recursion replaced by iteration\n        int index     = 0;\n        int m         = order;\n        int ordersSum = 0;\n        for (int i = parameters - 1; i >= 0; --i) {\n\n            // derivative order for current free parameter\n            int derivativeOrder = orders[i];\n\n            // safety check\n            ordersSum += derivativeOrder;\n            if (ordersSum > order) {\n                throw new NumberIsTooLargeException(ordersSum, order, true);\n            }\n\n            while (derivativeOrder-- > 0) {\n                // as long as we differentiate according to current free parameter,\n                // we have to skip the value part and dive into the derivative part\n                // so we add the size of the value part to the base index\n                index += sizes[i][m--];\n            }\n\n        }\n\n        return index;\n\n    }", "convertIndex": "    private static int convertIndex(final int index,\n                                    final int srcP, final int[][] srcDerivativesIndirection,\n                                    final int destP, final int destO, final int[][] destSizes) {\n        int[] orders = new int[destP];\n        System.arraycopy(srcDerivativesIndirection[index], 0, orders, 0, FastMath.min(srcP, destP));\n        return getPartialDerivativeIndex(destP, destO, destSizes, orders);\n    }", "getPartialDerivativeOrders": "    public int[] getPartialDerivativeOrders(final int index) {\n        return derivativesIndirection[index];\n    }", "getSize": "    public int getSize() {\n        return sizes[parameters][order];\n    }", "linearCombination": "    public void linearCombination(final double a1, final double[] c1, final int offset1,\n                                  final double a2, final double[] c2, final int offset2,\n                                  final double a3, final double[] c3, final int offset3,\n                                  final double a4, final double[] c4, final int offset4,\n                                  final double[] result, final int resultOffset) {\n        for (int i = 0; i < getSize(); ++i) {\n            result[resultOffset + i] =\n                    MathArrays.linearCombination(a1, c1[offset1 + i],\n                                                 a2, c2[offset2 + i],\n                                                 a3, c3[offset3 + i],\n                                                 a4, c4[offset4 + i]);\n        }\n    }", "add": "    public void add(final double[] lhs, final int lhsOffset,\n                    final double[] rhs, final int rhsOffset,\n                    final double[] result, final int resultOffset) {\n        for (int i = 0; i < getSize(); ++i) {\n            result[resultOffset + i] = lhs[lhsOffset + i] + rhs[rhsOffset + i];\n        }\n    }", "subtract": "    public void subtract(final double[] lhs, final int lhsOffset,\n                         final double[] rhs, final int rhsOffset,\n                         final double[] result, final int resultOffset) {\n        for (int i = 0; i < getSize(); ++i) {\n            result[resultOffset + i] = lhs[lhsOffset + i] - rhs[rhsOffset + i];\n        }\n    }", "multiply": "    public void multiply(final double[] lhs, final int lhsOffset,\n                         final double[] rhs, final int rhsOffset,\n                         final double[] result, final int resultOffset) {\n        for (int i = 0; i < multIndirection.length; ++i) {\n            final int[][] mappingI = multIndirection[i];\n            double r = 0;\n            for (int j = 0; j < mappingI.length; ++j) {\n                r += mappingI[j][0] *\n                     lhs[lhsOffset + mappingI[j][1]] *\n                     rhs[rhsOffset + mappingI[j][2]];\n            }\n            result[resultOffset + i] = r;\n        }\n    }", "divide": "    public void divide(final double[] lhs, final int lhsOffset,\n                       final double[] rhs, final int rhsOffset,\n                       final double[] result, final int resultOffset) {\n        final double[] reciprocal = new double[getSize()];\n        pow(rhs, lhsOffset, -1, reciprocal, 0);\n        multiply(lhs, lhsOffset, reciprocal, 0, result, resultOffset);\n    }", "remainder": "    public void remainder(final double[] lhs, final int lhsOffset,\n                          final double[] rhs, final int rhsOffset,\n                          final double[] result, final int resultOffset) {\n\n        // compute k such that lhs % rhs = lhs - k rhs\n        final double rem = lhs[lhsOffset] % rhs[rhsOffset];\n        final double k   = FastMath.rint((lhs[lhsOffset] - rem) / rhs[rhsOffset]);\n\n        // set up value\n        result[resultOffset] = rem;\n\n        // set up partial derivatives\n        for (int i = 1; i < getSize(); ++i) {\n            result[resultOffset + i] = lhs[lhsOffset + i] - k * rhs[rhsOffset + i];\n        }\n\n    }", "pow": "    public void pow(final double[] x, final int xOffset,\n                    final double[] y, final int yOffset,\n                    final double[] result, final int resultOffset) {\n        final double[] logX = new double[getSize()];\n        log(x, xOffset, logX, 0);\n        final double[] yLogX = new double[getSize()];\n        multiply(logX, 0, y, yOffset, yLogX, 0);\n        exp(yLogX, 0, result, resultOffset);\n    }", "rootN": "    public void rootN(final double[] operand, final int operandOffset, final int n,\n                      final double[] result, final int resultOffset) {\n\n        // create the function value and derivatives\n        // [x^(1/n), (1/n)x^((1/n)-1), (1-n)/n^2x^((1/n)-2), ... ]\n        double[] function = new double[1 + order];\n        double xk;\n        if (n == 2) {\n            function[0] = FastMath.sqrt(operand[operandOffset]);\n            xk          = 0.5 / function[0];\n        } else if (n == 3) {\n            function[0] = FastMath.cbrt(operand[operandOffset]);\n            xk          = 1.0 / (3.0 * function[0] * function[0]);\n        } else {\n            function[0] = FastMath.pow(operand[operandOffset], 1.0 / n);\n            xk          = 1.0 / (n * FastMath.pow(function[0], n - 1));\n        }\n        final double nReciprocal = 1.0 / n;\n        final double xReciprocal = 1.0 / operand[operandOffset];\n        for (int i = 1; i <= order; ++i) {\n            function[i] = xk;\n            xk *= xReciprocal * (nReciprocal - i);\n        }\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }", "exp": "    public void exp(final double[] operand, final int operandOffset,\n                    final double[] result, final int resultOffset) {\n\n        // create the function value and derivatives\n        double[] function = new double[1 + order];\n        Arrays.fill(function, FastMath.exp(operand[operandOffset]));\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }", "expm1": "    public void expm1(final double[] operand, final int operandOffset,\n                      final double[] result, final int resultOffset) {\n\n        // create the function value and derivatives\n        double[] function = new double[1 + order];\n        function[0] = FastMath.expm1(operand[operandOffset]);\n        Arrays.fill(function, 1, 1 + order, FastMath.exp(operand[operandOffset]));\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }", "log": "    public void log(final double[] operand, final int operandOffset,\n                    final double[] result, final int resultOffset) {\n\n        // create the function value and derivatives\n        double[] function = new double[1 + order];\n        function[0] = FastMath.log(operand[operandOffset]);\n        if (order > 0) {\n            double inv = 1.0 / operand[operandOffset];\n            double xk  = inv;\n            for (int i = 1; i <= order; ++i) {\n                function[i] = xk;\n                xk *= -i * inv;\n            }\n        }\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }", "log1p": "    public void log1p(final double[] operand, final int operandOffset,\n                      final double[] result, final int resultOffset) {\n\n        // create the function value and derivatives\n        double[] function = new double[1 + order];\n        function[0] = FastMath.log1p(operand[operandOffset]);\n        if (order > 0) {\n            double inv = 1.0 / (1.0 + operand[operandOffset]);\n            double xk  = inv;\n            for (int i = 1; i <= order; ++i) {\n                function[i] = xk;\n                xk *= -i * inv;\n            }\n        }\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }", "log10": "    public void log10(final double[] operand, final int operandOffset,\n                      final double[] result, final int resultOffset) {\n\n        // create the function value and derivatives\n        double[] function = new double[1 + order];\n        function[0] = FastMath.log10(operand[operandOffset]);\n        if (order > 0) {\n            double inv = 1.0 / operand[operandOffset];\n            double xk  = inv / FastMath.log(10.0);\n            for (int i = 1; i <= order; ++i) {\n                function[i] = xk;\n                xk *= -i * inv;\n            }\n        }\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }", "cos": "    public void cos(final double[] operand, final int operandOffset,\n                    final double[] result, final int resultOffset) {\n\n        // create the function value and derivatives\n        double[] function = new double[1 + order];\n        function[0] = FastMath.cos(operand[operandOffset]);\n        if (order > 0) {\n            function[1] = -FastMath.sin(operand[operandOffset]);\n            for (int i = 2; i <= order; ++i) {\n                function[i] = -function[i - 2];\n            }\n        }\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }", "sin": "    public void sin(final double[] operand, final int operandOffset,\n                    final double[] result, final int resultOffset) {\n\n        // create the function value and derivatives\n        double[] function = new double[1 + order];\n        function[0] = FastMath.sin(operand[operandOffset]);\n        if (order > 0) {\n            function[1] = FastMath.cos(operand[operandOffset]);\n            for (int i = 2; i <= order; ++i) {\n                function[i] = -function[i - 2];\n            }\n        }\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }", "tan": "    public void tan(final double[] operand, final int operandOffset,\n                    final double[] result, final int resultOffset) {\n\n        // create the function value and derivatives\n        final double[] function = new double[1 + order];\n        final double t = FastMath.tan(operand[operandOffset]);\n        function[0] = t;\n\n        if (order > 0) {\n\n            // the nth order derivative of tan has the form:\n            // dn(tan(x)/dxn = P_n(tan(x))\n            // where P_n(t) is a degree n+1 polynomial with same parity as n+1\n            // P_0(t) = t, P_1(t) = 1 + t^2, P_2(t) = 2 t (1 + t^2) ...\n            // the general recurrence relation for P_n is:\n            // P_n(x) = (1+t^2) P_(n-1)'(t)\n            // as per polynomial parity, we can store coefficients of both P_(n-1) and P_n in the same array\n            final double[] p = new double[order + 2];\n            p[1] = 1;\n            final double t2 = t * t;\n            for (int n = 1; n <= order; ++n) {\n\n                // update and evaluate polynomial P_n(t)\n                double v = 0;\n                p[n + 1] = n * p[n];\n                for (int k = n + 1; k >= 0; k -= 2) {\n                    v = v * t2 + p[k];\n                    if (k > 2) {\n                        p[k - 2] = (k - 1) * p[k - 1] + (k - 3) * p[k - 3];\n                    } else if (k == 2) {\n                        p[0] = p[1];\n                    }\n                }\n                if ((n & 0x1) == 0) {\n                    v *= t;\n                }\n\n                function[n] = v;\n\n            }\n        }\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }", "acos": "    public void acos(final double[] operand, final int operandOffset,\n                    final double[] result, final int resultOffset) {\n\n        // create the function value and derivatives\n        double[] function = new double[1 + order];\n        final double x = operand[operandOffset];\n        function[0] = FastMath.acos(x);\n        if (order > 0) {\n            // the nth order derivative of acos has the form:\n            // dn(acos(x)/dxn = P_n(x) / [1 - x^2]^((2n-1)/2)\n            // where P_n(x) is a degree n-1 polynomial with same parity as n-1\n            // P_1(x) = -1, P_2(x) = -x, P_3(x) = -2x^2 - 1 ...\n            // the general recurrence relation for P_n is:\n            // P_n(x) = (1-x^2) P_(n-1)'(x) + (2n-3) x P_(n-1)(x)\n            // as per polynomial parity, we can store coefficients of both P_(n-1) and P_n in the same array\n            final double[] p = new double[order];\n            p[0] = -1;\n            final double x2    = x * x;\n            final double f     = 1.0 / (1 - x2);\n            double coeff = FastMath.sqrt(f);\n            function[1] = coeff * p[0];\n            for (int n = 2; n <= order; ++n) {\n\n                // update and evaluate polynomial P_n(x)\n                double v = 0;\n                p[n - 1] = (n - 1) * p[n - 2];\n                for (int k = n - 1; k >= 0; k -= 2) {\n                    v = v * x2 + p[k];\n                    if (k > 2) {\n                        p[k - 2] = (k - 1) * p[k - 1] + (2 * n - k) * p[k - 3];\n                    } else if (k == 2) {\n                        p[0] = p[1];\n                    }\n                }\n                if ((n & 0x1) == 0) {\n                    v *= x;\n                }\n\n                coeff *= f;\n                function[n] = coeff * v;\n\n            }\n        }\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }", "asin": "    public void asin(final double[] operand, final int operandOffset,\n                    final double[] result, final int resultOffset) {\n\n        // create the function value and derivatives\n        double[] function = new double[1 + order];\n        final double x = operand[operandOffset];\n        function[0] = FastMath.asin(x);\n        if (order > 0) {\n            // the nth order derivative of asin has the form:\n            // dn(asin(x)/dxn = P_n(x) / [1 - x^2]^((2n-1)/2)\n            // where P_n(x) is a degree n-1 polynomial with same parity as n-1\n            // P_1(x) = 1, P_2(x) = x, P_3(x) = 2x^2 + 1 ...\n            // the general recurrence relation for P_n is:\n            // P_n(x) = (1-x^2) P_(n-1)'(x) + (2n-3) x P_(n-1)(x)\n            // as per polynomial parity, we can store coefficients of both P_(n-1) and P_n in the same array\n            final double[] p = new double[order];\n            p[0] = 1;\n            final double x2    = x * x;\n            final double f     = 1.0 / (1 - x2);\n            double coeff = FastMath.sqrt(f);\n            function[1] = coeff * p[0];\n            for (int n = 2; n <= order; ++n) {\n\n                // update and evaluate polynomial P_n(x)\n                double v = 0;\n                p[n - 1] = (n - 1) * p[n - 2];\n                for (int k = n - 1; k >= 0; k -= 2) {\n                    v = v * x2 + p[k];\n                    if (k > 2) {\n                        p[k - 2] = (k - 1) * p[k - 1] + (2 * n - k) * p[k - 3];\n                    } else if (k == 2) {\n                        p[0] = p[1];\n                    }\n                }\n                if ((n & 0x1) == 0) {\n                    v *= x;\n                }\n\n                coeff *= f;\n                function[n] = coeff * v;\n\n            }\n        }\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }", "atan": "    public void atan(final double[] operand, final int operandOffset,\n                     final double[] result, final int resultOffset) {\n\n        // create the function value and derivatives\n        double[] function = new double[1 + order];\n        final double x = operand[operandOffset];\n        function[0] = FastMath.atan(x);\n        if (order > 0) {\n            // the nth order derivative of atan has the form:\n            // dn(atan(x)/dxn = Q_n(x) / (1 + x^2)^n\n            // where Q_n(x) is a degree n-1 polynomial with same parity as n-1\n            // Q_1(x) = 1, Q_2(x) = -2x, Q_3(x) = 6x^2 - 2 ...\n            // the general recurrence relation for Q_n is:\n            // Q_n(x) = (1+x^2) Q_(n-1)'(x) - 2(n-1) x Q_(n-1)(x)\n            // as per polynomial parity, we can store coefficients of both Q_(n-1) and Q_n in the same array\n            final double[] q = new double[order];\n            q[0] = 1;\n            final double x2    = x * x;\n            final double f     = 1.0 / (1 + x2);\n            double coeff = f;\n            function[1] = coeff * q[0];\n            for (int n = 2; n <= order; ++n) {\n\n                // update and evaluate polynomial Q_n(x)\n                double v = 0;\n                q[n - 1] = -n * q[n - 2];\n                for (int k = n - 1; k >= 0; k -= 2) {\n                    v = v * x2 + q[k];\n                    if (k > 2) {\n                        q[k - 2] = (k - 1) * q[k - 1] + (k - 1 - 2 * n) * q[k - 3];\n                    } else if (k == 2) {\n                        q[0] = q[1];\n                    }\n                }\n                if ((n & 0x1) == 0) {\n                    v *= x;\n                }\n\n                coeff *= f;\n                function[n] = coeff * v;\n\n            }\n        }\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }", "atan2": "    public void atan2(final double[] y, final int yOffset,\n                      final double[] x, final int xOffset,\n                      final double[] result, final int resultOffset) {\n\n        // compute r = sqrt(x^2+y^2)\n        double[] tmp1 = new double[getSize()];\n        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n        double[] tmp2 = new double[getSize()];\n        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n\n        if (x[xOffset] >= 0) {\n\n            // compute atan2(y, x) = 2 atan(y / (r + x))\n            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n            for (int i = 0; i < tmp2.length; ++i) {\n                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n            }\n\n        } else {\n\n            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n            result[resultOffset] =\n                    ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))\n            for (int i = 1; i < tmp2.length; ++i) {\n                result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))\n            }\n\n        }\n\n        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n\n    }", "cosh": "    public void cosh(final double[] operand, final int operandOffset,\n                     final double[] result, final int resultOffset) {\n\n        // create the function value and derivatives\n        double[] function = new double[1 + order];\n        function[0] = FastMath.cosh(operand[operandOffset]);\n        if (order > 0) {\n            function[1] = FastMath.sinh(operand[operandOffset]);\n            for (int i = 2; i <= order; ++i) {\n                function[i] = function[i - 2];\n            }\n        }\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }", "sinh": "    public void sinh(final double[] operand, final int operandOffset,\n                     final double[] result, final int resultOffset) {\n\n        // create the function value and derivatives\n        double[] function = new double[1 + order];\n        function[0] = FastMath.sinh(operand[operandOffset]);\n        if (order > 0) {\n            function[1] = FastMath.cosh(operand[operandOffset]);\n            for (int i = 2; i <= order; ++i) {\n                function[i] = function[i - 2];\n            }\n        }\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }", "tanh": "    public void tanh(final double[] operand, final int operandOffset,\n                     final double[] result, final int resultOffset) {\n\n        // create the function value and derivatives\n        final double[] function = new double[1 + order];\n        final double t = FastMath.tanh(operand[operandOffset]);\n        function[0] = t;\n\n        if (order > 0) {\n\n            // the nth order derivative of tanh has the form:\n            // dn(tanh(x)/dxn = P_n(tanh(x))\n            // where P_n(t) is a degree n+1 polynomial with same parity as n+1\n            // P_0(t) = t, P_1(t) = 1 - t^2, P_2(t) = -2 t (1 - t^2) ...\n            // the general recurrence relation for P_n is:\n            // P_n(x) = (1-t^2) P_(n-1)'(t)\n            // as per polynomial parity, we can store coefficients of both P_(n-1) and P_n in the same array\n            final double[] p = new double[order + 2];\n            p[1] = 1;\n            final double t2 = t * t;\n            for (int n = 1; n <= order; ++n) {\n\n                // update and evaluate polynomial P_n(t)\n                double v = 0;\n                p[n + 1] = -n * p[n];\n                for (int k = n + 1; k >= 0; k -= 2) {\n                    v = v * t2 + p[k];\n                    if (k > 2) {\n                        p[k - 2] = (k - 1) * p[k - 1] - (k - 3) * p[k - 3];\n                    } else if (k == 2) {\n                        p[0] = p[1];\n                    }\n                }\n                if ((n & 0x1) == 0) {\n                    v *= t;\n                }\n\n                function[n] = v;\n\n            }\n        }\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }", "acosh": "    public void acosh(final double[] operand, final int operandOffset,\n                     final double[] result, final int resultOffset) {\n\n        // create the function value and derivatives\n        double[] function = new double[1 + order];\n        final double x = operand[operandOffset];\n        function[0] = FastMath.acosh(x);\n        if (order > 0) {\n            // the nth order derivative of acosh has the form:\n            // dn(acosh(x)/dxn = P_n(x) / [x^2 - 1]^((2n-1)/2)\n            // where P_n(x) is a degree n-1 polynomial with same parity as n-1\n            // P_1(x) = 1, P_2(x) = -x, P_3(x) = 2x^2 + 1 ...\n            // the general recurrence relation for P_n is:\n            // P_n(x) = (x^2-1) P_(n-1)'(x) - (2n-3) x P_(n-1)(x)\n            // as per polynomial parity, we can store coefficients of both P_(n-1) and P_n in the same array\n            final double[] p = new double[order];\n            p[0] = 1;\n            final double x2  = x * x;\n            final double f   = 1.0 / (x2 - 1);\n            double coeff = FastMath.sqrt(f);\n            function[1] = coeff * p[0];\n            for (int n = 2; n <= order; ++n) {\n\n                // update and evaluate polynomial P_n(x)\n                double v = 0;\n                p[n - 1] = (1 - n) * p[n - 2];\n                for (int k = n - 1; k >= 0; k -= 2) {\n                    v = v * x2 + p[k];\n                    if (k > 2) {\n                        p[k - 2] = (1 - k) * p[k - 1] + (k - 2 * n) * p[k - 3];\n                    } else if (k == 2) {\n                        p[0] = -p[1];\n                    }\n                }\n                if ((n & 0x1) == 0) {\n                    v *= x;\n                }\n\n                coeff *= f;\n                function[n] = coeff * v;\n\n            }\n        }\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }", "asinh": "    public void asinh(final double[] operand, final int operandOffset,\n                     final double[] result, final int resultOffset) {\n\n        // create the function value and derivatives\n        double[] function = new double[1 + order];\n        final double x = operand[operandOffset];\n        function[0] = FastMath.asinh(x);\n        if (order > 0) {\n            // the nth order derivative of asinh has the form:\n            // dn(asinh(x)/dxn = P_n(x) / [x^2 + 1]^((2n-1)/2)\n            // where P_n(x) is a degree n-1 polynomial with same parity as n-1\n            // P_1(x) = 1, P_2(x) = -x, P_3(x) = 2x^2 - 1 ...\n            // the general recurrence relation for P_n is:\n            // P_n(x) = (x^2+1) P_(n-1)'(x) - (2n-3) x P_(n-1)(x)\n            // as per polynomial parity, we can store coefficients of both P_(n-1) and P_n in the same array\n            final double[] p = new double[order];\n            p[0] = 1;\n            final double x2    = x * x;\n            final double f     = 1.0 / (1 + x2);\n            double coeff = FastMath.sqrt(f);\n            function[1] = coeff * p[0];\n            for (int n = 2; n <= order; ++n) {\n\n                // update and evaluate polynomial P_n(x)\n                double v = 0;\n                p[n - 1] = (1 - n) * p[n - 2];\n                for (int k = n - 1; k >= 0; k -= 2) {\n                    v = v * x2 + p[k];\n                    if (k > 2) {\n                        p[k - 2] = (k - 1) * p[k - 1] + (k - 2 * n) * p[k - 3];\n                    } else if (k == 2) {\n                        p[0] = p[1];\n                    }\n                }\n                if ((n & 0x1) == 0) {\n                    v *= x;\n                }\n\n                coeff *= f;\n                function[n] = coeff * v;\n\n            }\n        }\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }", "atanh": "    public void atanh(final double[] operand, final int operandOffset,\n                      final double[] result, final int resultOffset) {\n\n        // create the function value and derivatives\n        double[] function = new double[1 + order];\n        final double x = operand[operandOffset];\n        function[0] = FastMath.atanh(x);\n        if (order > 0) {\n            // the nth order derivative of atanh has the form:\n            // dn(atanh(x)/dxn = Q_n(x) / (1 - x^2)^n\n            // where Q_n(x) is a degree n-1 polynomial with same parity as n-1\n            // Q_1(x) = 1, Q_2(x) = 2x, Q_3(x) = 6x^2 + 2 ...\n            // the general recurrence relation for Q_n is:\n            // Q_n(x) = (1-x^2) Q_(n-1)'(x) + 2(n-1) x Q_(n-1)(x)\n            // as per polynomial parity, we can store coefficients of both Q_(n-1) and Q_n in the same array\n            final double[] q = new double[order];\n            q[0] = 1;\n            final double x2 = x * x;\n            final double f  = 1.0 / (1 - x2);\n            double coeff = f;\n            function[1] = coeff * q[0];\n            for (int n = 2; n <= order; ++n) {\n\n                // update and evaluate polynomial Q_n(x)\n                double v = 0;\n                q[n - 1] = n * q[n - 2];\n                for (int k = n - 1; k >= 0; k -= 2) {\n                    v = v * x2 + q[k];\n                    if (k > 2) {\n                        q[k - 2] = (k - 1) * q[k - 1] + (2 * n - k + 1) * q[k - 3];\n                    } else if (k == 2) {\n                        q[0] = q[1];\n                    }\n                }\n                if ((n & 0x1) == 0) {\n                    v *= x;\n                }\n\n                coeff *= f;\n                function[n] = coeff * v;\n\n            }\n        }\n\n        // apply function composition\n        compose(operand, operandOffset, function, result, resultOffset);\n\n    }", "compose": "    public void compose(final double[] operand, final int operandOffset, final double[] f,\n                        final double[] result, final int resultOffset) {\n        for (int i = 0; i < compIndirection.length; ++i) {\n            final int[][] mappingI = compIndirection[i];\n            double r = 0;\n            for (int j = 0; j < mappingI.length; ++j) {\n                final int[] mappingIJ = mappingI[j];\n                double product = mappingIJ[0] * f[mappingIJ[1]];\n                for (int k = 2; k < mappingIJ.length; ++k) {\n                    product *= operand[operandOffset + mappingIJ[k]];\n                }\n                r += product;\n            }\n            result[resultOffset + i] = r;\n        }\n    }", "taylor": "    public double taylor(final double[] ds, final int dsOffset, final double ... delta) {\n        double value = 0;\n        for (int i = getSize() - 1; i >= 0; --i) {\n            final int[] orders = getPartialDerivativeOrders(i);\n            double term = ds[dsOffset + i];\n            for (int k = 0; k < orders.length; ++k) {\n                if (orders[k] > 0) {\n                    term *= FastMath.pow(delta[k], orders[k]) / ArithmeticUtils.factorial(orders[k]);\n                }\n            }\n            value += term;\n        }\n        return value;\n    }", "checkCompatibility": "    public void checkCompatibility(final DSCompiler compiler)\n            throws DimensionMismatchException {\n        if (parameters != compiler.parameters) {\n            throw new DimensionMismatchException(parameters, compiler.parameters);\n        }\n        if (order != compiler.order) {\n            throw new DimensionMismatchException(order, compiler.order);\n        }\n    }"}