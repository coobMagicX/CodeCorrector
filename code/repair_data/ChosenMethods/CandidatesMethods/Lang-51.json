{"negate": "    public static Boolean negate(Boolean bool) {\n        if (bool == null) {\n            return null;\n        }\n        return (bool.booleanValue() ? Boolean.FALSE : Boolean.TRUE);\n    }", "isTrue": "    public static boolean isTrue(Boolean bool) {\n        if (bool == null) {\n            return false;\n        }\n        return bool.booleanValue() ? true : false;\n    }", "toStringTrueFalse": "    public static String toStringTrueFalse(boolean bool) {\n        return toString(bool, \"true\", \"false\");\n    }", "toStringOnOff": "    public static String toStringOnOff(boolean bool) {\n        return toString(bool, \"on\", \"off\");\n    }", "toStringYesNo": "    public static String toStringYesNo(boolean bool) {\n        return toString(bool, \"yes\", \"no\");\n    }", "toString": "    public static String toString(boolean bool, String trueString, String falseString) {\n        return bool ? trueString : falseString;\n    }", "xor": "    public static Boolean xor(Boolean[] array) {\n        if (array == null) {\n            throw new IllegalArgumentException(\"The Array must not be null\");\n        } else if (array.length == 0) {\n            throw new IllegalArgumentException(\"Array is empty\");\n        }\n        boolean[] primitive = null;\n        try {\n            primitive = ArrayUtils.toPrimitive(array);\n        } catch (NullPointerException ex) {\n            throw new IllegalArgumentException(\"The array must not contain any null elements\");\n        }\n        return xor(primitive) ? Boolean.TRUE : Boolean.FALSE;\n    }"}