{"abs": "    public Fraction abs() {\n        Fraction ret;\n        if (numerator >= 0) {\n            ret = this;\n        } else {\n            ret = negate();\n        }\n        return ret;\n    }", "doubleValue": "    public double doubleValue() {\n        return (double)numerator / (double)denominator;\n    }", "equals": "    public boolean equals(Object other) {\n        if (this == other) {\n            return true;\n        }\n        if (other instanceof Fraction) {\n            // since fractions are always in lowest terms, numerators and\n            // denominators can be compared directly for equality.\n            Fraction rhs = (Fraction)other;\n            return (numerator == rhs.numerator) &&\n                (denominator == rhs.denominator);\n        }\n        return false;\n    }", "floatValue": "    public float floatValue() {\n        return (float)doubleValue();\n    }", "getDenominator": "    public int getDenominator() {\n        return denominator;\n    }", "getNumerator": "    public int getNumerator() {\n        return numerator;\n    }", "intValue": "    public int intValue() {\n        return (int)doubleValue();\n    }", "longValue": "    public long longValue() {\n        return (long)doubleValue();\n    }", "negate": "    public Fraction negate() {\n        if (numerator==Integer.MIN_VALUE) {\n            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION, numerator, denominator);\n        }\n        return new Fraction(-numerator, denominator);\n    }", "reciprocal": "    public Fraction reciprocal() {\n        return new Fraction(denominator, numerator);\n    }", "add": "    public Fraction add(final int i) {\n        return new Fraction(numerator + i * denominator, denominator);\n    }", "subtract": "    public Fraction subtract(final int i) {\n        return new Fraction(numerator - i * denominator, denominator);\n    }", "multiply": "    public Fraction multiply(final int i) {\n        return new Fraction(numerator * i, denominator);\n    }", "divide": "    public Fraction divide(final int i) {\n        return new Fraction(numerator, denominator * i);\n    }", "percentageValue": "    public double percentageValue() {\n        return 100 * doubleValue();\n    }", "getReducedFraction": "    public static Fraction getReducedFraction(int numerator, int denominator) {\n        if (denominator == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR_IN_FRACTION,\n                                              numerator, denominator);\n        }\n        if (numerator==0) {\n            return ZERO; // normalize zero.\n        }\n        // allow 2^k/-2^31 as a valid fraction (where k>0)\n        if (denominator==Integer.MIN_VALUE && (numerator&1)==0) {\n            numerator/=2; denominator/=2;\n        }\n        if (denominator < 0) {\n            if (numerator==Integer.MIN_VALUE ||\n                    denominator==Integer.MIN_VALUE) {\n                throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION,\n                                                  numerator, denominator);\n            }\n            numerator = -numerator;\n            denominator = -denominator;\n        }\n        // simplify fraction.\n        int gcd = ArithmeticUtils.gcd(numerator, denominator);\n        numerator /= gcd;\n        denominator /= gcd;\n        return new Fraction(numerator, denominator);\n    }", "toString": "    public String toString() {\n        String str = null;\n        if (denominator == 1) {\n            str = Integer.toString(numerator);\n        } else if (numerator == 0) {\n            str = \"0\";\n        } else {\n            str = numerator + \" / \" + denominator;\n        }\n        return str;\n    }"}