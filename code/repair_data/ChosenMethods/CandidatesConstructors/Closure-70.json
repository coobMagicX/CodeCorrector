{"DeferredSetType": "    DeferredSetType(Node node, JSType type) {\n      Preconditions.checkNotNull(node);\n      Preconditions.checkNotNull(type);\n      this.node = node;\n      this.type = type;\n\n      // Other parts of this pass may read off the node.\n      // (like when we set the LHS of an assign with a typed RHS function.)\n      node.setJSType(type);\n    }", "TypedScopeCreator": "  TypedScopeCreator(AbstractCompiler compiler,\n      CodingConvention codingConvention) {\n    this.compiler = compiler;\n    this.validator = compiler.getTypeValidator();\n    this.codingConvention = codingConvention;\n    this.typeRegistry = compiler.getTypeRegistry();\n    this.typeParsingErrorReporter = typeRegistry.getErrorReporter();\n  }", "DiscoverEnumsAndTypedefs": "    DiscoverEnumsAndTypedefs(JSTypeRegistry registry) {\n      this.registry = registry;\n    }", "AbstractScopeBuilder": "    private AbstractScopeBuilder(Scope scope) {\n      this.scope = scope;\n    }", "CollectProperties": "      CollectProperties(ObjectType thisType) {\n        this.thisType = thisType;\n      }", "StubDeclaration": "    private StubDeclaration(Node node, boolean isExtern, String ownerName) {\n      this.node = node;\n      this.isExtern = isExtern;\n      this.ownerName = ownerName;\n    }", "GlobalScopeBuilder": "    private GlobalScopeBuilder(Scope scope) {\n      super(scope);\n    }", "LocalScopeBuilder": "    private LocalScopeBuilder(Scope scope) {\n      super(scope);\n    }"}