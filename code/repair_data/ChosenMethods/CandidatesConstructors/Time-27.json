{"PeriodFormatterBuilder": "    public PeriodFormatterBuilder() {\n        clear();\n    }", "SimpleAffix": "        SimpleAffix(String text) {\n            iText = text;\n        }", "PluralAffix": "        PluralAffix(String singularText, String pluralText) {\n            iSingularText = singularText;\n            iPluralText = pluralText;\n        }", "CompositeAffix": "        CompositeAffix(PeriodFieldAffix left, PeriodFieldAffix right) {\n            iLeft = left;\n            iRight = right;\n        }", "FieldFormatter": "        FieldFormatter(FieldFormatter field, PeriodFieldAffix suffix) {\n            iMinPrintedDigits = field.iMinPrintedDigits;\n            iPrintZeroSetting = field.iPrintZeroSetting;\n            iMaxParsedDigits = field.iMaxParsedDigits;\n            iRejectSignedValues = field.iRejectSignedValues;\n            iFieldType = field.iFieldType;\n            iFieldFormatters = field.iFieldFormatters;\n            iPrefix = field.iPrefix;\n            if (field.iSuffix != null) {\n                suffix = new CompositeAffix(field.iSuffix, suffix);\n            }\n            iSuffix = suffix;\n        }", "Literal": "        Literal(String text) {\n            iText = text;\n        }", "Separator": "        Separator(String text, String finalText, String[] variants,\n                PeriodPrinter beforePrinter, PeriodParser beforeParser,\n                boolean useBefore, boolean useAfter) {\n            iText = text;\n            iFinalText = finalText;\n\n            if ((finalText == null || text.equals(finalText)) &&\n                (variants == null || variants.length == 0)) {\n\n                iParsedForms = new String[] {text};\n            } else {\n                // Filter and reverse sort the parsed forms.\n                TreeSet<String> parsedSet = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER);\n                parsedSet.add(text);\n                parsedSet.add(finalText);\n                if (variants != null) {\n                    for (int i=variants.length; --i>=0; ) {\n                        parsedSet.add(variants[i]);\n                    }\n                }\n                ArrayList<String> parsedList = new ArrayList<String>(parsedSet);\n                Collections.reverse(parsedList);\n                iParsedForms = parsedList.toArray(new String[parsedList.size()]);\n            }\n\n            iBeforePrinter = beforePrinter;\n            iBeforeParser = beforeParser;\n            iUseBefore = useBefore;\n            iUseAfter = useAfter;\n        }", "Composite": "        Composite(List<Object> elementPairs) {\n            List<Object> printerList = new ArrayList<Object>();\n            List<Object> parserList = new ArrayList<Object>();\n\n            decompose(elementPairs, printerList, parserList);\n\n            if (printerList.size() <= 0) {\n                iPrinters = null;\n            } else {\n                iPrinters = printerList.toArray(\n                        new PeriodPrinter[printerList.size()]);\n            }\n\n            if (parserList.size() <= 0) {\n                iParsers = null;\n            } else {\n                iParsers = parserList.toArray(\n                        new PeriodParser[parserList.size()]);\n            }\n        }"}