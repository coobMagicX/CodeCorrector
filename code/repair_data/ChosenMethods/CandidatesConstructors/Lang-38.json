{"FastDateFormat": "    protected FastDateFormat(String pattern, TimeZone timeZone, Locale locale) {\n        super();\n        if (pattern == null) {\n            throw new IllegalArgumentException(\"The pattern must not be null\");\n        }\n        mPattern = pattern;\n        \n        mTimeZoneForced = (timeZone != null);\n        if (timeZone == null) {\n            timeZone = TimeZone.getDefault();\n        }\n        mTimeZone = timeZone;\n        \n        mLocaleForced = (locale != null);\n        if (locale == null) {\n            locale = Locale.getDefault();\n        }\n        mLocale = locale;\n    }", "CharacterLiteral": "        CharacterLiteral(char value) {\n            mValue = value;\n        }", "StringLiteral": "        StringLiteral(String value) {\n            mValue = value;\n        }", "TextField": "        TextField(int field, String[] values) {\n            mField = field;\n            mValues = values;\n        }", "UnpaddedNumberField": "        UnpaddedNumberField(int field) {\n            mField = field;\n        }", "UnpaddedMonthField": "        UnpaddedMonthField() {\n            super();\n        }", "PaddedNumberField": "        PaddedNumberField(int field, int size) {\n            if (size < 3) {\n                // Should use UnpaddedNumberField or TwoDigitNumberField.\n                throw new IllegalArgumentException();\n            }\n            mField = field;\n            mSize = size;\n        }", "TwoDigitNumberField": "        TwoDigitNumberField(int field) {\n            mField = field;\n        }", "TwoDigitYearField": "        TwoDigitYearField() {\n            super();\n        }", "TwoDigitMonthField": "        TwoDigitMonthField() {\n            super();\n        }", "TwelveHourField": "        TwelveHourField(NumberRule rule) {\n            mRule = rule;\n        }", "TwentyFourHourField": "        TwentyFourHourField(NumberRule rule) {\n            mRule = rule;\n        }", "TimeZoneNameRule": "        TimeZoneNameRule(TimeZone timeZone, boolean timeZoneForced, Locale locale, int style) {\n            mTimeZone = timeZone;\n            mTimeZoneForced = timeZoneForced;\n            mLocale = locale;\n            mStyle = style;\n\n            if (timeZoneForced) {\n                mStandard = getTimeZoneDisplay(timeZone, false, style, locale);\n                mDaylight = getTimeZoneDisplay(timeZone, true, style, locale);\n            } else {\n                mStandard = null;\n                mDaylight = null;\n            }\n        }", "TimeZoneNumberRule": "        TimeZoneNumberRule(boolean colon) {\n            mColon = colon;\n        }", "TimeZoneDisplayKey": "        TimeZoneDisplayKey(TimeZone timeZone,\n                           boolean daylight, int style, Locale locale) {\n            mTimeZone = timeZone;\n            if (daylight) {\n                style |= 0x80000000;\n            }\n            mStyle = style;\n            mLocale = locale;\n        }", "Pair": "        public Pair(Object obj1, Object obj2) {\n            mObj1 = obj1;\n            mObj2 = obj2;\n        }"}