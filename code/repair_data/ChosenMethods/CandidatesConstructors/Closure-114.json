{"AliasSet": "    AliasSet(String name1, String name2) {\n      names.add(name1);\n      names.add(name2);\n    }", "JsNameRefNode": "    JsNameRefNode(JsName name, Node node) {\n      this.name = name;\n      this.node = node;\n      this.parent = node.getParent();\n    }", "PrototypeSetNode": "    PrototypeSetNode(JsName name, Node parent) {\n      super(name, parent.getFirstChild());\n\n      Preconditions.checkState(parent.isAssign());\n    }", "SpecialReferenceNode": "    SpecialReferenceNode(JsName name, Node node) {\n      this.name = name;\n      this.node = node;\n    }", "ClassDefiningFunctionNode": "    ClassDefiningFunctionNode(JsName name, Node node) {\n      super(name, node);\n      Preconditions.checkState(node.isCall());\n    }", "InstanceOfCheckNode": "    InstanceOfCheckNode(JsName name, Node node) {\n      super(name, node);\n      Preconditions.checkState(node.isQualifiedName());\n      Preconditions.checkState(getParent().isInstanceOf());\n    }", "FindReferences": "    FindReferences() {\n      nodesToKeep = Sets.newHashSet();\n    }", "NameAnalyzer": "  NameAnalyzer(AbstractCompiler compiler, boolean removeUnreferenced) {\n    this.compiler = compiler;\n    this.removeUnreferenced = removeUnreferenced;\n    this.globalNames = DEFAULT_GLOBAL_NAMES;\n    this.changeProxy = new AstChangeProxy();\n  }"}