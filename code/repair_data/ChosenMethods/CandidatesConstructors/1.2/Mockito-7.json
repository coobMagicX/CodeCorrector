{"FromClassGenericMetadataSupport": "        public FromClassGenericMetadataSupport(Class<?> clazz) {\n            this.clazz = clazz;\n\n            for (Class currentExploredClass = clazz;\n                 currentExploredClass != null && currentExploredClass != Object.class;\n                 currentExploredClass = superClassOf(currentExploredClass)\n                ) {\n                readActualTypeParametersOnDeclaringClass(currentExploredClass);\n            }\n        }", "FromParameterizedTypeGenericMetadataSupport": "        public FromParameterizedTypeGenericMetadataSupport(ParameterizedType parameterizedType) {\n            this.parameterizedType = parameterizedType;\n            readActualTypeParameters();\n        }", "ParameterizedReturnType": "        public ParameterizedReturnType(GenericMetadataSupport source, TypeVariable[] typeParameters, ParameterizedType parameterizedType) {\n            this.parameterizedType = parameterizedType;\n            this.typeParameters = typeParameters;\n            this.contextualActualTypeParameters = source.contextualActualTypeParameters;\n\n            readTypeParameters();\n            readTypeVariables();\n        }", "TypeVariableReturnType": "        public TypeVariableReturnType(GenericMetadataSupport source, TypeVariable[] typeParameters, TypeVariable typeVariable) {\n            this.typeParameters = typeParameters;\n            this.typeVariable = typeVariable;\n            this.contextualActualTypeParameters = source.contextualActualTypeParameters;\n\n            readTypeParameters();\n            readTypeVariables();\n        }", "NotGenericReturnTypeSupport": "        public NotGenericReturnTypeSupport(Type genericReturnType) {\n            returnType = (Class<?>) genericReturnType;\n        }", "TypeVarBoundedType": "        public TypeVarBoundedType(TypeVariable typeVariable) {\n            this.typeVariable = typeVariable;\n        }", "WildCardBoundedType": "        public WildCardBoundedType(WildcardType wildcard) {\n            this.wildcard = wildcard;\n        }"}