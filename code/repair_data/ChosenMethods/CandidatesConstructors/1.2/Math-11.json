{"MultivariateNormalDistribution": "    public MultivariateNormalDistribution(RandomGenerator rng,\n                                          final double[] means,\n                                          final double[][] covariances)\n            throws SingularMatrixException,\n                   DimensionMismatchException,\n                   NonPositiveDefiniteMatrixException {\n        super(rng, means.length);\n\n        final int dim = means.length;\n\n        if (covariances.length != dim) {\n            throw new DimensionMismatchException(covariances.length, dim);\n        }\n\n        for (int i = 0; i < dim; i++) {\n            if (dim != covariances[i].length) {\n                throw new DimensionMismatchException(covariances[i].length, dim);\n            }\n        }\n\n        this.means = MathArrays.copyOf(means);\n\n        covarianceMatrix = new Array2DRowRealMatrix(covariances);\n\n        // Covariance matrix eigen decomposition.\n        final EigenDecomposition covMatDec = new EigenDecomposition(covarianceMatrix);\n\n        // Compute and store the inverse.\n        covarianceMatrixInverse = covMatDec.getSolver().getInverse();\n        // Compute and store the determinant.\n        covarianceMatrixDeterminant = covMatDec.getDeterminant();\n\n        // Eigenvalues of the covariance matrix.\n        final double[] covMatEigenvalues = covMatDec.getRealEigenvalues();\n\n        for (int i = 0; i < covMatEigenvalues.length; i++) {\n            if (covMatEigenvalues[i] < 0) {\n                throw new NonPositiveDefiniteMatrixException(covMatEigenvalues[i], i, 0);\n            }\n        }\n\n        // Matrix where each column is an eigenvector of the covariance matrix.\n        final Array2DRowRealMatrix covMatEigenvectors = new Array2DRowRealMatrix(dim, dim);\n        for (int v = 0; v < dim; v++) {\n            final double[] evec = covMatDec.getEigenvector(v).toArray();\n            covMatEigenvectors.setColumn(v, evec);\n        }\n\n        final RealMatrix tmpMatrix = covMatEigenvectors.transpose();\n\n        // Scale each eigenvector by the square root of its eigenvalue.\n        for (int row = 0; row < dim; row++) {\n            final double factor = FastMath.sqrt(covMatEigenvalues[row]);\n            for (int col = 0; col < dim; col++) {\n                tmpMatrix.multiplyEntry(row, col, factor);\n            }\n        }\n\n        samplingMatrix = covMatEigenvectors.multiply(tmpMatrix);\n    }"}