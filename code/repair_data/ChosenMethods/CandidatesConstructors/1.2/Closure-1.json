{"RemoveUnusedVars": "  RemoveUnusedVars(\n      AbstractCompiler compiler,\n      boolean removeGlobals,\n      boolean preserveFunctionExpressionNames,\n      boolean modifyCallSites) {\n    this.compiler = compiler;\n    this.codingConvention = compiler.getCodingConvention();\n    this.removeGlobals = removeGlobals;\n    this.preserveFunctionExpressionNames = preserveFunctionExpressionNames;\n    this.modifyCallSites = modifyCallSites;\n  }", "CallSiteOptimizer": "    CallSiteOptimizer(\n        AbstractCompiler compiler,\n        SimpleDefinitionFinder defFinder) {\n      this.compiler = compiler;\n      this.defFinder = defFinder;\n    }", "Continuation": "    Continuation(Node node, Scope scope) {\n      this.node = node;\n      this.scope = scope;\n    }", "Assign": "    Assign(Node assignNode, Node nameNode, boolean isPropertyAssign) {\n      Preconditions.checkState(NodeUtil.isAssignmentOp(assignNode));\n      this.assignNode = assignNode;\n      this.nameNode = nameNode;\n      this.isPropertyAssign = isPropertyAssign;\n\n      this.maybeAliased = NodeUtil.isExpressionResultUsed(assignNode);\n      this.mayHaveSecondarySideEffects =\n          maybeAliased ||\n          NodeUtil.mayHaveSideEffects(assignNode.getFirstChild()) ||\n          NodeUtil.mayHaveSideEffects(assignNode.getLastChild());\n    }"}