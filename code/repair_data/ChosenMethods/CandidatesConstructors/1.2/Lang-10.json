{"FastDateParser": "    protected FastDateParser(String pattern, TimeZone timeZone, Locale locale) {\n        this.pattern = pattern;\n        this.timeZone = timeZone;\n        this.locale = locale;\n        init();\n    }", "KeyValue": "        public KeyValue(String key, int value) {\n            this.key= key;\n            this.value= value;\n        }", "CopyQuotedStrategy": "        CopyQuotedStrategy(String formatField) {\n            this.formatField= formatField;\n        }", "TextStrategy": "        TextStrategy(int field) {\n            this.field= field;\n        }", "NumberStrategy": "        NumberStrategy(int field) {\n             this.field= field;\n        }", "TimeZoneStrategy": "        TimeZoneStrategy(Locale locale) {\n            for(String id : TimeZone.getAvailableIDs()) {\n                if(id.startsWith(\"GMT\")) {\n                    continue;\n                }\n                TimeZone tz= TimeZone.getTimeZone(id);\n                tzNames.put(tz.getDisplayName(false, TimeZone.SHORT, locale), tz);\n                tzNames.put(tz.getDisplayName(false, TimeZone.LONG, locale), tz);\n                if(tz.useDaylightTime()) {\n                    tzNames.put(tz.getDisplayName(true, TimeZone.SHORT, locale), tz);\n                    tzNames.put(tz.getDisplayName(true, TimeZone.LONG, locale), tz);\n                }\n            }\n            StringBuilder sb= new StringBuilder();\n            sb.append(\"(GMT[+\\\\-]\\\\d{0,1}\\\\d{2}|[+\\\\-]\\\\d{2}:?\\\\d{2}|\");\n            for(String id : tzNames.keySet()) {\n                escapeRegex(sb, id, false).append('|');\n            }\n            sb.setCharAt(sb.length()-1, ')');\n            validTimeZoneChars= sb.toString();\n        }"}