{"ReferenceCollectingCallback": "  ReferenceCollectingCallback(AbstractCompiler compiler, Behavior behavior,\n      Predicate<Var> varFilter) {\n    this.compiler = compiler;\n    this.behavior = behavior;\n    this.varFilter = varFilter;\n  }", "ReferenceMapWrapper": "    public ReferenceMapWrapper(Map<Var, ReferenceCollection> referenceMap) {\n      this.referenceMap = referenceMap;\n    }", "Reference": "    private Reference(Node nameNode,\n        BasicBlock basicBlock, Scope scope, InputId inputId) {\n      this.nameNode = nameNode;\n      this.basicBlock = basicBlock;\n      this.scope = scope;\n      this.inputId = inputId;\n      this.sourceFile = nameNode.getStaticSourceFile();\n    }", "BasicBlock": "    BasicBlock(BasicBlock parent, Node root) {\n      this.parent = parent;\n\n      // only named functions may be hoisted.\n      this.isHoisted = NodeUtil.isHoistedFunctionDeclaration(root);\n\n      this.isFunction = root.isFunction();\n\n      if (root.getParent() != null) {\n        int pType = root.getParent().getType();\n        this.isLoop = pType == Token.DO ||\n            pType == Token.WHILE ||\n            pType == Token.FOR;\n      } else {\n        this.isLoop = false;\n      }\n    }"}