{"DefaultTypeResolverBuilder": "        public DefaultTypeResolverBuilder(DefaultTyping t) {\n            _appliesFor = t;\n        }", "ObjectMapper": "    public ObjectMapper(JsonFactory jf,\n            DefaultSerializerProvider sp, DefaultDeserializationContext dc)\n    {\n        /* 02-Mar-2009, tatu: Important: we MUST default to using\n         *   the mapping factory, otherwise tree serialization will\n         *   have problems with POJONodes.\n         * 03-Jan-2010, tatu: and obviously we also must pass 'this',\n         *    to create actual linking.\n         */\n        if (jf == null) {\n            _jsonFactory = new MappingJsonFactory(this);\n        } else {\n            _jsonFactory = jf;\n            if (jf.getCodec() == null) { // as per [JACKSON-741]\n                _jsonFactory.setCodec(this);\n            }\n        }\n        _subtypeResolver = new StdSubtypeResolver();\n        _rootNames = new RootNameLookup();\n        // and default type factory is shared one\n        _typeFactory = TypeFactory.defaultInstance();\n\n        HashMap<ClassKey,Class<?>> mixins = new HashMap<ClassKey,Class<?>>();\n        _mixInAnnotations = mixins;\n        _serializationConfig = new SerializationConfig(DEFAULT_BASE,\n                    _subtypeResolver, mixins);\n        _deserializationConfig = new DeserializationConfig(DEFAULT_BASE,\n                    _subtypeResolver, mixins);\n\n        // Some overrides we may need\n        final boolean needOrder = _jsonFactory.requiresPropertyOrdering();\n        if (needOrder ^ _serializationConfig.isEnabled(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY)) {\n            configure(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, needOrder);\n        }\n        \n        _serializerProvider = (sp == null) ? new DefaultSerializerProvider.Impl() : sp;\n        _deserializationContext = (dc == null) ?\n                new DefaultDeserializationContext.Impl(BeanDeserializerFactory.instance) : dc;\n\n        // Default serializer factory is stateless, can just assign\n        _serializerFactory = BeanSerializerFactory.instance;\n    }"}