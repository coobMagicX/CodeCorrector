{"ClosureReverseAbstractInterpreter": "public class ClosureReverseAbstractInterpreter\n    extends ChainableReverseAbstractInterpreter {\n\n  /**\n   * For when {@code goog.isArray} returns true.\n   */\n  private final Visitor<JSType> restrictToArrayVisitor =\n      new RestrictByTrueTypeOfResultVisitor() {\n         //The specific code has been omitted, but there is no error\n        };\n\n  /**\n   * For when {@code goog.isArray} returns false.\n   */\n  private final Visitor<JSType> restrictToNotArrayVisitor =\n      new RestrictByFalseTypeOfResultVisitor() {\n         //The specific code has been omitted, but there is no error\n        };\n\n  /**\n   * For when {@code goog.isObject} returns true. This includes functions, but\n   * not {@code null}.\n   */\n  private final Visitor<JSType> restrictToObjectVisitor =\n      new RestrictByTrueTypeOfResultVisitor() {\n         //The specific code has been omitted, but there is no error\n        };\n\n  /**\n   * For when {@code goog.isObject} returns false.\n   */\n  private final Visitor<JSType> restrictToNotObjectVisitor =\n      new RestrictByFalseTypeOfResultVisitor() {\n         //The specific code has been omitted, but there is no error\n        };\n\n  /** Functions used to restrict types. */\n  private Map<String, Function<TypeRestriction, JSType>> restricters;\n\n  /**\n   * Creates a {@link ClosureReverseAbstractInterpreter}.\n   */\n  public ClosureReverseAbstractInterpreter(CodingConvention convention,\n      final JSTypeRegistry typeRegistry) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  @Override\n  public FlowScope getPreciserScopeKnowingConditionOutcome(Node condition,\n      FlowScope blindScope, boolean outcome) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  private FlowScope restrictParameter(Node parameter, JSType type,\n      FlowScope blindScope, Function<TypeRestriction, JSType> restriction,\n      boolean outcome) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  private static class TypeRestriction {\n         //The specific code has been omitted, but there is no error\n        }\n}", "TypeRestriction": "  private static class TypeRestriction {\n         //The specific code has been omitted, but there is no error\n        }"}