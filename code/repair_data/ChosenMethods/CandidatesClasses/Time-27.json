{"PeriodFormatterBuilder": "public class PeriodFormatterBuilder {\n         //The specific code has been omitted, but there is no error\n        }", "SimpleAffix": "    static class SimpleAffix implements PeriodFieldAffix {\n        private final String iText;\n\n        SimpleAffix(String text) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public int calculatePrintedLength(int value) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public void printTo(StringBuffer buf, int value) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public void printTo(Writer out, int value) throws IOException {\n            out.write(iText);\n        }\n\n        public int parse(String periodStr, int position) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public int scan(String periodStr, final int position) {\n         //The specific code has been omitted, but there is no error\n        }\n    }", "PluralAffix": "    static class PluralAffix implements PeriodFieldAffix {\n        private final String iSingularText;\n        private final String iPluralText;\n\n        PluralAffix(String singularText, String pluralText) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public int calculatePrintedLength(int value) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public void printTo(StringBuffer buf, int value) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public void printTo(Writer out, int value) throws IOException {\n            out.write(value == 1 ? iSingularText : iPluralText);\n        }\n\n        public int parse(String periodStr, int position) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public int scan(String periodStr, final int position) {\n         //The specific code has been omitted, but there is no error\n        }\n    }", "CompositeAffix": "    static class CompositeAffix implements PeriodFieldAffix {\n        private final PeriodFieldAffix iLeft;\n        private final PeriodFieldAffix iRight;\n\n        CompositeAffix(PeriodFieldAffix left, PeriodFieldAffix right) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public int calculatePrintedLength(int value) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public void printTo(StringBuffer buf, int value) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public void printTo(Writer out, int value) throws IOException {\n            iLeft.printTo(out, value);\n            iRight.printTo(out, value);\n        }\n\n        public int parse(String periodStr, int position) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public int scan(String periodStr, final int position) {\n         //The specific code has been omitted, but there is no error\n        }\n    }", "FieldFormatter": "    static class FieldFormatter\n            implements PeriodPrinter, PeriodParser {\n        private final int iMinPrintedDigits;\n        private final int iPrintZeroSetting;\n        private final int iMaxParsedDigits;\n        private final boolean iRejectSignedValues;\n        \n        /** The index of the field type, 0=year, etc. */\n        private final int iFieldType;\n        /**\n         * The array of the latest formatter added for each type.\n         * This is shared between all the field formatters in a formatter.\n         */\n        private final FieldFormatter[] iFieldFormatters;\n        \n        private final PeriodFieldAffix iPrefix;\n        private final PeriodFieldAffix iSuffix;\n\n        FieldFormatter(int minPrintedDigits, int printZeroSetting,\n                       int maxParsedDigits, boolean rejectSignedValues,\n                       int fieldType, FieldFormatter[] fieldFormatters,\n                       PeriodFieldAffix prefix, PeriodFieldAffix suffix) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        FieldFormatter(FieldFormatter field, PeriodFieldAffix suffix) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public int countFieldsToPrint(ReadablePeriod period, int stopAt, Locale locale) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public int calculatePrintedLength(ReadablePeriod period, Locale locale) {\n         //The specific code has been omitted, but there is no error\n        }\n        \n        public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public void printTo(Writer out, ReadablePeriod period, Locale locale) throws IOException {\n            long valueLong = getFieldValue(period);\n            if (valueLong == Long.MAX_VALUE) {\n         //The specific code has been omitted, but there is no error\n        }\n            int value = (int) valueLong;\n            if (iFieldType >= SECONDS_MILLIS) {\n         //The specific code has been omitted, but there is no error\n        }\n\n            if (iPrefix != null) {\n         //The specific code has been omitted, but there is no error\n        }\n            int minDigits = iMinPrintedDigits;\n            if (minDigits <= 1) {\n         //The specific code has been omitted, but there is no error\n        } else {\n                FormatUtils.writePaddedInteger(out, value, minDigits);\n            }\n            if (iFieldType >= SECONDS_MILLIS) {\n         //The specific code has been omitted, but there is no error\n        }\n            if (iSuffix != null) {\n         //The specific code has been omitted, but there is no error\n        }\n        }\n\n        public int parseInto(\n                ReadWritablePeriod period, String text, \n                int position, Locale locale) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * @param text text to parse\n         * @param position position in text\n         * @param length exact count of characters to parse\n         * @return parsed int value\n         */\n        private int parseInt(String text, int position, int length) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * @return Long.MAX_VALUE if nothing to print, otherwise value\n         */\n        long getFieldValue(ReadablePeriod period) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        boolean isZero(ReadablePeriod period) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        boolean isSupported(PeriodType type, int field) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        void setFieldValue(ReadWritablePeriod period, int field, int value) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        int getFieldType() {\n         //The specific code has been omitted, but there is no error\n        }\n    }", "Literal": "    static class Literal\n            implements PeriodPrinter, PeriodParser {\n        static final Literal EMPTY = new Literal(\"\");\n        private final String iText;\n\n        Literal(String text) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public int countFieldsToPrint(ReadablePeriod period, int stopAt, Locale locale) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public int calculatePrintedLength(ReadablePeriod period, Locale locale) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public void printTo(Writer out, ReadablePeriod period, Locale locale) throws IOException {\n            out.write(iText);\n        }\n\n        public int parseInto(\n                ReadWritablePeriod period, String periodStr,\n                int position, Locale locale) {\n         //The specific code has been omitted, but there is no error\n        }\n    }", "Separator": "    static class Separator\n            implements PeriodPrinter, PeriodParser {\n        private final String iText;\n        private final String iFinalText;\n        private final String[] iParsedForms;\n\n        private final boolean iUseBefore;\n        private final boolean iUseAfter;\n\n        private final PeriodPrinter iBeforePrinter;\n        private volatile PeriodPrinter iAfterPrinter;\n        private final PeriodParser iBeforeParser;\n        private volatile PeriodParser iAfterParser;\n\n        Separator(String text, String finalText, String[] variants,\n                PeriodPrinter beforePrinter, PeriodParser beforeParser,\n                boolean useBefore, boolean useAfter) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public int countFieldsToPrint(ReadablePeriod period, int stopAt, Locale locale) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public int calculatePrintedLength(ReadablePeriod period, Locale locale) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public void printTo(Writer out, ReadablePeriod period, Locale locale) throws IOException {\n            PeriodPrinter before = iBeforePrinter;\n            PeriodPrinter after = iAfterPrinter;\n            \n            before.printTo(out, period, locale);\n            if (iUseBefore) {\n         //The specific code has been omitted, but there is no error\n        } else if (iUseAfter && after.countFieldsToPrint(period, 1, locale) > 0) {\n                out.write(iText);\n            }\n            after.printTo(out, period, locale);\n        }\n\n        public int parseInto(\n                ReadWritablePeriod period, String periodStr,\n                int position, Locale locale) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        Separator finish(PeriodPrinter afterPrinter, PeriodParser afterParser) {\n         //The specific code has been omitted, but there is no error\n        }\n    }", "Composite": "    static class Composite\n            implements PeriodPrinter, PeriodParser {\n        \n        private final PeriodPrinter[] iPrinters;\n        private final PeriodParser[] iParsers;\n\n        Composite(List<Object> elementPairs) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public int countFieldsToPrint(ReadablePeriod period, int stopAt, Locale locale) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public int calculatePrintedLength(ReadablePeriod period, Locale locale) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public void printTo(Writer out, ReadablePeriod period, Locale locale) throws IOException {\n            PeriodPrinter[] printers = iPrinters;\n            int len = printers.length;\n            for (int i=0; i<len; i++) {\n         //The specific code has been omitted, but there is no error\n        }\n        }\n\n        public int parseInto(\n                ReadWritablePeriod period, String periodStr,\n                int position, Locale locale) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        private void decompose(List<Object> elementPairs, List<Object> printerList, List<Object> parserList) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        private void addArrayToList(List<Object> list, Object[] array) {\n         //The specific code has been omitted, but there is no error\n        }\n    }"}