{"OpenMapRealMatrix": "public class OpenMapRealMatrix extends AbstractRealMatrix\n    implements SparseRealMatrix, Serializable {\n    /** Serializable version identifier. */\n    private static final long serialVersionUID = -5962461716457143437L;\n    /** Number of rows of the matrix. */\n    private final int rows;\n    /** Number of columns of the matrix. */\n    private final int columns;\n    /** Storage for (sparse) matrix elements. */\n    private final OpenIntToDoubleHashMap entries;\n\n    /**\n     * Build a sparse matrix with the supplied row and column dimensions.\n     *\n     * @param rowDimension Number of rows of the matrix.\n     * @param columnDimension Number of columns of the matrix.\n     */\n    public OpenMapRealMatrix(int rowDimension, int columnDimension) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Build a matrix by copying another one.\n     *\n     * @param matrix matrix to copy.\n     */\n    public OpenMapRealMatrix(OpenMapRealMatrix matrix) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /** {@inheritDoc} */\n    @Override\n    public OpenMapRealMatrix copy() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /** {@inheritDoc} */\n    @Override\n    public OpenMapRealMatrix createMatrix(int rowDimension, int columnDimension) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /** {@inheritDoc} */\n    @Override\n    public int getColumnDimension() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Compute the sum of this matrix and {@code m}.\n     *\n     * @param m Matrix to be added.\n     * @return {@code this} + {@code m}.\n     * @throws org.apache.commons.math.exception.DimensionMismatchException\n     * if {@code m} is not the same size as this matrix.\n     */\n    public OpenMapRealMatrix add(OpenMapRealMatrix m) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /** {@inheritDoc} */\n    @Override\n    public OpenMapRealMatrix subtract(final RealMatrix m) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Subtract {@code m} from this matrix.\n     *\n     * @param m Matrix to be subtracted.\n     * @return {@code this} - {@code m}.\n     * @throws org.apache.commons.math.exception.DimensionMismatchException\n     * if {@code m} is not the same size as this matrix.\n     */\n    public OpenMapRealMatrix subtract(OpenMapRealMatrix m) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /** {@inheritDoc} */\n    @Override\n    public RealMatrix multiply(final RealMatrix m) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Postmultiply this matrix by {@code m}.\n     *\n     * @param m Matrix to postmultiply by.\n     * @return {@code this} * {@code m}.\n     * @throws MatrixDimensionMismatchException\n     * if the number of rows of {@code m} differ from the number of columns\n     * of this matrix.\n     */\n    public OpenMapRealMatrix multiply(OpenMapRealMatrix m) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /** {@inheritDoc} */\n    @Override\n    public double getEntry(int row, int column) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /** {@inheritDoc} */\n    @Override\n    public int getRowDimension() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /** {@inheritDoc} */\n    @Override\n    public void setEntry(int row, int column, double value) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /** {@inheritDoc} */\n    @Override\n    public void addToEntry(int row, int column, double increment) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /** {@inheritDoc} */\n    @Override\n    public void multiplyEntry(int row, int column, double factor) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Compute the key to access a matrix element\n     * @param row row index of the matrix element\n     * @param column column index of the matrix element\n     * @return key within the map to access the matrix element\n     */\n    private int computeKey(int row, int column) {\n         //The specific code has been omitted, but there is no error\n        }\n\n\n}"}