{"MultivariateNormalDistribution": "public class MultivariateNormalDistribution\n    extends AbstractMultivariateRealDistribution {\n    /** Vector of means. */\n    private final double[] means;\n    /** Covariance matrix. */\n    private final RealMatrix covarianceMatrix;\n    /** The matrix inverse of the covariance matrix. */\n    private final RealMatrix covarianceMatrixInverse;\n    /** The determinant of the covariance matrix. */\n    private final double covarianceMatrixDeterminant;\n    /** Matrix used in computation of samples. */\n    private final RealMatrix samplingMatrix;\n\n    /**\n     * Creates a multivariate normal distribution with the given mean vector and\n     * covariance matrix.\n     * <br/>\n     * The number of dimensions is equal to the length of the mean vector\n     * and to the number of rows and columns of the covariance matrix.\n     * It is frequently written as \"p\" in formulae.\n     *\n     * @param means Vector of means.\n     * @param covariances Covariance matrix.\n     * @throws DimensionMismatchException if the arrays length are\n     * inconsistent.\n     * @throws SingularMatrixException if the eigenvalue decomposition cannot\n     * be performed on the provided covariance matrix.\n     * @throws NonPositiveDefiniteMatrixException if any of the eigenvalues is\n     * negative.\n     */\n    public MultivariateNormalDistribution(final double[] means,\n                                          final double[][] covariances)\n        throws SingularMatrixException,\n               DimensionMismatchException,\n               NonPositiveDefiniteMatrixException {\n        this(new Well19937c(), means, covariances);\n    }\n\n    /**\n     * Creates a multivariate normal distribution with the given mean vector and\n     * covariance matrix.\n     * <br/>\n     * The number of dimensions is equal to the length of the mean vector\n     * and to the number of rows and columns of the covariance matrix.\n     * It is frequently written as \"p\" in formulae.\n     *\n     * @param rng Random Number Generator.\n     * @param means Vector of means.\n     * @param covariances Covariance matrix.\n     * @throws DimensionMismatchException if the arrays length are\n     * inconsistent.\n     * @throws SingularMatrixException if the eigenvalue decomposition cannot\n     * be performed on the provided covariance matrix.\n     * @throws NonPositiveDefiniteMatrixException if any of the eigenvalues is\n     * negative.\n     */\n    public MultivariateNormalDistribution(RandomGenerator rng,\n                                          final double[] means,\n                                          final double[][] covariances)\n            throws SingularMatrixException,\n                   DimensionMismatchException,\n                   NonPositiveDefiniteMatrixException {\n        super(rng, means.length);\n\n        final int dim = means.length;\n\n        if (covariances.length != dim) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        for (int i = 0; i < dim; i++) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        this.means = MathArrays.copyOf(means);\n\n        covarianceMatrix = new Array2DRowRealMatrix(covariances);\n\n        // Covariance matrix eigen decomposition.\n        final EigenDecomposition covMatDec = new EigenDecomposition(covarianceMatrix);\n\n        // Compute and store the inverse.\n        covarianceMatrixInverse = covMatDec.getSolver().getInverse();\n        // Compute and store the determinant.\n        covarianceMatrixDeterminant = covMatDec.getDeterminant();\n\n        // Eigenvalues of the covariance matrix.\n        final double[] covMatEigenvalues = covMatDec.getRealEigenvalues();\n\n        for (int i = 0; i < covMatEigenvalues.length; i++) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        // Matrix where each column is an eigenvector of the covariance matrix.\n        final Array2DRowRealMatrix covMatEigenvectors = new Array2DRowRealMatrix(dim, dim);\n        for (int v = 0; v < dim; v++) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        final RealMatrix tmpMatrix = covMatEigenvectors.transpose();\n\n        // Scale each eigenvector by the square root of its eigenvalue.\n        for (int row = 0; row < dim; row++) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        samplingMatrix = covMatEigenvectors.multiply(tmpMatrix);\n    }\n\n    /**\n     * Gets the mean vector.\n     *\n     * @return the mean vector.\n     */\n    public double[] getMeans() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Gets the covariance matrix.\n     *\n     * @return the covariance matrix.\n     */\n    public RealMatrix getCovariances() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /** {@inheritDoc} */\n    public double density(final double[] vals) throws DimensionMismatchException {\n        final int dim = getDimension();\n        if (vals.length != dim) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        return FastMath.pow(2 * FastMath.PI, -dim / 2) *\n            FastMath.pow(covarianceMatrixDeterminant, -0.5) *\n            getExponentTerm(vals);\n    }\n\n    /**\n     * Gets the square root of each element on the diagonal of the covariance\n     * matrix.\n     *\n     * @return the standard deviations.\n     */\n    public double[] getStandardDeviations() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /** {@inheritDoc} */\n    public double[] sample() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Computes the term used in the exponent (see definition of the distribution).\n     *\n     * @param values Values at which to compute density.\n     * @return the multiplication factor of density calculations.\n     */\n    private double getExponentTerm(final double[] values) {\n         //The specific code has been omitted, but there is no error\n        }\n}"}