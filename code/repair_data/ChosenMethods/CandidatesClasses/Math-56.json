{"MultidimensionalCounter": "public class MultidimensionalCounter implements Iterable<Integer> {\n    /**\n     * Number of dimensions.\n     */\n    private final int dimension;\n    /**\n     * Offset for each dimension.\n     */\n    private final int[] uniCounterOffset;\n    /**\n     * Counter sizes.\n     */\n    private final int[] size;\n    /**\n     * Total number of (one-dimensional) slots.\n     */\n    private final int totalSize;\n    /**\n     * Index of last dimension.\n     */\n    private final int last;\n\n    /**\n     * Perform iteration over the multidimensional counter.\n     */\n    public class Iterator implements java.util.Iterator<Integer> {\n        /**\n         * Multidimensional counter.\n         */\n        private final int[] counter = new int[dimension];\n        /**\n         * Unidimensional counter.\n         */\n        private int count = -1;\n\n        /**\n         * Create an iterator\n         * @see #iterator()\n         */\n        Iterator() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public boolean hasNext() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * @return the unidimensional count after the counter has been\n         * incremented by {@code 1}.\n         */\n        public Integer next() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * Get the current unidimensional counter slot.\n         *\n         * @return the index within the unidimensionl counter.\n         */\n        public int getCount() {\n         //The specific code has been omitted, but there is no error\n        }\n        /**\n         * Get the current multidimensional counter slots.\n         *\n         * @return the indices within the multidimensional counter.\n         */\n        public int[] getCounts() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * Get the current count in the selected dimension.\n         *\n         * @param dim Dimension index.\n         * @return the count at the corresponding index for the current state\n         * of the iterator.\n         * @throws IndexOutOfBoundsException if {@code index} is not in the\n         * correct interval (as defined by the length of the argument in the\n         * {@link MultidimensionalCounter#MultidimensionalCounter(int[])\n         * constructor of the enclosing class}).\n         */\n        public int getCount(int dim) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * @throws UnsupportedOperationException\n         */\n        public void remove() {\n         //The specific code has been omitted, but there is no error\n        }\n    }\n\n    /**\n     * Create a counter.\n     *\n     * @param size Counter sizes (number of slots in each dimension).\n     * @throws NotStrictlyPositiveException if one of the sizes is\n     * negative or zero.\n     */\n    public MultidimensionalCounter(int ... size) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Create an iterator over this counter.\n     *\n     * @return the iterator.\n     */\n    public Iterator iterator() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Get the number of dimensions of the multidimensional counter.\n     *\n     * @return the number of dimensions.\n     */\n    public int getDimension() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Convert to multidimensional counter.\n     *\n     * @param index Index in unidimensional counter.\n     * @return the multidimensional counts.\n     * @throws OutOfRangeException if {@code index} is not between\n     * {@code 0} and the value returned by {@link #getSize()} (excluded).\n     */\n    public int[] getCounts(int index) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Convert to unidimensional counter.\n     *\n     * @param c Indices in multidimensional counter.\n     * @return the index within the unidimensionl counter.\n     * @throws DimensionMismatchException if the size of {@code c}\n     * does not match the size of the array given in the constructor.\n     * @throws OutOfRangeException if a value of {@code c} is not in\n     * the range of the corresponding dimension, as defined in the\n     * {@link MultidimensionalCounter#MultidimensionalCounter(int...) constructor}.\n     */\n    public int getCount(int ... c) throws OutOfRangeException {\n        if (c.length != dimension) {\n         //The specific code has been omitted, but there is no error\n        }\n        int count = 0;\n        for (int i = 0; i < dimension; i++) {\n         //The specific code has been omitted, but there is no error\n        }\n        return count + c[last];\n    }\n\n    /**\n     * Get the total number of elements.\n     *\n     * @return the total size of the unidimensional counter.\n     */\n    public int getSize() {\n         //The specific code has been omitted, but there is no error\n        }\n    /**\n     * Get the number of multidimensional counter slots in each dimension.\n     *\n     * @return the sizes of the multidimensional counter in each dimension.\n     */\n    public int[] getSizes() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public String toString() {\n         //The specific code has been omitted, but there is no error\n        }\n}", "Iterator": "    public class Iterator implements java.util.Iterator<Integer> {\n        /**\n         * Multidimensional counter.\n         */\n        private final int[] counter = new int[dimension];\n        /**\n         * Unidimensional counter.\n         */\n        private int count = -1;\n\n        /**\n         * Create an iterator\n         * @see #iterator()\n         */\n        Iterator() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public boolean hasNext() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * @return the unidimensional count after the counter has been\n         * incremented by {@code 1}.\n         */\n        public Integer next() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * Get the current unidimensional counter slot.\n         *\n         * @return the index within the unidimensionl counter.\n         */\n        public int getCount() {\n         //The specific code has been omitted, but there is no error\n        }\n        /**\n         * Get the current multidimensional counter slots.\n         *\n         * @return the indices within the multidimensional counter.\n         */\n        public int[] getCounts() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * Get the current count in the selected dimension.\n         *\n         * @param dim Dimension index.\n         * @return the count at the corresponding index for the current state\n         * of the iterator.\n         * @throws IndexOutOfBoundsException if {@code index} is not in the\n         * correct interval (as defined by the length of the argument in the\n         * {@link MultidimensionalCounter#MultidimensionalCounter(int[])\n         * constructor of the enclosing class}).\n         */\n        public int getCount(int dim) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * @throws UnsupportedOperationException\n         */\n        public void remove() {\n         //The specific code has been omitted, but there is no error\n        }\n    }"}