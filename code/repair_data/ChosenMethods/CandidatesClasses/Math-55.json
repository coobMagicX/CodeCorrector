{"Vector3D": "public class Vector3D implements Serializable {\n  /** Null vector (coordinates: 0, 0, 0). */\n  public static final Vector3D ZERO   = new Vector3D(0, 0, 0);\n\n  /** First canonical vector (coordinates: 1, 0, 0). */\n  public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);\n\n  /** Opposite of the first canonical vector (coordinates: -1, 0, 0). */\n  public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);\n\n  /** Second canonical vector (coordinates: 0, 1, 0). */\n  public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);\n\n  /** Opposite of the second canonical vector (coordinates: 0, -1, 0). */\n  public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);\n\n  /** Third canonical vector (coordinates: 0, 0, 1). */\n  public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);\n\n  /** Opposite of the third canonical vector (coordinates: 0, 0, -1).  */\n  public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);\n\n  // CHECKSTYLE: stop ConstantName\n  /** A vector with all coordinates set to NaN. */\n  public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);\n  // CHECKSTYLE: resume ConstantName\n\n  /** A vector with all coordinates set to positive infinity. */\n  public static final Vector3D POSITIVE_INFINITY =\n      new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);\n\n  /** A vector with all coordinates set to negative infinity. */\n  public static final Vector3D NEGATIVE_INFINITY =\n      new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);\n\n  /** Default format. */\n  private static final Vector3DFormat DEFAULT_FORMAT =\n      Vector3DFormat.getInstance();\n\n  /** Serializable version identifier. */\n  private static final long serialVersionUID = 5133268763396045979L;\n\n  /** Abscissa. */\n  private final double x;\n\n  /** Ordinate. */\n  private final double y;\n\n  /** Height. */\n  private final double z;\n\n  /** Simple constructor.\n   * Build a vector from its coordinates\n   * @param x abscissa\n   * @param y ordinate\n   * @param z height\n   * @see #getX()\n   * @see #getY()\n   * @see #getZ()\n   */\n  public Vector3D(double x, double y, double z) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /** Simple constructor.\n   * Build a vector from its azimuthal coordinates\n   * @param alpha azimuth (&alpha;) around Z\n   *              (0 is +X, &pi;/2 is +Y, &pi; is -X and 3&pi;/2 is -Y)\n   * @param delta elevation (&delta;) above (XY) plane, from -&pi;/2 to +&pi;/2\n   * @see #getAlpha()\n   * @see #getDelta()\n   */\n  public Vector3D(double alpha, double delta) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /** Multiplicative constructor\n   * Build a vector from another one and a scale factor.\n   * The vector built will be a * u\n   * @param a scale factor\n   * @param u base (unscaled) vector\n   */\n  public Vector3D(double a, Vector3D u) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /** Linear constructor\n   * Build a vector from two other ones and corresponding scale factors.\n   * The vector built will be a1 * u1 + a2 * u2\n   * @param a1 first scale factor\n   * @param u1 first base (unscaled) vector\n   * @param a2 second scale factor\n   * @param u2 second base (unscaled) vector\n   */\n  public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /** Linear constructor\n   * Build a vector from three other ones and corresponding scale factors.\n   * The vector built will be a1 * u1 + a2 * u2 + a3 * u3\n   * @param a1 first scale factor\n   * @param u1 first base (unscaled) vector\n   * @param a2 second scale factor\n   * @param u2 second base (unscaled) vector\n   * @param a3 third scale factor\n   * @param u3 third base (unscaled) vector\n   */\n  public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2,\n                  double a3, Vector3D u3) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /** Linear constructor\n   * Build a vector from four other ones and corresponding scale factors.\n   * The vector built will be a1 * u1 + a2 * u2 + a3 * u3 + a4 * u4\n   * @param a1 first scale factor\n   * @param u1 first base (unscaled) vector\n   * @param a2 second scale factor\n   * @param u2 second base (unscaled) vector\n   * @param a3 third scale factor\n   * @param u3 third base (unscaled) vector\n   * @param a4 fourth scale factor\n   * @param u4 fourth base (unscaled) vector\n   */\n  public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2,\n                  double a3, Vector3D u3, double a4, Vector3D u4) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /** Get the abscissa of the vector.\n   * @return abscissa of the vector\n   * @see #Vector3D(double, double, double)\n   */\n  public double getX() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /** Get the ordinate of the vector.\n   * @return ordinate of the vector\n   * @see #Vector3D(double, double, double)\n   */\n  public double getY() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /** Get the height of the vector.\n   * @return height of the vector\n   * @see #Vector3D(double, double, double)\n   */\n  public double getZ() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /** Get the L<sub>1</sub> norm for the vector.\n   * @return L<sub>1</sub> norm for the vector\n   */\n  public double getNorm1() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /** Get the L<sub>2</sub> norm for the vector.\n   * @return euclidian norm for the vector\n   */\n  public double getNorm() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /** Get the square of the norm for the vector.\n   * @return square of the euclidian norm for the vector\n   */\n  public double getNormSq() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /** Get the L<sub>&infin;</sub> norm for the vector.\n   * @return L<sub>&infin;</sub> norm for the vector\n   */\n  public double getNormInf() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /** Get the azimuth of the vector.\n   * @return azimuth (&alpha;) of the vector, between -&pi; and +&pi;\n   * @see #Vector3D(double, double)\n   */\n  public double getAlpha() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /** Get the elevation of the vector.\n   * @return elevation (&delta;) of the vector, between -&pi;/2 and +&pi;/2\n   * @see #Vector3D(double, double)\n   */\n  public double getDelta() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /** Add a vector to the instance.\n   * @param v vector to add\n   * @return a new vector\n   */\n  public Vector3D add(Vector3D v) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /** Add a scaled vector to the instance.\n   * @param factor scale factor to apply to v before adding it\n   * @param v vector to add\n   * @return a new vector\n   */\n  public Vector3D add(double factor, Vector3D v) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /** Subtract a vector from the instance.\n   * @param v vector to subtract\n   * @return a new vector\n   */\n  public Vector3D subtract(Vector3D v) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /** Subtract a scaled vector from the instance.\n   * @param factor scale factor to apply to v before subtracting it\n   * @param v vector to subtract\n   * @return a new vector\n   */\n  public Vector3D subtract(double factor, Vector3D v) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /** Get a normalized vector aligned with the instance.\n   * @return a new normalized vector\n   * @exception ArithmeticException if the norm is zero\n   */\n  public Vector3D normalize() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /** Get a vector orthogonal to the instance.\n   * <p>There are an infinite number of normalized vectors orthogonal\n   * to the instance. This method picks up one of them almost\n   * arbitrarily. It is useful when one needs to compute a reference\n   * frame with one of the axes in a predefined direction. The\n   * following example shows how to build a frame having the k axis\n   * aligned with the known vector u :\n   * <pre><code>\n   *   Vector3D k = u.normalize();\n   *   Vector3D i = k.orthogonal();\n   *   Vector3D j = Vector3D.crossProduct(k, i);\n   * </code></pre></p>\n   * @return a new normalized vector orthogonal to the instance\n   * @exception ArithmeticException if the norm of the instance is null\n   */\n  public Vector3D orthogonal() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /** Compute the angular separation between two vectors.\n   * <p>This method computes the angular separation between two\n   * vectors using the dot product for well separated vectors and the\n   * cross product for almost aligned vectors. This allows to have a\n   * good accuracy in all cases, even for vectors very close to each\n   * other.</p>\n   * @param v1 first vector\n   * @param v2 second vector\n   * @return angular separation between v1 and v2\n   * @exception ArithmeticException if either vector has a null norm\n   */\n  public static double angle(Vector3D v1, Vector3D v2) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /** Get the opposite of the instance.\n   * @return a new vector which is opposite to the instance\n   */\n  public Vector3D negate() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /** Multiply the instance by a scalar\n   * @param a scalar\n   * @return a new vector\n   */\n  public Vector3D scalarMultiply(double a) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /**\n   * Returns true if any coordinate of this vector is NaN; false otherwise\n   * @return  true if any coordinate of this vector is NaN; false otherwise\n   */\n  public boolean isNaN() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /**\n   * Returns true if any coordinate of this vector is infinite and none are NaN;\n   * false otherwise\n   * @return  true if any coordinate of this vector is infinite and none are NaN;\n   * false otherwise\n   */\n  public boolean isInfinite() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /**\n   * Test for the equality of two 3D vectors.\n   * <p>\n   * If all coordinates of two 3D vectors are exactly the same, and none are\n   * <code>Double.NaN</code>, the two 3D vectors are considered to be equal.\n   * </p>\n   * <p>\n   * <code>NaN</code> coordinates are considered to affect globally the vector\n   * and be equals to each other - i.e, if either (or all) coordinates of the\n   * 3D vector are equal to <code>Double.NaN</code>, the 3D vector is equal to\n   * {@link #NaN}.\n   * </p>\n   *\n   * @param other Object to test for equality to this\n   * @return true if two 3D vector objects are equal, false if\n   *         object is null, not an instance of Vector3D, or\n   *         not equal to this Vector3D instance\n   *\n   */\n  @Override\n  public boolean equals(Object other) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /**\n   * Get a hashCode for the 3D vector.\n   * <p>\n   * All NaN values have the same hash code.</p>\n   *\n   * @return a hash code value for this object\n   */\n  @Override\n  public int hashCode() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /** Compute the dot-product of two vectors.\n   * @param v1 first vector\n   * @param v2 second vector\n   * @return the dot product v1.v2\n   */\n  public static double dotProduct(Vector3D v1, Vector3D v2) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /** Compute the cross-product of two vectors.\n   * @param v1 first vector\n   * @param v2 second vector\n   * @return the cross product v1 ^ v2 as a new Vector\n   */\n  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n   * <p>Calling this method is equivalent to calling:\n   * <code>v1.subtract(v2).getNorm1()</code> except that no intermediate\n   * vector is built</p>\n   * @param v1 first vector\n   * @param v2 second vector\n   * @return the distance between v1 and v2 according to the L<sub>1</sub> norm\n   */\n  public static double distance1(Vector3D v1, Vector3D v2) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /** Compute the distance between two vectors according to the L<sub>2</sub> norm.\n   * <p>Calling this method is equivalent to calling:\n   * <code>v1.subtract(v2).getNorm()</code> except that no intermediate\n   * vector is built</p>\n   * @param v1 first vector\n   * @param v2 second vector\n   * @return the distance between v1 and v2 according to the L<sub>2</sub> norm\n   */\n  public static double distance(Vector3D v1, Vector3D v2) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /** Compute the distance between two vectors according to the L<sub>&infin;</sub> norm.\n   * <p>Calling this method is equivalent to calling:\n   * <code>v1.subtract(v2).getNormInf()</code> except that no intermediate\n   * vector is built</p>\n   * @param v1 first vector\n   * @param v2 second vector\n   * @return the distance between v1 and v2 according to the L<sub>&infin;</sub> norm\n   */\n  public static double distanceInf(Vector3D v1, Vector3D v2) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /** Compute the square of the distance between two vectors.\n   * <p>Calling this method is equivalent to calling:\n   * <code>v1.subtract(v2).getNormSq()</code> except that no intermediate\n   * vector is built</p>\n   * @param v1 first vector\n   * @param v2 second vector\n   * @return the square of the distance between v1 and v2\n   */\n  public static double distanceSq(Vector3D v1, Vector3D v2) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /** Get a string representation of this vector.\n   * @return a string representation of this vector\n   */\n  @Override\n  public String toString() {\n         //The specific code has been omitted, but there is no error\n        }\n\n}"}