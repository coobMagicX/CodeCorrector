{"SummaryStatistics": "public class SummaryStatistics implements StatisticalSummary, Serializable {\n\n    /** Serialization UID */\n    private static final long serialVersionUID = -2021321786743555871L;\n\n    /** count of values that have been added */\n    protected long n = 0;\n\n    /** SecondMoment is used to compute the mean and variance */\n    protected SecondMoment secondMoment = new SecondMoment();\n\n    /** sum of values that have been added */\n    protected Sum sum = new Sum();\n\n    /** sum of the square of each value that has been added */\n    protected SumOfSquares sumsq = new SumOfSquares();\n\n    /** min of values that have been added */\n    protected Min min = new Min();\n\n    /** max of values that have been added */\n    protected Max max = new Max();\n\n    /** sumLog of values that have been added */\n    protected SumOfLogs sumLog = new SumOfLogs();\n\n    /** geoMean of values that have been added */\n    protected GeometricMean geoMean = new GeometricMean(sumLog);\n\n    /** mean of values that have been added */\n    protected Mean mean = new Mean(secondMoment);\n\n    /** variance of values that have been added */\n    protected Variance variance = new Variance(secondMoment);\n\n    /** Sum statistic implementation - can be reset by setter. */\n    private StorelessUnivariateStatistic sumImpl = sum;\n\n    /** Sum of squares statistic implementation - can be reset by setter. */\n    private StorelessUnivariateStatistic sumsqImpl = sumsq;\n\n    /** Minimum statistic implementation - can be reset by setter. */\n    private StorelessUnivariateStatistic minImpl = min;\n\n    /** Maximum statistic implementation - can be reset by setter. */\n    private StorelessUnivariateStatistic maxImpl = max;\n\n    /** Sum of log statistic implementation - can be reset by setter. */\n    private StorelessUnivariateStatistic sumLogImpl = sumLog;\n\n    /** Geometric mean statistic implementation - can be reset by setter. */\n    private StorelessUnivariateStatistic geoMeanImpl = geoMean;\n\n    /** Mean statistic implementation - can be reset by setter. */\n    private StorelessUnivariateStatistic meanImpl = mean;\n\n    /** Variance statistic implementation - can be reset by setter. */\n    private StorelessUnivariateStatistic varianceImpl = variance;\n\n    /**\n     * Construct a SummaryStatistics instance\n     */\n    public SummaryStatistics() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * A copy constructor. Creates a deep-copy of the {@code original}.\n     *\n     * @param original the {@code SummaryStatistics} instance to copy\n     */\n    public SummaryStatistics(SummaryStatistics original) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Return a {@link StatisticalSummaryValues} instance reporting current\n     * statistics.\n     * @return Current values of statistics\n     */\n    public StatisticalSummary getSummary() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Add a value to the data\n     * @param value the value to add\n     */\n    public void addValue(double value) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the number of available values\n     * @return The number of available values\n     */\n    public long getN() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the sum of the values that have been added\n     * @return The sum or <code>Double.NaN</code> if no values have been added\n     */\n    public double getSum() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the sum of the squares of the values that have been added.\n     * <p>\n     * Double.NaN is returned if no values have been added.\n     * </p>\n     * @return The sum of squares\n     */\n    public double getSumsq() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the mean of the values that have been added.\n     * <p>\n     * Double.NaN is returned if no values have been added.\n     * </p>\n     * @return the mean\n     */\n    public double getMean() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the standard deviation of the values that have been added.\n     * <p>\n     * Double.NaN is returned if no values have been added.\n     * </p>\n     * @return the standard deviation\n     */\n    public double getStandardDeviation() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the (sample) variance of the available values.\n     *\n     * <p>This method returns the bias-corrected sample variance (using {@code n - 1} in\n     * the denominator).  Use {@link #getPopulationVariance()} for the non-bias-corrected\n     * population variance.</p>\n     *\n     * <p>Double.NaN is returned if no values have been added.</p>\n     *\n     * @return the variance\n     */\n    public double getVariance() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the <a href=\"http://en.wikibooks.org/wiki/Statistics/Summary/Variance\">\n     * population variance</a> of the values that have been added.\n     *\n     * <p>Double.NaN is returned if no values have been added.</p>\n     *\n     * @return the population variance\n     */\n    public double getPopulationVariance() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the maximum of the values that have been added.\n     * <p>\n     * Double.NaN is returned if no values have been added.\n     * </p>\n     * @return the maximum\n     */\n    public double getMax() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the minimum of the values that have been added.\n     * <p>\n     * Double.NaN is returned if no values have been added.\n     * </p>\n     * @return the minimum\n     */\n    public double getMin() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the geometric mean of the values that have been added.\n     * <p>\n     * Double.NaN is returned if no values have been added.\n     * </p>\n     * @return the geometric mean\n     */\n    public double getGeometricMean() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the sum of the logs of the values that have been added.\n     * <p>\n     * Double.NaN is returned if no values have been added.\n     * </p>\n     * @return the sum of logs\n     * @since 1.2\n     */\n    public double getSumOfLogs() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns a statistic related to the Second Central Moment.  Specifically,\n     * what is returned is the sum of squared deviations from the sample mean\n     * among the values that have been added.\n     * <p>\n     * Returns <code>Double.NaN</code> if no data values have been added and\n     * returns <code>0</code> if there is just one value in the data set.</p>\n     * <p>\n     * @return second central moment statistic\n     * @since 2.0\n     */\n    public double getSecondMoment() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Generates a text report displaying summary statistics from values that\n     * have been added.\n     * @return String with line feeds displaying statistics\n     * @since 1.2\n     */\n    @Override\n    public String toString() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Resets all statistics and storage\n     */\n    public void clear() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns true iff <code>object</code> is a\n     * <code>SummaryStatistics</code> instance and all statistics have the\n     * same values as this.\n     * @param object the object to test equality against.\n     * @return true if object equals this\n     */\n    @Override\n    public boolean equals(Object object) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns hash code based on values of statistics\n     * @return hash code\n     */\n    @Override\n    public int hashCode() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    // Getters and setters for statistics implementations\n    /**\n     * Returns the currently configured Sum implementation\n     * @return the StorelessUnivariateStatistic implementing the sum\n     * @since 1.2\n     */\n    public StorelessUnivariateStatistic getSumImpl() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>\n     * Sets the implementation for the Sum.\n     * </p>\n     * <p>\n     * This method must be activated before any data has been added - i.e.,\n     * before {@link #addValue(double) addValue} has been used to add data;\n     * otherwise an IllegalStateException will be thrown.\n     * </p>\n     * @param sumImpl the StorelessUnivariateStatistic instance to use for\n     *        computing the Sum\n     * @throws IllegalStateException if data has already been added (i.e if n >\n     *         0)\n     * @since 1.2\n     */\n    public void setSumImpl(StorelessUnivariateStatistic sumImpl) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the currently configured sum of squares implementation\n     * @return the StorelessUnivariateStatistic implementing the sum of squares\n     * @since 1.2\n     */\n    public StorelessUnivariateStatistic getSumsqImpl() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>\n     * Sets the implementation for the sum of squares.\n     * </p>\n     * <p>\n     * This method must be activated before any data has been added - i.e.,\n     * before {@link #addValue(double) addValue} has been used to add data;\n     * otherwise an IllegalStateException will be thrown.\n     * </p>\n     * @param sumsqImpl the StorelessUnivariateStatistic instance to use for\n     *        computing the sum of squares\n     * @throws IllegalStateException if data has already been added (i.e if n >\n     *         0)\n     * @since 1.2\n     */\n    public void setSumsqImpl(StorelessUnivariateStatistic sumsqImpl) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the currently configured minimum implementation\n     * @return the StorelessUnivariateStatistic implementing the minimum\n     * @since 1.2\n     */\n    public StorelessUnivariateStatistic getMinImpl() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>\n     * Sets the implementation for the minimum.\n     * </p>\n     * <p>\n     * This method must be activated before any data has been added - i.e.,\n     * before {@link #addValue(double) addValue} has been used to add data;\n     * otherwise an IllegalStateException will be thrown.\n     * </p>\n     * @param minImpl the StorelessUnivariateStatistic instance to use for\n     *        computing the minimum\n     * @throws IllegalStateException if data has already been added (i.e if n >\n     *         0)\n     * @since 1.2\n     */\n    public void setMinImpl(StorelessUnivariateStatistic minImpl) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the currently configured maximum implementation\n     * @return the StorelessUnivariateStatistic implementing the maximum\n     * @since 1.2\n     */\n    public StorelessUnivariateStatistic getMaxImpl() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>\n     * Sets the implementation for the maximum.\n     * </p>\n     * <p>\n     * This method must be activated before any data has been added - i.e.,\n     * before {@link #addValue(double) addValue} has been used to add data;\n     * otherwise an IllegalStateException will be thrown.\n     * </p>\n     * @param maxImpl the StorelessUnivariateStatistic instance to use for\n     *        computing the maximum\n     * @throws IllegalStateException if data has already been added (i.e if n >\n     *         0)\n     * @since 1.2\n     */\n    public void setMaxImpl(StorelessUnivariateStatistic maxImpl) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the currently configured sum of logs implementation\n     * @return the StorelessUnivariateStatistic implementing the log sum\n     * @since 1.2\n     */\n    public StorelessUnivariateStatistic getSumLogImpl() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>\n     * Sets the implementation for the sum of logs.\n     * </p>\n     * <p>\n     * This method must be activated before any data has been added - i.e.,\n     * before {@link #addValue(double) addValue} has been used to add data;\n     * otherwise an IllegalStateException will be thrown.\n     * </p>\n     * @param sumLogImpl the StorelessUnivariateStatistic instance to use for\n     *        computing the log sum\n     * @throws IllegalStateException if data has already been added (i.e if n >\n     *         0)\n     * @since 1.2\n     */\n    public void setSumLogImpl(StorelessUnivariateStatistic sumLogImpl) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the currently configured geometric mean implementation\n     * @return the StorelessUnivariateStatistic implementing the geometric mean\n     * @since 1.2\n     */\n    public StorelessUnivariateStatistic getGeoMeanImpl() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>\n     * Sets the implementation for the geometric mean.\n     * </p>\n     * <p>\n     * This method must be activated before any data has been added - i.e.,\n     * before {@link #addValue(double) addValue} has been used to add data;\n     * otherwise an IllegalStateException will be thrown.\n     * </p>\n     * @param geoMeanImpl the StorelessUnivariateStatistic instance to use for\n     *        computing the geometric mean\n     * @throws IllegalStateException if data has already been added (i.e if n >\n     *         0)\n     * @since 1.2\n     */\n    public void setGeoMeanImpl(StorelessUnivariateStatistic geoMeanImpl) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the currently configured mean implementation\n     * @return the StorelessUnivariateStatistic implementing the mean\n     * @since 1.2\n     */\n    public StorelessUnivariateStatistic getMeanImpl() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>\n     * Sets the implementation for the mean.\n     * </p>\n     * <p>\n     * This method must be activated before any data has been added - i.e.,\n     * before {@link #addValue(double) addValue} has been used to add data;\n     * otherwise an IllegalStateException will be thrown.\n     * </p>\n     * @param meanImpl the StorelessUnivariateStatistic instance to use for\n     *        computing the mean\n     * @throws IllegalStateException if data has already been added (i.e if n >\n     *         0)\n     * @since 1.2\n     */\n    public void setMeanImpl(StorelessUnivariateStatistic meanImpl) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the currently configured variance implementation\n     * @return the StorelessUnivariateStatistic implementing the variance\n     * @since 1.2\n     */\n    public StorelessUnivariateStatistic getVarianceImpl() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>\n     * Sets the implementation for the variance.\n     * </p>\n     * <p>\n     * This method must be activated before any data has been added - i.e.,\n     * before {@link #addValue(double) addValue} has been used to add data;\n     * otherwise an IllegalStateException will be thrown.\n     * </p>\n     * @param varianceImpl the StorelessUnivariateStatistic instance to use for\n     *        computing the variance\n     * @throws IllegalStateException if data has already been added (i.e if n >\n     *         0)\n     * @since 1.2\n     */\n    public void setVarianceImpl(StorelessUnivariateStatistic varianceImpl) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Throws IllegalStateException if n > 0.\n     */\n    private void checkEmpty() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns a copy of this SummaryStatistics instance with the same internal state.\n     *\n     * @return a copy of this\n     */\n    public SummaryStatistics copy() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Copies source to dest.\n     * <p>Neither source nor dest can be null.</p>\n     *\n     * @param source SummaryStatistics to copy\n     * @param dest SummaryStatistics to copy to\n     * @throws NullArgumentException if either source or dest is null\n     */\n    public static void copy(SummaryStatistics source, SummaryStatistics dest)\n        throws NullArgumentException {\n        MathUtils.checkNotNull(source);\n        MathUtils.checkNotNull(dest);\n        dest.maxImpl = source.maxImpl.copy();\n        dest.minImpl = source.minImpl.copy();\n        dest.sumImpl = source.sumImpl.copy();\n        dest.sumLogImpl = source.sumLogImpl.copy();\n        dest.sumsqImpl = source.sumsqImpl.copy();\n        dest.secondMoment = source.secondMoment.copy();\n        dest.n = source.n;\n\n        // Keep commons-math supplied statistics with embedded moments in synch\n        if (source.getVarianceImpl() instanceof Variance) {\n            dest.varianceImpl = new Variance(dest.secondMoment);\n        } else {\n            dest.varianceImpl = source.varianceImpl.copy();\n        }\n        if (source.meanImpl instanceof Mean) {\n         //The specific code has been omitted, but there is no error\n        } else {\n            dest.meanImpl = source.meanImpl.copy();\n        }\n        if (source.getGeoMeanImpl() instanceof GeometricMean) {\n            dest.geoMeanImpl = new GeometricMean((SumOfLogs) dest.sumLogImpl);\n        } else {\n            dest.geoMeanImpl = source.geoMeanImpl.copy();\n        }\n\n        // Make sure that if stat == statImpl in source, same\n        // holds in dest; otherwise copy stat\n        if (source.geoMean == source.geoMeanImpl) {\n         //The specific code has been omitted, but there is no error\n        } else {\n            GeometricMean.copy(source.geoMean, dest.geoMean);\n        }\n        if (source.max == source.maxImpl) {\n         //The specific code has been omitted, but there is no error\n        } else {\n            Max.copy(source.max, dest.max);\n        }\n        if (source.mean == source.meanImpl) {\n         //The specific code has been omitted, but there is no error\n        } else {\n            Mean.copy(source.mean, dest.mean);\n        }\n        if (source.min == source.minImpl) {\n         //The specific code has been omitted, but there is no error\n        } else {\n            Min.copy(source.min, dest.min);\n        }\n        if (source.sum == source.sumImpl) {\n         //The specific code has been omitted, but there is no error\n        } else {\n            Sum.copy(source.sum, dest.sum);\n        }\n        if (source.variance == source.varianceImpl) {\n         //The specific code has been omitted, but there is no error\n        } else {\n            Variance.copy(source.variance, dest.variance);\n        }\n        if (source.sumLog == source.sumLogImpl) {\n         //The specific code has been omitted, but there is no error\n        } else {\n            SumOfLogs.copy(source.sumLog, dest.sumLog);\n        }\n        if (source.sumsq == source.sumsqImpl) {\n         //The specific code has been omitted, but there is no error\n        } else {\n            SumOfSquares.copy(source.sumsq, dest.sumsq);\n        }\n    }\n}"}