{"KMeansPlusPlusClusterer": "public class KMeansPlusPlusClusterer<T extends Clusterable<T>> {\n\n    /** Strategies to use for replacing an empty cluster. */\n    public static enum EmptyClusterStrategy {\n\n        /** Split the cluster with largest distance variance. */\n        LARGEST_VARIANCE,\n\n        /** Split the cluster with largest number of points. */\n        LARGEST_POINTS_NUMBER,\n\n        /** Create a cluster around the point farthest from its centroid. */\n        FARTHEST_POINT,\n\n        /** Generate an error. */\n        ERROR\n\n    }\n\n    /** Random generator for choosing initial centers. */\n    private final Random random;\n\n    /** Selected strategy for empty clusters. */\n    private final EmptyClusterStrategy emptyStrategy;\n\n    /** Build a clusterer.\n     * <p>\n     * The default strategy for handling empty clusters that may appear during\n     * algorithm iterations is to split the cluster with largest distance variance.\n     * </p>\n     * @param random random generator to use for choosing initial centers\n     */\n    public KMeansPlusPlusClusterer(final Random random) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /** Build a clusterer.\n     * @param random random generator to use for choosing initial centers\n     * @param emptyStrategy strategy to use for handling empty clusters that\n     * may appear during algorithm iterations\n     * @since 2.2\n     */\n    public KMeansPlusPlusClusterer(final Random random, final EmptyClusterStrategy emptyStrategy) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Runs the K-means++ clustering algorithm.\n     *\n     * @param points the points to cluster\n     * @param k the number of clusters to split the data into\n     * @param maxIterations the maximum number of iterations to run the algorithm\n     *     for.  If negative, no maximum will be used\n     * @return a list of clusters containing the points\n     */\n    public List<Cluster<T>> cluster(final Collection<T> points,\n                                    final int k, final int maxIterations) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Adds the given points to the closest {@link Cluster}.\n     *\n     * @param <T> type of the points to cluster\n     * @param clusters the {@link Cluster}s to add the points to\n     * @param points the points to add to the given {@link Cluster}s\n     */\n    private static <T extends Clusterable<T>> void\n        assignPointsToClusters(final Collection<Cluster<T>> clusters, final Collection<T> points) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Use K-means++ to choose the initial centers.\n     *\n     * @param <T> type of the points to cluster\n     * @param points the points to choose the initial centers from\n     * @param k the number of centers to choose\n     * @param random random generator to use\n     * @return the initial centers\n     */\n    private static <T extends Clusterable<T>> List<Cluster<T>>\n        chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Get a random point from the {@link Cluster} with the largest distance variance.\n     *\n     * @param clusters the {@link Cluster}s to search\n     * @return a random point from the selected cluster\n     */\n    private T getPointFromLargestVarianceCluster(final Collection<Cluster<T>> clusters) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Get a random point from the {@link Cluster} with the largest number of points\n     *\n     * @param clusters the {@link Cluster}s to search\n     * @return a random point from the selected cluster\n     */\n    private T getPointFromLargestNumberCluster(final Collection<Cluster<T>> clusters) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Get the point farthest to its cluster center\n     *\n     * @param clusters the {@link Cluster}s to search\n     * @return point farthest to its cluster center\n     */\n    private T getFarthestPoint(final Collection<Cluster<T>> clusters) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the nearest {@link Cluster} to the given point\n     *\n     * @param <T> type of the points to cluster\n     * @param clusters the {@link Cluster}s to search\n     * @param point the point to find the nearest {@link Cluster} for\n     * @return the nearest {@link Cluster} to the given point\n     */\n    private static <T extends Clusterable<T>> Cluster<T>\n        getNearestCluster(final Collection<Cluster<T>> clusters, final T point) {\n         //The specific code has been omitted, but there is no error\n        }\n\n}"}