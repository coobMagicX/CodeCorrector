{"MultiplePiePlot": "public class MultiplePiePlot extends Plot implements Cloneable, Serializable {\n\n    /** For serialization. */\n    private static final long serialVersionUID = -355377800470807389L;\n\n    /** The chart object that draws the individual pie charts. */\n    private JFreeChart pieChart;\n\n    /** The dataset. */\n    private CategoryDataset dataset;\n\n    /** The data extract order (by row or by column). */\n    private TableOrder dataExtractOrder;\n\n    /** The pie section limit percentage. */\n    private double limit = 0.0;\n\n    /**\n     * The key for the aggregated items.\n     * @since 1.0.2\n     */\n    private Comparable aggregatedItemsKey;\n\n    /**\n     * The paint for the aggregated items.\n     * @since 1.0.2\n     */\n    private transient Paint aggregatedItemsPaint;\n\n    /**\n     * The colors to use for each section.\n     * @since 1.0.2\n     */\n    private transient Map sectionPaints;\n\n    /**\n     * Creates a new plot with no data.\n     */\n    public MultiplePiePlot() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Creates a new plot.\n     *\n     * @param dataset  the dataset (<code>null</code> permitted).\n     */\n    public MultiplePiePlot(CategoryDataset dataset) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the dataset used by the plot.\n     *\n     * @return The dataset (possibly <code>null</code>).\n     */\n    public CategoryDataset getDataset() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the dataset used by the plot and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param dataset  the dataset (<code>null</code> permitted).\n     */\n    public void setDataset(CategoryDataset dataset) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the pie chart that is used to draw the individual pie plots.\n     *\n     * @return The pie chart (never <code>null</code>).\n     *\n     * @see #setPieChart(JFreeChart)\n     */\n    public JFreeChart getPieChart() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the chart that is used to draw the individual pie plots.  The\n     * chart's plot must be an instance of {@link PiePlot}.\n     *\n     * @param pieChart  the pie chart (<code>null</code> not permitted).\n     *\n     * @see #getPieChart()\n     */\n    public void setPieChart(JFreeChart pieChart) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the data extract order (by row or by column).\n     *\n     * @return The data extract order (never <code>null</code>).\n     */\n    public TableOrder getDataExtractOrder() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the data extract order (by row or by column) and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param order  the order (<code>null</code> not permitted).\n     */\n    public void setDataExtractOrder(TableOrder order) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the limit (as a percentage) below which small pie sections are\n     * aggregated.\n     *\n     * @return The limit percentage.\n     */\n    public double getLimit() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the limit below which pie sections are aggregated.\n     * Set this to 0.0 if you don't want any aggregation to occur.\n     *\n     * @param limit  the limit percent.\n     */\n    public void setLimit(double limit) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the key for aggregated items in the pie plots, if there are any.\n     * The default value is \"Other\".\n     *\n     * @return The aggregated items key.\n     *\n     * @since 1.0.2\n     */\n    public Comparable getAggregatedItemsKey() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the key for aggregated items in the pie plots.  You must ensure\n     * that this doesn't clash with any keys in the dataset.\n     *\n     * @param key  the key (<code>null</code> not permitted).\n     *\n     * @since 1.0.2\n     */\n    public void setAggregatedItemsKey(Comparable key) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the paint used to draw the pie section representing the\n     * aggregated items.  The default value is <code>Color.lightGray</code>.\n     *\n     * @return The paint.\n     *\n     * @since 1.0.2\n     */\n    public Paint getAggregatedItemsPaint() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the paint used to draw the pie section representing the aggregated\n     * items and sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint (<code>null</code> not permitted).\n     *\n     * @since 1.0.2\n     */\n    public void setAggregatedItemsPaint(Paint paint) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns a short string describing the type of plot.\n     *\n     * @return The plot type.\n     */\n    public String getPlotType() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Draws the plot on a Java 2D graphics device (such as the screen or a\n     * printer).\n     *\n     * @param g2  the graphics device.\n     * @param area  the area within which the plot should be drawn.\n     * @param anchor  the anchor point (<code>null</code> permitted).\n     * @param parentState  the state from the parent plot, if there is one.\n     * @param info  collects info about the drawing.\n     */\n    public void draw(Graphics2D g2,\n                     Rectangle2D area,\n                     Point2D anchor,\n                     PlotState parentState,\n                     PlotRenderingInfo info) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * For each key in the dataset, check the <code>sectionPaints</code>\n     * cache to see if a paint is associated with that key and, if not,\n     * fetch one from the drawing supplier.  These colors are cached so that\n     * the legend and all the subplots use consistent colors.\n     */\n    private void prefetchSectionPaints() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns a collection of legend items for the pie chart.\n     *\n     * @return The legend items.\n     */\n    public LegendItemCollection getLegendItems() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Tests this plot for equality with an arbitrary object.  Note that the\n     * plot's dataset is not considered in the equality test.\n     *\n     * @param obj  the object (<code>null</code> permitted).\n     *\n     * @return <code>true</code> if this plot is equal to <code>obj</code>, and\n     *     <code>false</code> otherwise.\n     */\n    public boolean equals(Object obj) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n    private void writeObject(ObjectOutputStream stream) throws IOException {\n        stream.defaultWriteObject();\n        SerialUtilities.writePaint(this.aggregatedItemsPaint, stream);\n    }\n\n    /**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n    private void readObject(ObjectInputStream stream)\n        throws IOException, ClassNotFoundException {\n        stream.defaultReadObject();\n        this.aggregatedItemsPaint = SerialUtilities.readPaint(stream);\n        this.sectionPaints = new HashMap();\n    }\n\n\n}"}