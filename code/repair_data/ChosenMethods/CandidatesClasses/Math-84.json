{"MultiDirectional": "public class MultiDirectional extends DirectSearchOptimizer {\n\n    /** Expansion coefficient. */\n    private final double khi;\n\n    /** Contraction coefficient. */\n    private final double gamma;\n\n    /** Build a multi-directional optimizer with default coefficients.\n     * <p>The default values are 2.0 for khi and 0.5 for gamma.</p>\n     */\n    public MultiDirectional() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /** Build a multi-directional optimizer with specified coefficients.\n     * @param khi expansion coefficient\n     * @param gamma contraction coefficient\n     */\n    public MultiDirectional(final double khi, final double gamma) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /** {@inheritDoc} */\n    @Override\n    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    }\n\n    /** Compute and evaluate a new simplex.\n     * @param original original simplex (to be preserved)\n     * @param coeff linear coefficient\n     * @param comparator comparator to use to sort simplex vertices from best to poorest\n     * @return best point in the transformed simplex\n     * @exception FunctionEvaluationException if the function cannot be evaluated at\n     * some point\n     * @exception OptimizationException if the maximal number of evaluations is exceeded\n     */\n    private RealPointValuePair evaluateNewSimplex(final RealPointValuePair[] original,\n                                              final double coeff,\n                                              final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException {\n\n        final double[] xSmallest = original[0].getPointRef();\n        final int n = xSmallest.length;\n\n        // create the linearly transformed simplex\n        simplex = new RealPointValuePair[n + 1];\n        simplex[0] = original[0];\n        for (int i = 1; i <= n; ++i) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        // evaluate it\n        evaluateSimplex(comparator);\n        return simplex[0];\n\n    }\n\n}"}