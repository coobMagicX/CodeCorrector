{"DateTimeFormatterBuilder": "public class DateTimeFormatterBuilder {\n         //The specific code has been omitted, but there is no error\n        }", "CharacterLiteral": "    static class CharacterLiteral\n            implements DateTimePrinter, DateTimeParser {\n\n        private final char iValue;\n\n        CharacterLiteral(char value) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public int estimatePrintedLength() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public void printTo(\n                StringBuffer buf, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public void printTo(\n                Writer out, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale) throws IOException {\n            out.write(iValue);\n        }\n\n        public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException {\n            out.write(iValue);\n        }\n\n        public int estimateParsedLength() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n         //The specific code has been omitted, but there is no error\n        }\n    }", "StringLiteral": "    static class StringLiteral\n            implements DateTimePrinter, DateTimeParser {\n\n        private final String iValue;\n\n        StringLiteral(String value) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public int estimatePrintedLength() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public void printTo(\n                StringBuffer buf, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public void printTo(\n                Writer out, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale) throws IOException {\n            out.write(iValue);\n        }\n\n        public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException {\n            out.write(iValue);\n        }\n\n        public int estimateParsedLength() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n         //The specific code has been omitted, but there is no error\n        }\n    }", "NumberFormatter": "    static abstract class NumberFormatter\n            implements DateTimePrinter, DateTimeParser {\n        protected final DateTimeFieldType iFieldType;\n        protected final int iMaxParsedDigits;\n        protected final boolean iSigned;\n\n        NumberFormatter(DateTimeFieldType fieldType,\n                int maxParsedDigits, boolean signed) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public int estimateParsedLength() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n         //The specific code has been omitted, but there is no error\n        }\n    }", "UnpaddedNumber": "    static class UnpaddedNumber extends NumberFormatter {\n\n        protected UnpaddedNumber(DateTimeFieldType fieldType,\n                       int maxParsedDigits, boolean signed)\n        {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public int estimatePrintedLength() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public void printTo(\n                StringBuffer buf, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public void printTo(\n                Writer out, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale) throws IOException {\n            try {\n                DateTimeField field = iFieldType.getField(chrono);\n                FormatUtils.writeUnpaddedInteger(out, field.get(instant));\n            } catch (RuntimeException e) {\n         //The specific code has been omitted, but there is no error\n        }\n        }\n\n        public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException {\n            if (partial.isSupported(iFieldType)) {\n                try {\n                    FormatUtils.writeUnpaddedInteger(out, partial.get(iFieldType));\n                } catch (RuntimeException e) {\n         //The specific code has been omitted, but there is no error\n        }\n            } else {\n                out.write('\\ufffd');\n            }\n        }\n    }", "PaddedNumber": "    static class PaddedNumber extends NumberFormatter {\n\n        protected final int iMinPrintedDigits;\n\n        protected PaddedNumber(DateTimeFieldType fieldType, int maxParsedDigits,\n                     boolean signed, int minPrintedDigits)\n        {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public int estimatePrintedLength() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public void printTo(\n                StringBuffer buf, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public void printTo(\n                Writer out, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale) throws IOException {\n            try {\n                DateTimeField field = iFieldType.getField(chrono);\n                FormatUtils.writePaddedInteger(out, field.get(instant), iMinPrintedDigits);\n            } catch (RuntimeException e) {\n         //The specific code has been omitted, but there is no error\n        }\n        }\n\n        public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException {\n            if (partial.isSupported(iFieldType)) {\n                try {\n                    FormatUtils.writePaddedInteger(out, partial.get(iFieldType), iMinPrintedDigits);\n                } catch (RuntimeException e) {\n         //The specific code has been omitted, but there is no error\n        }\n            } else {\n                printUnknownString(out, iMinPrintedDigits);\n            }\n        }\n    }", "FixedNumber": "    static class FixedNumber extends PaddedNumber {\n\n        protected FixedNumber(DateTimeFieldType fieldType, int numDigits, boolean signed) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n         //The specific code has been omitted, but there is no error\n        }\n    }", "TwoDigitYear": "    static class TwoDigitYear\n            implements DateTimePrinter, DateTimeParser {\n\n        /** The field to print/parse. */\n        private final DateTimeFieldType iType;\n        /** The pivot year. */\n        private final int iPivot;\n        private final boolean iLenientParse;\n\n        TwoDigitYear(DateTimeFieldType type, int pivot, boolean lenientParse) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public int estimateParsedLength() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n         //The specific code has been omitted, but there is no error\n        }\n        \n        public int estimatePrintedLength() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public void printTo(\n                StringBuffer buf, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public void printTo(\n                Writer out, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale) throws IOException {\n            int year = getTwoDigitYear(instant, chrono);\n            if (year < 0) {\n         //The specific code has been omitted, but there is no error\n        } else {\n                FormatUtils.writePaddedInteger(out, year, 2);\n            }\n        }\n\n        private int getTwoDigitYear(long instant, Chronology chrono) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException {\n            int year = getTwoDigitYear(partial);\n            if (year < 0) {\n         //The specific code has been omitted, but there is no error\n        } else {\n                FormatUtils.writePaddedInteger(out, year, 2);\n            }\n        }\n\n        private int getTwoDigitYear(ReadablePartial partial) {\n         //The specific code has been omitted, but there is no error\n        }\n    }", "TextField": "    static class TextField\n            implements DateTimePrinter, DateTimeParser {\n\n        private static Map<Locale, Map<DateTimeFieldType, Object[]>> cParseCache =\n                    new HashMap<Locale, Map<DateTimeFieldType, Object[]>>();\n        private final DateTimeFieldType iFieldType;\n        private final boolean iShort;\n\n        TextField(DateTimeFieldType fieldType, boolean isShort) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public int estimatePrintedLength() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public void printTo(\n                StringBuffer buf, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public void printTo(\n                Writer out, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale) throws IOException {\n            try {\n                out.write(print(instant, chrono, locale));\n            } catch (RuntimeException e) {\n         //The specific code has been omitted, but there is no error\n        }\n        }\n\n        public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException {\n            try {\n                out.write(print(partial, locale));\n            } catch (RuntimeException e) {\n         //The specific code has been omitted, but there is no error\n        }\n        }\n\n        private String print(long instant, Chronology chrono, Locale locale) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        private String print(ReadablePartial partial, Locale locale) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public int estimateParsedLength() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n         //The specific code has been omitted, but there is no error\n        }\n    }", "Fraction": "    static class Fraction\n            implements DateTimePrinter, DateTimeParser {\n\n        private final DateTimeFieldType iFieldType;\n        protected int iMinDigits;\n        protected int iMaxDigits;\n\n        protected Fraction(DateTimeFieldType fieldType, int minDigits, int maxDigits) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public int estimatePrintedLength() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public void printTo(\n                StringBuffer buf, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public void printTo(\n                Writer out, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale) throws IOException {\n            printTo(null, out, instant, chrono);\n        }\n\n        public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException {\n            // removed check whether field is supported, as input field is typically\n            // secondOfDay which is unsupported by TimeOfDay\n            long millis = partial.getChronology().set(partial, 0L);\n            printTo(null, out, millis, partial.getChronology());\n        }\n\n        protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono)\n            throws IOException\n        {\n            DateTimeField field = iFieldType.getField(chrono);\n            int minDigits = iMinDigits;\n\n            long fraction;\n            try {\n                fraction = field.remainder(instant);\n            } catch (RuntimeException e) {\n         //The specific code has been omitted, but there is no error\n        }\n\n            if (fraction == 0) {\n         //The specific code has been omitted, but there is no error\n        }\n\n            String str;\n            long[] fractionData = getFractionData(fraction, field);\n            long scaled = fractionData[0];\n            int maxDigits = (int) fractionData[1];\n            \n            if ((scaled & 0x7fffffff) == scaled) {\n                str = Integer.toString((int) scaled);\n            } else {\n                str = Long.toString(scaled);\n            }\n\n            int length = str.length();\n            int digits = maxDigits;\n            while (length < digits) {\n         //The specific code has been omitted, but there is no error\n        }\n\n            if (minDigits < digits) {\n         //The specific code has been omitted, but there is no error\n        }\n\n            if (buf != null) {\n         //The specific code has been omitted, but there is no error\n        } else {\n                out.write(str);\n            }\n        }\n        \n        private long[] getFractionData(long fraction, DateTimeField field) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public int estimateParsedLength() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n         //The specific code has been omitted, but there is no error\n        }\n    }", "TimeZoneOffset": "    static class TimeZoneOffset\n            implements DateTimePrinter, DateTimeParser {\n\n        private final String iZeroOffsetPrintText;\n        private final String iZeroOffsetParseText;\n        private final boolean iShowSeparators;\n        private final int iMinFields;\n        private final int iMaxFields;\n\n        TimeZoneOffset(String zeroOffsetPrintText, String zeroOffsetParseText,\n                                boolean showSeparators,\n                                int minFields, int maxFields)\n        {\n         //The specific code has been omitted, but there is no error\n        }\n            \n        public int estimatePrintedLength() {\n         //The specific code has been omitted, but there is no error\n        }\n        \n        public void printTo(\n                StringBuffer buf, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale) {\n         //The specific code has been omitted, but there is no error\n        }\n        \n        public void printTo(\n                Writer out, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale) throws IOException {\n            if (displayZone == null) {\n         //The specific code has been omitted, but there is no error\n        }\n            if (displayOffset == 0 && iZeroOffsetPrintText != null) {\n         //The specific code has been omitted, but there is no error\n        }\n            if (displayOffset >= 0) {\n         //The specific code has been omitted, but there is no error\n        } else {\n                out.write('-');\n                displayOffset = -displayOffset;\n            }\n\n            int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;\n            FormatUtils.writePaddedInteger(out, hours, 2);\n            if (iMaxFields == 1) {\n         //The specific code has been omitted, but there is no error\n        }\n            displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;\n            if (displayOffset == 0 && iMinFields == 1) {\n         //The specific code has been omitted, but there is no error\n        }\n\n            int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;\n            if (iShowSeparators) {\n         //The specific code has been omitted, but there is no error\n        }\n            FormatUtils.writePaddedInteger(out, minutes, 2);\n            if (iMaxFields == 2) {\n         //The specific code has been omitted, but there is no error\n        }\n            displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\n            if (displayOffset == 0 && iMinFields == 2) {\n         //The specific code has been omitted, but there is no error\n        }\n\n            int seconds = displayOffset / DateTimeConstants.MILLIS_PER_SECOND;\n            if (iShowSeparators) {\n         //The specific code has been omitted, but there is no error\n        }\n            FormatUtils.writePaddedInteger(out, seconds, 2);\n            if (iMaxFields == 3) {\n         //The specific code has been omitted, but there is no error\n        }\n            displayOffset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;\n            if (displayOffset == 0 && iMinFields == 3) {\n         //The specific code has been omitted, but there is no error\n        }\n\n            if (iShowSeparators) {\n         //The specific code has been omitted, but there is no error\n        }\n            FormatUtils.writePaddedInteger(out, displayOffset, 3);\n        }\n\n        public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException {\n            // no zone info\n        }\n\n        public int estimateParsedLength() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * Returns actual amount of digits to parse, but no more than original\n         * 'amount' parameter.\n         */\n        private int digitCount(String text, int position, int amount) {\n         //The specific code has been omitted, but there is no error\n        }\n    }", "TimeZoneName": "    static class TimeZoneName\n            implements DateTimePrinter, DateTimeParser {\n\n        static final int LONG_NAME = 0;\n        static final int SHORT_NAME = 1;\n\n        private final Map<String, DateTimeZone> iParseLookup;\n        private final int iType;\n\n        TimeZoneName(int type, Map<String, DateTimeZone> parseLookup) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public int estimatePrintedLength() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public void printTo(\n                StringBuffer buf, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public void printTo(\n                Writer out, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale) throws IOException {\n            out.write(print(instant - displayOffset, displayZone, locale));\n        }\n\n        private String print(long instant, DateTimeZone displayZone, Locale locale) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException {\n            // no zone info\n        }\n\n        public int estimateParsedLength() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n         //The specific code has been omitted, but there is no error\n        }\n    }", "Composite": "    static class Composite\n            implements DateTimePrinter, DateTimeParser {\n\n        private final DateTimePrinter[] iPrinters;\n        private final DateTimeParser[] iParsers;\n\n        private final int iPrintedLengthEstimate;\n        private final int iParsedLengthEstimate;\n\n        Composite(List<Object> elementPairs) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public int estimatePrintedLength() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public void printTo(\n                StringBuffer buf, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public void printTo(\n                Writer out, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale) throws IOException {\n            DateTimePrinter[] elements = iPrinters;\n            if (elements == null) {\n         //The specific code has been omitted, but there is no error\n        }\n\n            if (locale == null) {\n         //The specific code has been omitted, but there is no error\n        }\n\n            int len = elements.length;\n            for (int i = 0; i < len; i++) {\n         //The specific code has been omitted, but there is no error\n        }\n        }\n\n        public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException {\n            DateTimePrinter[] elements = iPrinters;\n            if (elements == null) {\n         //The specific code has been omitted, but there is no error\n        }\n\n            if (locale == null) {\n         //The specific code has been omitted, but there is no error\n        }\n\n            int len = elements.length;\n            for (int i=0; i<len; i++) {\n         //The specific code has been omitted, but there is no error\n        }\n        }\n\n        public int estimateParsedLength() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        boolean isPrinter() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        boolean isParser() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * Processes the element pairs, putting results into the given printer\n         * and parser lists.\n         */\n        private void decompose(List<Object> elementPairs, List<Object> printerList, List<Object> parserList) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        private void addArrayToList(List<Object> list, Object[] array) {\n         //The specific code has been omitted, but there is no error\n        }\n    }", "MatchingParser": "    static class MatchingParser\n            implements DateTimeParser {\n\n        private final DateTimeParser[] iParsers;\n        private final int iParsedLengthEstimate;\n\n        MatchingParser(DateTimeParser[] parsers) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public int estimateParsedLength() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n         //The specific code has been omitted, but there is no error\n        }\n    }"}