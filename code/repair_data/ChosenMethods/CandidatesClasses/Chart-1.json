{"AbstractCategoryItemRenderer": "public abstract class AbstractCategoryItemRenderer extends AbstractRenderer\n        implements CategoryItemRenderer, Cloneable, PublicCloneable,\n        Serializable {\n\n    /** For serialization. */\n    private static final long serialVersionUID = 1247553218442497391L;\n\n    /** The plot that the renderer is assigned to. */\n    private CategoryPlot plot;\n\n    /** A list of item label generators (one per series). */\n    private ObjectList itemLabelGeneratorList;\n\n    /** The base item label generator. */\n    private CategoryItemLabelGenerator baseItemLabelGenerator;\n\n    /** A list of tool tip generators (one per series). */\n    private ObjectList toolTipGeneratorList;\n\n    /** The base tool tip generator. */\n    private CategoryToolTipGenerator baseToolTipGenerator;\n\n    /** A list of label generators (one per series). */\n    private ObjectList urlGeneratorList;\n\n    /** The base label generator. */\n    private CategoryURLGenerator baseURLGenerator;\n\n    /** The legend item label generator. */\n    private CategorySeriesLabelGenerator legendItemLabelGenerator;\n\n    /** The legend item tool tip generator. */\n    private CategorySeriesLabelGenerator legendItemToolTipGenerator;\n\n    /** The legend item URL generator. */\n    private CategorySeriesLabelGenerator legendItemURLGenerator;\n\n    /**\n     * Annotations to be drawn in the background layer ('underneath' the data\n     * items).\n     *\n     * @since 1.2.0\n     */\n    private List backgroundAnnotations;\n\n    /**\n     * Annotations to be drawn in the foreground layer ('on top' of the data\n     * items).\n     *\n     * @since 1.2.0\n     */\n    private List foregroundAnnotations;\n\n    /** The number of rows in the dataset (temporary record). */\n    private transient int rowCount;\n\n    /** The number of columns in the dataset (temporary record). */\n    private transient int columnCount;\n\n    /**\n     * Creates a new renderer with no tool tip generator and no URL generator.\n     * The defaults (no tool tip or URL generators) have been chosen to\n     * minimise the processing required to generate a default chart.  If you\n     * require tool tips or URLs, then you can easily add the required\n     * generators.\n     */\n    protected AbstractCategoryItemRenderer() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the number of passes through the dataset required by the\n     * renderer.  This method returns <code>1</code>, subclasses should\n     * override if they need more passes.\n     *\n     * @return The pass count.\n     */\n    public int getPassCount() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the plot that the renderer has been assigned to (where\n     * <code>null</code> indicates that the renderer is not currently assigned\n     * to a plot).\n     *\n     * @return The plot (possibly <code>null</code>).\n     *\n     * @see #setPlot(CategoryPlot)\n     */\n    public CategoryPlot getPlot() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the plot that the renderer has been assigned to.  This method is\n     * usually called by the {@link CategoryPlot}, in normal usage you\n     * shouldn't need to call this method directly.\n     *\n     * @param plot  the plot (<code>null</code> not permitted).\n     *\n     * @see #getPlot()\n     */\n    public void setPlot(CategoryPlot plot) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    // ITEM LABEL GENERATOR\n\n    /**\n     * Returns the item label generator for a data item.  This implementation\n     * returns the series item label generator if one is defined, otherwise\n     * it returns the default item label generator (which may be\n     * <code>null</code>).\n     *\n     * @param row  the row index (zero based).\n     * @param column  the column index (zero based).\n     * @param selected  is the item selected?\n     *\n     * @return The generator (possibly <code>null</code>).\n     *\n     * @since 1.2.0\n     */\n    public CategoryItemLabelGenerator getItemLabelGenerator(int row,\n            int column, boolean selected) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the item label generator for a series.\n     *\n     * @param series  the series index (zero based).\n     *\n     * @return The generator (possibly <code>null</code>).\n     *\n     * @see #setSeriesItemLabelGenerator(int, CategoryItemLabelGenerator)\n     */\n    public CategoryItemLabelGenerator getSeriesItemLabelGenerator(int series) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the item label generator for a series and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero based).\n     * @param generator  the generator (<code>null</code> permitted).\n     *\n     * @see #getSeriesItemLabelGenerator(int)\n     */\n    public void setSeriesItemLabelGenerator(int series,\n            CategoryItemLabelGenerator generator) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the item label generator for a series and, if requested, sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero based).\n     * @param generator  the generator (<code>null</code> permitted).\n     * @param notify  notify listeners?\n     *\n     * @since 1.2.0\n     *\n     * @see #getSeriesItemLabelGenerator(int)\n     */\n    public void setSeriesItemLabelGenerator(int series,\n            CategoryItemLabelGenerator generator, boolean notify) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the base item label generator.\n     *\n     * @return The generator (possibly <code>null</code>).\n     *\n     * @see #setBaseItemLabelGenerator(CategoryItemLabelGenerator)\n     */\n    public CategoryItemLabelGenerator getBaseItemLabelGenerator() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the base item label generator and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param generator  the generator (<code>null</code> permitted).\n     *\n     * @see #getBaseItemLabelGenerator()\n     */\n    public void setBaseItemLabelGenerator(\n            CategoryItemLabelGenerator generator) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the base item label generator and, if requested, sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param generator  the generator (<code>null</code> permitted).\n     * @param notify  notify listeners?\n     *\n     * @since 1.2.0\n     *\n     * @see #getBaseItemLabelGenerator()\n     */\n    public void setBaseItemLabelGenerator(\n            CategoryItemLabelGenerator generator, boolean notify) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    // TOOL TIP GENERATOR\n\n    /**\n     * Returns the tool tip generator that should be used for the specified\n     * item.  You can override this method if you want to return a different\n     * generator per item.\n     *\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     * @param selected  is the item selected?\n     *\n     * @return The generator (possibly <code>null</code>).\n     *\n     * @since 1.2.0\n     */\n    public CategoryToolTipGenerator getToolTipGenerator(int row, int column,\n            boolean selected) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the tool tip generator for the specified series (a \"layer 1\"\n     * generator).\n     *\n     * @param series  the series index (zero-based).\n     *\n     * @return The tool tip generator (possibly <code>null</code>).\n     *\n     * @see #setSeriesToolTipGenerator(int, CategoryToolTipGenerator)\n     */\n    public CategoryToolTipGenerator getSeriesToolTipGenerator(int series) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the tool tip generator for a series and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param generator  the generator (<code>null</code> permitted).\n     *\n     * @see #getSeriesToolTipGenerator(int)\n     */\n    public void setSeriesToolTipGenerator(int series,\n            CategoryToolTipGenerator generator) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the tool tip generator for a series and sends a\n     * {@link org.jfree.chart.event.RendererChangeEvent} to all registered\n     * listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param generator  the generator (<code>null</code> permitted).\n     * @param notify  notify listeners?\n     *\n     * @since 1.2.0\n     *\n     * @see #getSeriesToolTipGenerator(int)\n     */\n    public void setSeriesToolTipGenerator(int series,\n            CategoryToolTipGenerator generator, boolean notify) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the base tool tip generator (the \"layer 2\" generator).\n     *\n     * @return The tool tip generator (possibly <code>null</code>).\n     *\n     * @see #setBaseToolTipGenerator(CategoryToolTipGenerator)\n     */\n    public CategoryToolTipGenerator getBaseToolTipGenerator() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the base tool tip generator and sends a {@link RendererChangeEvent}\n     * to all registered listeners.\n     *\n     * @param generator  the generator (<code>null</code> permitted).\n     *\n     * @see #getBaseToolTipGenerator()\n     */\n    public void setBaseToolTipGenerator(CategoryToolTipGenerator generator) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the base tool tip generator and sends a {@link RendererChangeEvent}\n     * to all registered listeners.\n     *\n     * @param generator  the generator (<code>null</code> permitted).\n     * @param notify  notify listeners?\n     *\n     * @since 1.2.0\n     *\n     * @see #getBaseToolTipGenerator()\n     */\n    public void setBaseToolTipGenerator(CategoryToolTipGenerator generator,\n            boolean notify) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    // URL GENERATOR\n\n    /**\n     * Returns the URL generator for a data item.\n     *\n     * @param row  the row index (zero based).\n     * @param column  the column index (zero based).\n     * @param selected  is the item selected?\n     *\n     * @return The URL generator.\n     *\n     * @since 1.2.0\n     */\n    public CategoryURLGenerator getURLGenerator(int row, int column, boolean\n            selected) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the URL generator for a series.\n     *\n     * @param series  the series index (zero based).\n     *\n     * @return The URL generator for the series.\n     *\n     * @see #setSeriesURLGenerator(int, CategoryURLGenerator)\n     */\n    public CategoryURLGenerator getSeriesURLGenerator(int series) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the URL generator for a series and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero based).\n     * @param generator  the generator.\n     *\n     * @see #getSeriesURLGenerator(int)\n     */\n    public void setSeriesURLGenerator(int series,\n            CategoryURLGenerator generator) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the URL generator for a series and, if requested, sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero based).\n     * @param generator  the generator (<code>null</code> permitted).\n     * @param notify  notify listeners?\n     *\n     * @since 1.2.0\n     *\n     * @see #getSeriesURLGenerator(int)\n     */\n    public void setSeriesURLGenerator(int series,\n            CategoryURLGenerator generator, boolean notify) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the base item URL generator.\n     *\n     * @return The item URL generator.\n     *\n     * @see #setBaseURLGenerator(CategoryURLGenerator)\n     */\n    public CategoryURLGenerator getBaseURLGenerator() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the base item URL generator.\n     *\n     * @param generator  the item URL generator.\n     *\n     * @see #getBaseURLGenerator()\n     */\n    public void setBaseURLGenerator(CategoryURLGenerator generator) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the base item URL generator.\n     *\n     * @param generator  the item URL generator (<code>null</code> permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getBaseURLGenerator()\n     *\n     * @since 1.2.0\n     */\n    public void setBaseURLGenerator(CategoryURLGenerator generator,\n            boolean notify) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    // ANNOTATIONS\n\n    /**\n     * Adds an annotation and sends a {@link RendererChangeEvent} to all\n     * registered listeners.  The annotation is added to the foreground\n     * layer.\n     *\n     * @param annotation  the annotation (<code>null</code> not permitted).\n     *\n     * @since 1.2.0\n     */\n    public void addAnnotation(CategoryAnnotation annotation) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Adds an annotation to the specified layer.\n     *\n     * @param annotation  the annotation (<code>null</code> not permitted).\n     * @param layer  the layer (<code>null</code> not permitted).\n     *\n     * @since 1.2.0\n     */\n    public void addAnnotation(CategoryAnnotation annotation, Layer layer) {\n         //The specific code has been omitted, but there is no error\n        }\n    /**\n     * Removes the specified annotation and sends a {@link RendererChangeEvent}\n     * to all registered listeners.\n     *\n     * @param annotation  the annotation to remove (<code>null</code> not\n     *                    permitted).\n     *\n     * @return A boolean to indicate whether or not the annotation was\n     *         successfully removed.\n     *\n     * @since 1.2.0\n     */\n    public boolean removeAnnotation(CategoryAnnotation annotation) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Removes all annotations and sends a {@link RendererChangeEvent}\n     * to all registered listeners.\n     *\n     * @since 1.2.0\n     */\n    public void removeAnnotations() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the legend item label generator.\n     *\n     * @return The label generator (never <code>null</code>).\n     *\n     * @see #setLegendItemLabelGenerator(CategorySeriesLabelGenerator)\n     */\n    public CategorySeriesLabelGenerator getLegendItemLabelGenerator() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the legend item label generator and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param generator  the generator (<code>null</code> not permitted).\n     *\n     * @see #getLegendItemLabelGenerator()\n     */\n    public void setLegendItemLabelGenerator(\n            CategorySeriesLabelGenerator generator) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the legend item tool tip generator.\n     *\n     * @return The tool tip generator (possibly <code>null</code>).\n     *\n     * @see #setLegendItemToolTipGenerator(CategorySeriesLabelGenerator)\n     */\n    public CategorySeriesLabelGenerator getLegendItemToolTipGenerator() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the legend item tool tip generator and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param generator  the generator (<code>null</code> permitted).\n     *\n     * @see #setLegendItemToolTipGenerator(CategorySeriesLabelGenerator)\n     */\n    public void setLegendItemToolTipGenerator(\n            CategorySeriesLabelGenerator generator) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the legend item URL generator.\n     *\n     * @return The URL generator (possibly <code>null</code>).\n     *\n     * @see #setLegendItemURLGenerator(CategorySeriesLabelGenerator)\n     */\n    public CategorySeriesLabelGenerator getLegendItemURLGenerator() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the legend item URL generator and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param generator  the generator (<code>null</code> permitted).\n     *\n     * @see #getLegendItemURLGenerator()\n     */\n    public void setLegendItemURLGenerator(\n            CategorySeriesLabelGenerator generator) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the number of rows in the dataset.  This value is updated in the\n     * {@link AbstractCategoryItemRenderer#initialise} method.\n     *\n     * @return The row count.\n     */\n    public int getRowCount() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the number of columns in the dataset.  This value is updated in\n     * the {@link AbstractCategoryItemRenderer#initialise} method.\n     *\n     * @return The column count.\n     */\n    public int getColumnCount() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Creates a new state instance---this method is called from the\n     * {@link #initialise(Graphics2D, Rectangle2D, CategoryPlot, int,\n     * PlotRenderingInfo)} method.  Subclasses can override this method if\n     * they need to use a subclass of {\n         //The specific code has been omitted, but there is no error\n        }.\n     *\n     * @param info  collects plot rendering info (<code>null</code> permitted).\n     *\n     * @return The new state instance (never <code>null</code>).\n     *\n     * @since 1.0.5\n     */\n    protected CategoryItemRendererState createState(PlotRenderingInfo info) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Initialises the renderer and returns a state object that will be used\n     * for the remainder of the drawing process for a single chart.  The state\n     * object allows for the fact that the renderer may be used simultaneously\n     * by multiple threads (each thread will work with a separate state object).\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the data area.\n     * @param plot  the plot.\n     * @param info  an object for returning information about the structure of\n     *              the plot (<code>null</code> permitted).\n     *\n     * @return The renderer state.\n     */\n    public CategoryItemRendererState initialise(Graphics2D g2,\n            Rectangle2D dataArea, CategoryPlot plot, CategoryDataset dataset,\n            PlotRenderingInfo info) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the range of values the renderer requires to display all the\n     * items from the specified dataset.\n     *\n     * @param dataset  the dataset (<code>null</code> permitted).\n     *\n     * @return The range (or <code>null</code> if the dataset is\n     *         <code>null</code> or empty).\n     */\n    public Range findRangeBounds(CategoryDataset dataset) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the range of values the renderer requires to display all the\n     * items from the specified dataset.\n     *\n     * @param dataset  the dataset (<code>null</code> permitted).\n     * @param includeInterval  include the y-interval if the dataset has one.\n     *\n     * @return The range (<code>null</code> if the dataset is <code>null</code>\n     *         or empty).\n     *\n     * @since 1.0.13\n     */\n    protected Range findRangeBounds(CategoryDataset dataset,\n            boolean includeInterval) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the Java2D coordinate for the middle of the specified data item.\n     *\n     * @param rowKey  the row key.\n     * @param columnKey  the column key.\n     * @param dataset  the dataset.\n     * @param axis  the axis.\n     * @param area  the data area.\n     * @param edge  the edge along which the axis lies.\n     *\n     * @return The Java2D coordinate for the middle of the item.\n     *\n     * @since 1.0.11\n     */\n    public double getItemMiddle(Comparable rowKey, Comparable columnKey,\n            CategoryDataset dataset, CategoryAxis axis, Rectangle2D area,\n            RectangleEdge edge) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Draws a background for the data area.  The default implementation just\n     * gets the plot to draw the background, but some renderers will override\n     * this behaviour.\n     *\n     * @param g2  the graphics device.\n     * @param plot  the plot.\n     * @param dataArea  the data area.\n     */\n    public void drawBackground(Graphics2D g2,\n                               CategoryPlot plot,\n                               Rectangle2D dataArea) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Draws an outline for the data area.  The default implementation just\n     * gets the plot to draw the outline, but some renderers will override this\n     * behaviour.\n     *\n     * @param g2  the graphics device.\n     * @param plot  the plot.\n     * @param dataArea  the data area.\n     */\n    public void drawOutline(Graphics2D g2,\n                            CategoryPlot plot,\n                            Rectangle2D dataArea) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Draws a grid line against the domain axis.\n     * <P>\n     * Note that this default implementation assumes that the horizontal axis\n     * is the domain axis. If this is not the case, you will need to override\n     * this method.\n     *\n     * @param g2  the graphics device.\n     * @param plot  the plot.\n     * @param dataArea  the area for plotting data (not yet adjusted for any\n     *                  3D effect).\n     * @param value  the Java2D value at which the grid line should be drawn.\n     * @param paint  the paint (<code>null</code> not permitted).\n     * @param stroke  the stroke (<code>null</code> not permitted).\n     *\n     * @see #drawRangeGridline(Graphics2D, CategoryPlot, ValueAxis,\n     *     Rectangle2D, double)\n     *\n     * @since 1.2.0\n     */\n    public void drawDomainLine(Graphics2D g2, CategoryPlot plot,\n            Rectangle2D dataArea, double value, Paint paint, Stroke stroke) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Draws a line perpendicular to the range axis.\n     *\n     * @param g2  the graphics device.\n     * @param plot  the plot.\n     * @param axis  the value axis.\n     * @param dataArea  the area for plotting data (not yet adjusted for any 3D\n     *                  effect).\n     * @param value  the value at which the grid line should be drawn.\n     * @param paint  the paint (<code>null</code> not permitted).\n     * @param stroke  the stroke (<code>null</code> not permitted).\n     *\n     * @see #drawRangeGridline\n     *\n     * @since 1.0.13\n     */\n    public void drawRangeLine(Graphics2D g2, CategoryPlot plot, ValueAxis axis,\n            Rectangle2D dataArea, double value, Paint paint, Stroke stroke) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Draws a marker for the domain axis.\n     *\n     * @param g2  the graphics device (not <code>null</code>).\n     * @param plot  the plot (not <code>null</code>).\n     * @param axis  the range axis (not <code>null</code>).\n     * @param marker  the marker to be drawn (not <code>null</code>).\n     * @param dataArea  the area inside the axes (not <code>null</code>).\n     *\n     * @see #drawRangeMarker(Graphics2D, CategoryPlot, ValueAxis, Marker,\n     *     Rectangle2D)\n     */\n    public void drawDomainMarker(Graphics2D g2,\n                                 CategoryPlot plot,\n                                 CategoryAxis axis,\n                                 CategoryMarker marker,\n                                 Rectangle2D dataArea) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Draws a marker for the range axis.\n     *\n     * @param g2  the graphics device (not <code>null</code>).\n     * @param plot  the plot (not <code>null</code>).\n     * @param axis  the range axis (not <code>null</code>).\n     * @param marker  the marker to be drawn (not <code>null</code>).\n     * @param dataArea  the area inside the axes (not <code>null</code>).\n     *\n     * @see #drawDomainMarker(Graphics2D, CategoryPlot, CategoryAxis,\n     *     CategoryMarker, Rectangle2D)\n     */\n    public void drawRangeMarker(Graphics2D g2,\n                                CategoryPlot plot,\n                                ValueAxis axis,\n                                Marker marker,\n                                Rectangle2D dataArea) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Calculates the (x, y) coordinates for drawing the label for a marker on\n     * the range axis.\n     *\n     * @param g2  the graphics device.\n     * @param orientation  the plot orientation.\n     * @param dataArea  the data area.\n     * @param markerArea  the rectangle surrounding the marker.\n     * @param markerOffset  the marker offset.\n     * @param labelOffsetType  the label offset type.\n     * @param anchor  the label anchor.\n     *\n     * @return The coordinates for drawing the marker label.\n     */\n    protected Point2D calculateDomainMarkerTextAnchorPoint(Graphics2D g2,\n                                      PlotOrientation orientation,\n                                      Rectangle2D dataArea,\n                                      Rectangle2D markerArea,\n                                      RectangleInsets markerOffset,\n                                      LengthAdjustmentType labelOffsetType,\n                                      RectangleAnchor anchor) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Calculates the (x, y) coordinates for drawing a marker label.\n     *\n     * @param g2  the graphics device.\n     * @param orientation  the plot orientation.\n     * @param dataArea  the data area.\n     * @param markerArea  the rectangle surrounding the marker.\n     * @param markerOffset  the marker offset.\n     * @param labelOffsetType  the label offset type.\n     * @param anchor  the label anchor.\n     *\n     * @return The coordinates for drawing the marker label.\n     */\n    protected Point2D calculateRangeMarkerTextAnchorPoint(Graphics2D g2,\n                                      PlotOrientation orientation,\n                                      Rectangle2D dataArea,\n                                      Rectangle2D markerArea,\n                                      RectangleInsets markerOffset,\n                                      LengthAdjustmentType labelOffsetType,\n                                      RectangleAnchor anchor) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns a legend item for a series.  This default implementation will\n     * return <code>null</code> if {@link #isSeriesVisible(int)} or\n     * {@link #isSeriesVisibleInLegend(int)} returns <code>false</code>.\n     *\n     * @param datasetIndex  the dataset index (zero-based).\n     * @param series  the series index (zero-based).\n     *\n     * @return The legend item (possibly <code>null</code>).\n     *\n     * @see #getLegendItems()\n     */\n    public LegendItem getLegendItem(int datasetIndex, int series) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Tests this renderer for equality with another object.\n     *\n     * @param obj  the object.\n     *\n     * @return <code>true</code> or <code>false</code>.\n     */\n    public boolean equals(Object obj) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns a hash code for the renderer.\n     *\n     * @return The hash code.\n     */\n    public int hashCode() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the drawing supplier from the plot.\n     *\n     * @return The drawing supplier (possibly <code>null</code>).\n     */\n    public DrawingSupplier getDrawingSupplier() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Considers the current (x, y) coordinate and updates the crosshair point\n     * if it meets the criteria (usually means the (x, y) coordinate is the\n     * closest to the anchor point so far).\n     *\n     * @param crosshairState  the crosshair state (<code>null</code> permitted,\n     *                        but the method does nothing in that case).\n     * @param rowKey  the row key.\n     * @param columnKey  the column key.\n     * @param value  the data value.\n     * @param datasetIndex  the dataset index.\n     * @param transX  the x-value translated to Java2D space.\n     * @param transY  the y-value translated to Java2D space.\n     * @param orientation  the plot orientation (<code>null</code> not\n     *                     permitted).\n     *\n     * @since 1.0.11\n     */\n    protected void updateCrosshairValues(CategoryCrosshairState crosshairState,\n            Comparable rowKey, Comparable columnKey, double value,\n            int datasetIndex,\n            double transX, double transY, PlotOrientation orientation) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Draws an item label.\n     *\n     * @param g2  the graphics device.\n     * @param orientation  the orientation.\n     * @param dataset  the dataset.\n     * @param row  the row.\n     * @param column  the column.\n     * @param selected  is the item selected?\n     * @param x  the x coordinate (in Java2D space).\n     * @param y  the y coordinate (in Java2D space).\n     * @param negative  indicates a negative value (which affects the item\n     *                  label position).\n     *\n     * @since 1.2.0\n     */\n    protected void drawItemLabel(Graphics2D g2, PlotOrientation orientation,\n            CategoryDataset dataset, int row, int column, boolean selected,\n            double x, double y, boolean negative) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Draws all the annotations for the specified layer.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the data area.\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param layer  the layer.\n     * @param info  the plot rendering info.\n     *\n     * @since 1.2.0\n     */\n    public void drawAnnotations(Graphics2D g2, Rectangle2D dataArea,\n            CategoryAxis domainAxis, ValueAxis rangeAxis, Layer layer,\n            PlotRenderingInfo info) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns an independent copy of the renderer.  The <code>plot</code>\n     * reference is shallow copied.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException  can be thrown if one of the objects\n     *         belonging to the renderer does not support cloning (for example,\n     *         an item label generator).\n     */\n    public Object clone() throws CloneNotSupportedException {\n\n        AbstractCategoryItemRenderer clone\n                = (AbstractCategoryItemRenderer) super.clone();\n\n\n        if (this.itemLabelGeneratorList != null) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        if (this.baseItemLabelGenerator != null) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        if (this.toolTipGeneratorList != null) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        if (this.baseToolTipGenerator != null) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        if (this.urlGeneratorList != null) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        if (this.baseURLGenerator != null) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        if (this.legendItemLabelGenerator instanceof PublicCloneable) {\n         //The specific code has been omitted, but there is no error\n        }\n        if (this.legendItemToolTipGenerator instanceof PublicCloneable) {\n         //The specific code has been omitted, but there is no error\n        }\n        if (this.legendItemURLGenerator instanceof PublicCloneable) {\n         //The specific code has been omitted, but there is no error\n        }\n        return clone;\n    }\n\n    /**\n     * Returns the domain axis that is used for the specified dataset.\n     *\n     * @param plot  the plot (<code>null</code> not permitted).\n     * @param dataset  the dataset (<code>null</code> not permitted).\n     *\n     * @return A domain axis.\n     */\n    protected CategoryAxis getDomainAxis(CategoryPlot plot, \n            CategoryDataset dataset) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns a range axis for a plot.\n     *\n     * @param plot  the plot.\n     * @param index  the axis index.\n     *\n     * @return A range axis.\n     */\n    protected ValueAxis getRangeAxis(CategoryPlot plot, int index) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns a (possibly empty) collection of legend items for the series\n     * that this renderer is responsible for drawing.\n     *\n     * @return The legend item collection (never <code>null</code>).\n     *\n     * @see #getLegendItem(int, int)\n     */\n    public LegendItemCollection getLegendItems() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Adds an entity with the specified hotspot.\n     *\n     * @param entities  the entity collection.\n     * @param hotspot  the hotspot (<code>null</code> not permitted).\n     * @param dataset  the dataset.\n     * @param row  the row index.\n     * @param column  the column index.\n     * @param selected  is the item selected?\n     *\n     * @since 1.2.0\n     */\n    protected void addEntity(EntityCollection entities, Shape hotspot,\n            CategoryDataset dataset, int row, int column, boolean selected) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Adds an entity to the collection.\n     *\n     * @param entities  the entity collection being populated.\n     * @param hotspot  the entity area (if <code>null</code> a default will be\n     *              used).\n     * @param dataset  the dataset.\n     * @param row  the series.\n     * @param column  the item.\n     * @param selected  is the item selected?\n     * @param entityX  the entity's center x-coordinate in user space (only\n     *                 used if <code>area</code> is <code>null</code>).\n     * @param entityY  the entity's center y-coordinate in user space (only\n     *                 used if <code>area</code> is <code>null</code>).\n     *\n     * @since 1.2.0\n     */\n    protected void addEntity(EntityCollection entities, Shape hotspot,\n            CategoryDataset dataset, int row, int column, boolean selected,\n            double entityX, double entityY) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n     * Returns a shape that can be used for hit testing on a data item drawn\n     * by the renderer.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the area within which the data is being rendered.\n     * @param plot  the plot (can be used to obtain standard color\n     *              information etc).\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param dataset  the dataset.\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     * @param selected  is the item selected?\n     *\n     * @return A shape equal to the hot spot for a data item.\n     */\n    public Shape createHotSpotShape(Graphics2D g2, Rectangle2D dataArea,\n            CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis,\n            CategoryDataset dataset, int row, int column, boolean selected,\n            CategoryItemRendererState state) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the rectangular bounds for the hot spot for an item drawn by\n     * this renderer.  This is intended to provide a quick test for\n     * eliminating data points before more accurate testing against the\n     * shape returned by createHotSpotShape().\n     *\n     * @param g2\n     * @param dataArea\n     * @param plot\n     * @param domainAxis\n     * @param rangeAxis\n     * @param dataset\n     * @param row\n     * @param column\n     * @param selected\n     * @param result\n     * @return\n     */\n    public Rectangle2D createHotSpotBounds(Graphics2D g2, Rectangle2D dataArea,\n            CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis,\n            CategoryDataset dataset, int row, int column, boolean selected,\n            CategoryItemRendererState state, Rectangle2D result) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns <code>true</code> if the specified point (xx, yy) in Java2D\n     * space falls within the \"hot spot\" for the specified data item, and\n     * <code>false</code> otherwise.\n     *\n     * @param xx\n     * @param yy\n     * @param g2\n     * @param dataArea\n     * @param plot\n     * @param domainAxis\n     * @param rangeAxis\n     * @param dataset\n     * @param row\n     * @param column\n     * @param selected\n     *\n     * @return\n     *\n     * @since 1.2.0\n     */\n    public boolean hitTest(double xx, double yy, Graphics2D g2,\n            Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis,\n            ValueAxis rangeAxis, CategoryDataset dataset, int row, int column,\n            boolean selected, CategoryItemRendererState state) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n}"}