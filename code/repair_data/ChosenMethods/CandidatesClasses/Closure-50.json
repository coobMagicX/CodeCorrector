{"PeepholeReplaceKnownMethods": "class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n\n  // The LOCALE independent \"locale\"\n  private static final Locale ROOT_LOCALE = new Locale(\"\");\n\n  @Override\n  Node optimizeSubtree(Node subtree) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  private Node tryFoldKnownMethods(Node subtree) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /**\n   * Try to evaluate known String methods\n   *    .indexOf(), .substr(), .substring()\n   */\n  private Node tryFoldKnownStringMethods(Node subtree) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /**\n   * Try to evaluate known Numeric methods\n   *    .parseInt(), parseFloat()\n   */\n  private Node tryFoldKnownNumericMethods(Node subtree) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /**\n   * @return The lowered string Node.\n   */\n  private Node tryFoldStringToLowerCase(Node subtree, Node stringNode) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /**\n   * @return The uppered string Node.\n   */\n  private Node tryFoldStringToUpperCase(Node subtree, Node stringNode) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /**\n   * @param input string representation of a number\n   * @return string with leading and trailing zeros removed\n   */\n  private String normalizeNumericString(String input) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /**\n   * Try to evaluate parseInt, parseFloat:\n   *     parseInt(\"1\") -> 1\n   *     parseInt(\"1\", 10) -> 1\n   *     parseFloat(\"1.11\") -> 1.11\n   */\n  private Node tryFoldParseNumber(\n      Node n, String functionName, Node firstArg) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /**\n   * Try to evaluate String.indexOf/lastIndexOf:\n   *     \"abcdef\".indexOf(\"bc\") -> 1\n   *     \"abcdefbc\".indexOf(\"bc\", 3) -> 6\n   */\n  private Node tryFoldStringIndexOf(\n      Node n, String functionName, Node lstringNode, Node firstArg) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /**\n   * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n   */\n  private Node tryFoldArrayJoin(Node n) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /**\n   * Try to fold .substr() calls on strings\n   */\n  private Node tryFoldStringSubstr(Node n, Node stringNode, Node arg1) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /**\n   * Try to fold .substring() calls on strings\n   */\n  private Node tryFoldStringSubstring(Node n, Node stringNode, Node arg1) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /**\n   * Try to fold .charAt() calls on strings\n   */\n  private Node tryFoldStringCharAt(Node n, Node stringNode, Node arg1) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /**\n   * Try to fold .charCodeAt() calls on strings\n   */\n  private Node tryFoldStringCharCodeAt(Node n, Node stringNode, Node arg1) {\n         //The specific code has been omitted, but there is no error\n        }\n}"}