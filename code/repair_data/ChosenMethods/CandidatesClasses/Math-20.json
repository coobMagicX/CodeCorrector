{"CMAESOptimizer": "public class CMAESOptimizer\n    extends BaseAbstractMultivariateSimpleBoundsOptimizer<MultivariateFunction>\n    implements MultivariateOptimizer {\n    /** Default value for {@link #checkFeasableCount}: {@value}. */\n    public static final int DEFAULT_CHECKFEASABLECOUNT = 0;\n    /** Default value for {@link #stopFitness}: {@value}. */\n    public static final double DEFAULT_STOPFITNESS = 0;\n    /** Default value for {@link #isActiveCMA}: {@value}. */\n    public static final boolean DEFAULT_ISACTIVECMA = true;\n    /** Default value for {@link #maxIterations}: {@value}. */\n    public static final int DEFAULT_MAXITERATIONS = 30000;\n    /** Default value for {@link #diagonalOnly}: {@value}. */\n    public static final int DEFAULT_DIAGONALONLY = 0;\n    /** Default value for {@link #random}. */\n    public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();\n\n    // global search parameters\n    /**\n     * Population size, offspring number. The primary strategy parameter to play\n     * with, which can be increased from its default value. Increasing the\n     * population size improves global search properties in exchange to speed.\n     * Speed decreases, as a rule, at most linearly with increasing population\n     * size. It is advisable to begin with the default small population size.\n     */\n    private int lambda; // population size\n    /**\n     * Covariance update mechanism, default is active CMA. isActiveCMA = true\n     * turns on \"active CMA\" with a negative update of the covariance matrix and\n     * checks for positive definiteness. OPTS.CMA.active = 2 does not check for\n     * pos. def. and is numerically faster. Active CMA usually speeds up the\n     * adaptation.\n     */\n    private boolean isActiveCMA;\n    /**\n     * Determines how often a new random offspring is generated in case it is\n     * not feasible / beyond the defined limits, default is 0. Only relevant if\n     * boundaries != null.\n     */\n    private int checkFeasableCount;\n    /**\n     * Lower and upper boundaries of the objective variables. boundaries == null\n     * means no boundaries.\n     */\n    private double[][] boundaries;\n    /**\n     * Individual sigma values - initial search volume. inputSigma determines\n     * the initial coordinate wise standard deviations for the search. Setting\n     * SIGMA one third of the initial search region is appropriate.\n     */\n    private double[] inputSigma;\n    /** Number of objective variables/problem dimension */\n    private int dimension;\n    /**\n     * Defines the number of initial iterations, where the covariance matrix\n     * remains diagonal and the algorithm has internally linear time complexity.\n     * diagonalOnly = 1 means keeping the covariance matrix always diagonal and\n     * this setting also exhibits linear space complexity. This can be\n     * particularly useful for dimension > 100.\n     * @see <a href=\"http://hal.archives-ouvertes.fr/inria-00287367/en\">A Simple Modification in CMA-ES</a>\n     */\n    private int diagonalOnly = 0;\n    /** Number of objective variables/problem dimension */\n    private boolean isMinimize = true;\n    /** Indicates whether statistic data is collected. */\n    private boolean generateStatistics = false;\n\n    // termination criteria\n    /** Maximal number of iterations allowed. */\n    private int maxIterations;\n    /** Limit for fitness value. */\n    private double stopFitness;\n    /** Stop if x-changes larger stopTolUpX. */\n    private double stopTolUpX;\n    /** Stop if x-change smaller stopTolX. */\n    private double stopTolX;\n    /** Stop if fun-changes smaller stopTolFun. */\n    private double stopTolFun;\n    /** Stop if back fun-changes smaller stopTolHistFun. */\n    private double stopTolHistFun;\n\n    // selection strategy parameters\n    /** Number of parents/points for recombination. */\n    private int mu; //\n    /** log(mu + 0.5), stored for efficiency. */\n    private double logMu2;\n    /** Array for weighted recombination. */\n    private RealMatrix weights;\n    /** Variance-effectiveness of sum w_i x_i. */\n    private double mueff; //\n\n    // dynamic strategy parameters and constants\n    /** Overall standard deviation - search volume. */\n    private double sigma;\n    /** Cumulation constant. */\n    private double cc;\n    /** Cumulation constant for step-size. */\n    private double cs;\n    /** Damping for step-size. */\n    private double damps;\n    /** Learning rate for rank-one update. */\n    private double ccov1;\n    /** Learning rate for rank-mu update' */\n    private double ccovmu;\n    /** Expectation of ||N(0,I)|| == norm(randn(N,1)). */\n    private double chiN;\n    /** Learning rate for rank-one update - diagonalOnly */\n    private double ccov1Sep;\n    /** Learning rate for rank-mu update - diagonalOnly */\n    private double ccovmuSep;\n\n    // CMA internal values - updated each generation\n    /** Objective variables. */\n    private RealMatrix xmean;\n    /** Evolution path. */\n    private RealMatrix pc;\n    /** Evolution path for sigma. */\n    private RealMatrix ps;\n    /** Norm of ps, stored for efficiency. */\n    private double normps;\n    /** Coordinate system. */\n    private RealMatrix B;\n    /** Scaling. */\n    private RealMatrix D;\n    /** B*D, stored for efficiency. */\n    private RealMatrix BD;\n    /** Diagonal of sqrt(D), stored for efficiency. */\n    private RealMatrix diagD;\n    /** Covariance matrix. */\n    private RealMatrix C;\n    /** Diagonal of C, used for diagonalOnly. */\n    private RealMatrix diagC;\n    /** Number of iterations already performed. */\n    private int iterations;\n\n    /** History queue of best values. */\n    private double[] fitnessHistory;\n    /** Size of history queue of best values. */\n    private int historySize;\n\n    /** Random generator. */\n    private RandomGenerator random;\n\n    /** History of sigma values. */\n    private List<Double> statisticsSigmaHistory = new ArrayList<Double>();\n    /** History of mean matrix. */\n    private List<RealMatrix> statisticsMeanHistory = new ArrayList<RealMatrix>();\n    /** History of fitness values. */\n    private List<Double> statisticsFitnessHistory = new ArrayList<Double>();\n    /** History of D matrix. */\n    private List<RealMatrix> statisticsDHistory = new ArrayList<RealMatrix>();\n\n    /**\n     * Default constructor, uses default parameters\n     */\n    public CMAESOptimizer() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * @param lambda Population size.\n     */\n    public CMAESOptimizer(int lambda) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * @param lambda Population size.\n     * @param inputSigma Initial search volume; sigma of offspring objective variables.\n     */\n    public CMAESOptimizer(int lambda, double[] inputSigma) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * @param lambda Population size.\n     * @param inputSigma Initial search volume; sigma of offspring objective variables.\n     * @param maxIterations Maximal number of iterations.\n     * @param stopFitness Whether to stop if objective function value is smaller than\n     * {@code stopFitness}.\n     * @param isActiveCMA Chooses the covariance matrix update method.\n     * @param diagonalOnly Number of initial iterations, where the covariance matrix\n     * remains diagonal.\n     * @param checkFeasableCount Determines how often new random objective variables are\n     * generated in case they are out of bounds.\n     * @param random Random generator.\n     * @param generateStatistics Whether statistic data is collected.\n     * @deprecated See {@link SimpleValueChecker#SimpleValueChecker()}\n     */\n    @Deprecated\n    public CMAESOptimizer(int lambda, double[] inputSigma,\n                          int maxIterations, double stopFitness,\n                          boolean isActiveCMA, int diagonalOnly, int checkFeasableCount,\n                          RandomGenerator random, boolean generateStatistics) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * @param lambda Population size.\n     * @param inputSigma Initial search volume; sigma of offspring objective variables.\n     * @param maxIterations Maximal number of iterations.\n     * @param stopFitness Whether to stop if objective function value is smaller than\n     * {@code stopFitness}.\n     * @param isActiveCMA Chooses the covariance matrix update method.\n     * @param diagonalOnly Number of initial iterations, where the covariance matrix\n     * remains diagonal.\n     * @param checkFeasableCount Determines how often new random objective variables are\n     * generated in case they are out of bounds.\n     * @param random Random generator.\n     * @param generateStatistics Whether statistic data is collected.\n     * @param checker Convergence checker.\n     */\n    public CMAESOptimizer(int lambda, double[] inputSigma,\n                          int maxIterations, double stopFitness,\n                          boolean isActiveCMA, int diagonalOnly, int checkFeasableCount,\n                          RandomGenerator random, boolean generateStatistics,\n                          ConvergenceChecker<PointValuePair> checker) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * @return History of sigma values.\n     */\n    public List<Double> getStatisticsSigmaHistory() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * @return History of mean matrix.\n     */\n    public List<RealMatrix> getStatisticsMeanHistory() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * @return History of fitness values.\n     */\n    public List<Double> getStatisticsFitnessHistory() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * @return History of D matrix.\n     */\n    public List<RealMatrix> getStatisticsDHistory() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /** {@inheritDoc} */\n    @Override\n    protected PointValuePair doOptimize() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Checks dimensions and values of boundaries and inputSigma if defined.\n     */\n    private void checkParameters() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Initialization of the dynamic search parameters\n     *\n     * @param guess Initial guess for the arguments of the fitness function.\n     */\n    private void initializeCMA(double[] guess) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Update of the evolution paths ps and pc.\n     *\n     * @param zmean Weighted row matrix of the gaussian random numbers generating\n     * the current offspring.\n     * @param xold xmean matrix of the previous generation.\n     * @return hsig flag indicating a small correction.\n     */\n    private boolean updateEvolutionPaths(RealMatrix zmean, RealMatrix xold) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Update of the covariance matrix C for diagonalOnly > 0\n     *\n     * @param hsig Flag indicating a small correction.\n     * @param bestArz Fitness-sorted matrix of the gaussian random values of the\n     * current offspring.\n     * @param xold xmean matrix of the previous generation.\n     */\n    private void updateCovarianceDiagonalOnly(boolean hsig,\n                                              final RealMatrix bestArz,\n                                              final RealMatrix xold) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Update of the covariance matrix C.\n     *\n     * @param hsig Flag indicating a small correction.\n     * @param bestArx Fitness-sorted matrix of the argument vectors producing the\n     * current offspring.\n     * @param arz Unsorted matrix containing the gaussian random values of the\n     * current offspring.\n     * @param arindex Indices indicating the fitness-order of the current offspring.\n     * @param xold xmean matrix of the previous generation.\n     */\n    private void updateCovariance(boolean hsig, final RealMatrix bestArx,\n            final RealMatrix arz, final int[] arindex, final RealMatrix xold) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Update B and D from C.\n     *\n     * @param negccov Negative covariance factor.\n     */\n    private void updateBD(double negccov) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Pushes the current best fitness value in a history queue.\n     *\n     * @param vals History queue.\n     * @param val Current best fitness value.\n     */\n    private static void push(double[] vals, double val) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sorts fitness values.\n     *\n     * @param doubles Array of values to be sorted.\n     * @return a sorted array of indices pointing into doubles.\n     */\n    private int[] sortedIndices(final double[] doubles) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Used to sort fitness values. Sorting is always in lower value first\n     * order.\n     */\n    private static class DoubleIndex implements Comparable<DoubleIndex> {\n        /** Value to compare. */\n        private double value;\n        /** Index into sorted array. */\n        private int index;\n\n        /**\n         * @param value Value to compare.\n         * @param index Index into sorted array.\n         */\n        DoubleIndex(double value, int index) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /** {@inheritDoc} */\n        public int compareTo(DoubleIndex o) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /** {@inheritDoc} */\n        @Override\n        public boolean equals(Object other) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /** {@inheritDoc} */\n        @Override\n        public int hashCode() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    }\n\n    /**\n     * Normalizes fitness values to the range [0,1]. Adds a penalty to the\n     * fitness value if out of range. The penalty is adjusted by calling\n     * setValueRange().\n     */\n    private class FitnessFunction {\n         //The specific code has been omitted, but there is no error\n        }\n\n    // -----Matrix utility functions similar to the Matlab build in functions------\n\n    /**\n     * @param m Input matrix\n     * @return Matrix representing the element-wise logarithm of m.\n     */\n    private static RealMatrix log(final RealMatrix m) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * @param m\n     *            Input matrix\n     * @return Matrix representing the element-wise square root of m.\n     */\n    private static RealMatrix sqrt(final RealMatrix m) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * @param m Input matrix\n     * @return Matrix representing the element-wise square (^2) of m.\n     */\n    private static RealMatrix square(final RealMatrix m) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * @param m Input matrix 1.\n     * @param n Input matrix 2.\n     * @return the matrix where the elements of m and n are element-wise multiplied.\n     */\n    private static RealMatrix times(final RealMatrix m, final RealMatrix n) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * @param m Input matrix 1.\n     * @param n Input matrix 2.\n     * @return Matrix where the elements of m and n are element-wise divided.\n     */\n    private static RealMatrix divide(final RealMatrix m, final RealMatrix n) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * @param m Input matrix.\n     * @param cols Columns to select.\n     * @return Matrix representing the selected columns.\n     */\n    private static RealMatrix selectColumns(final RealMatrix m, final int[] cols) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * @param m Input matrix.\n     * @param k Diagonal position.\n     * @return Upper triangular part of matrix.\n     */\n    private static RealMatrix triu(final RealMatrix m, int k) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * @param m Input matrix.\n     * @return Row matrix representing the sums of the rows.\n     */\n    private static RealMatrix sumRows(final RealMatrix m) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * @param m Input matrix.\n     * @return the diagonal n-by-n matrix if m is a column matrix or the column\n     * matrix representing the diagonal if m is a n-by-n matrix.\n     */\n    private static RealMatrix diag(final RealMatrix m) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Copies a column from m1 to m2.\n     *\n     * @param m1 Source matrix 1.\n     * @param col1 Source column.\n     * @param m2 Target matrix.\n     * @param col2 Target column.\n     */\n    private static void copyColumn(final RealMatrix m1, int col1, RealMatrix m2, int col2) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * @param n Number of rows.\n     * @param m Number of columns.\n     * @return n-by-m matrix filled with 1.\n     */\n    private static RealMatrix ones(int n, int m) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * @param n Number of rows.\n     * @param m Number of columns.\n     * @return n-by-m matrix of 0.0-values, diagonal has values 1.0.\n     */\n    private static RealMatrix eye(int n, int m) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * @param n Number of rows.\n     * @param m Number of columns.\n     * @return n-by-m matrix of 0.0-values.\n     */\n    private static RealMatrix zeros(int n, int m) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * @param mat Input matrix.\n     * @param n Number of row replicates.\n     * @param m Number of column replicates.\n     * @return a matrix which replicates the input matrix in both directions.\n     */\n    private static RealMatrix repmat(final RealMatrix mat, int n, int m) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * @param start Start value.\n     * @param end End value.\n     * @param step Step size.\n     * @return a sequence as column matrix.\n     */\n    private static RealMatrix sequence(double start, double end, double step) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * @param m Input matrix.\n     * @return the maximum of the matrix element values.\n     */\n    private static double max(final RealMatrix m) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * @param m Input matrix.\n     * @return the minimum of the matrix element values.\n     */\n    private static double min(final RealMatrix m) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * @param m Input array.\n     * @return the maximum of the array values.\n     */\n    private static double max(final double[] m) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * @param m Input array.\n     * @return the minimum of the array values.\n     */\n    private static double min(final double[] m) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * @param indices Input index array.\n     * @return the inverse of the mapping defined by indices.\n     */\n    private static int[] inverse(final int[] indices) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * @param indices Input index array.\n     * @return the indices in inverse order (last is first).\n     */\n    private static int[] reverse(final int[] indices) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * @param size Length of random array.\n     * @return an array of Gaussian random numbers.\n     */\n    private double[] randn(int size) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * @param size Number of rows.\n     * @param popSize Population size.\n     * @return a 2-dimensional matrix of Gaussian random numbers.\n     */\n    private RealMatrix randn1(int size, int popSize) {\n         //The specific code has been omitted, but there is no error\n        }\n}", "DoubleIndex": "    private static class DoubleIndex implements Comparable<DoubleIndex> {\n        /** Value to compare. */\n        private double value;\n        /** Index into sorted array. */\n        private int index;\n\n        /**\n         * @param value Value to compare.\n         * @param index Index into sorted array.\n         */\n        DoubleIndex(double value, int index) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /** {@inheritDoc} */\n        public int compareTo(DoubleIndex o) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /** {@inheritDoc} */\n        @Override\n        public boolean equals(Object other) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /** {@inheritDoc} */\n        @Override\n        public int hashCode() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    }", "FitnessFunction": "    private class FitnessFunction {\n         //The specific code has been omitted, but there is no error\n        }"}