{"Partial": "public final class Partial\n        extends AbstractPartial\n        implements ReadablePartial, Serializable {\n\n    /** Serialization version */\n    private static final long serialVersionUID = 12324121189002L;\n\n    /** The chronology in use. */\n    private final Chronology iChronology;\n    /** The set of field types. */\n    private final DateTimeFieldType[] iTypes;\n    /** The values of each field in this partial. */\n    private final int[] iValues;\n    /** The formatter to use, [0] may miss some fields, [1] doesn't miss any fields. */\n    private transient DateTimeFormatter[] iFormatter;\n\n    // Constructors\n    //-----------------------------------------------------------------------\n    /**\n     * Constructs a Partial with no fields or values, which can be considered\n     * to represent any date.\n     * <p>\n     * This is most useful when constructing partials, for example:\n     * <pre>\n     * Partial p = new Partial()\n     *     .with(DateTimeFieldType.dayOfWeek(), 5)\n     *     .with(DateTimeFieldType.hourOfDay(), 12)\n     *     .with(DateTimeFieldType.minuteOfHour(), 20);\n     * </pre>\n     * Note that, although this is a clean way to write code, it is fairly\n     * inefficient internally.\n     * <p>\n     * The constructor uses the default ISO chronology.\n     */\n    public Partial() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Constructs a Partial with no fields or values, which can be considered\n     * to represent any date.\n     * <p>\n     * This is most useful when constructing partials, for example:\n     * <pre>\n     * Partial p = new Partial(chrono)\n     *     .with(DateTimeFieldType.dayOfWeek(), 5)\n     *     .with(DateTimeFieldType.hourOfDay(), 12)\n     *     .with(DateTimeFieldType.minuteOfHour(), 20);\n     * </pre>\n     * Note that, although this is a clean way to write code, it is fairly\n     * inefficient internally.\n     *\n     * @param chrono  the chronology, null means ISO\n     */\n    public Partial(Chronology chrono) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Constructs a Partial with the specified field and value.\n     * <p>\n     * The constructor uses the default ISO chronology.\n     * \n     * @param type  the single type to create the partial from, not null\n     * @param value  the value to store\n     * @throws IllegalArgumentException if the type or value is invalid\n     */\n    public Partial(DateTimeFieldType type, int value) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Constructs a Partial with the specified field and value.\n     * <p>\n     * The constructor uses the specified chronology.\n     * \n     * @param type  the single type to create the partial from, not null\n     * @param value  the value to store\n     * @param chronology  the chronology, null means ISO\n     * @throws IllegalArgumentException if the type or value is invalid\n     */\n    public Partial(DateTimeFieldType type, int value, Chronology chronology) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Constructs a Partial with the specified fields and values.\n     * The fields must be specified in the order largest to smallest.\n     * <p>\n     * The constructor uses the specified chronology.\n     * \n     * @param types  the types to create the partial from, not null\n     * @param values  the values to store, not null\n     * @throws IllegalArgumentException if the types or values are invalid\n     */\n    public Partial(DateTimeFieldType[] types, int[] values) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Constructs a Partial with the specified fields and values.\n     * The fields must be specified in the order largest to smallest.\n     * <p>\n     * The constructor uses the specified chronology.\n     * \n     * @param types  the types to create the partial from, not null\n     * @param values  the values to store, not null\n     * @param chronology  the chronology, null means ISO\n     * @throws IllegalArgumentException if the types or values are invalid\n     */\n    public Partial(DateTimeFieldType[] types, int[] values, Chronology chronology) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Constructs a Partial by copying all the fields and types from\n     * another partial.\n     * <p>\n     * This is most useful when copying from a YearMonthDay or TimeOfDay.\n     */\n    public Partial(ReadablePartial partial) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Constructs a Partial with the specified values.\n     * This constructor assigns and performs no validation.\n     * \n     * @param partial  the partial to copy\n     * @param values  the values to store\n     * @throws IllegalArgumentException if the types or values are invalid\n     */\n    Partial(Partial partial, int[] values) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Constructs a Partial with the specified chronology, fields and values.\n     * This constructor assigns and performs no validation.\n     * \n     * @param chronology  the chronology\n     * @param types  the types to create the partial from\n     * @param values  the values to store\n     * @throws IllegalArgumentException if the types or values are invalid\n     */\n    Partial(Chronology chronology, DateTimeFieldType[] types, int[] values) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the number of fields in this partial.\n     * \n     * @return the field count\n     */\n    public int size() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Gets the chronology of the partial which is never null.\n     * <p>\n     * The {@link Chronology} is the calculation engine behind the partial and\n     * provides conversion and validation of the fields in a particular calendar system.\n     * \n     * @return the chronology, never null\n     */\n    public Chronology getChronology() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Gets the field for a specific index in the chronology specified.\n     * \n     * @param index  the index to retrieve\n     * @param chrono  the chronology to use\n     * @return the field\n     * @throws IndexOutOfBoundsException if the index is invalid\n     */\n    protected DateTimeField getField(int index, Chronology chrono) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Gets the field type at the specified index.\n     *\n     * @param index  the index to retrieve\n     * @return the field at the specified index\n     * @throws IndexOutOfBoundsException if the index is invalid\n     */\n    public DateTimeFieldType getFieldType(int index) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Gets an array of the field type of each of the fields that\n     * this partial supports.\n     * <p>\n     * The fields are returned largest to smallest.\n     *\n     * @return the array of field types (cloned), largest to smallest\n     */\n    public DateTimeFieldType[] getFieldTypes() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the value of the field at the specifed index.\n     * \n     * @param index  the index\n     * @return the value\n     * @throws IndexOutOfBoundsException if the index is invalid\n     */\n    public int getValue(int index) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Gets an array of the value of each of the fields that\n     * this partial supports.\n     * <p>\n     * The fields are returned largest to smallest.\n     * Each value corresponds to the same array index as <code>getFieldTypes()</code>\n     *\n     * @return the current values of each field (cloned), largest to smallest\n     */\n    public int[] getValues() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Creates a new Partial instance with the specified chronology.\n     * This instance is immutable and unaffected by this method call.\n     * <p>\n     * This method retains the values of the fields, thus the result will\n     * typically refer to a different instant.\n     * <p>\n     * The time zone of the specified chronology is ignored, as Partial\n     * operates without a time zone.\n     *\n     * @param newChronology  the new chronology, null means ISO\n     * @return a copy of this datetime with a different chronology\n     * @throws IllegalArgumentException if the values are invalid for the new chronology\n     */\n    public Partial withChronologyRetainFields(Chronology newChronology) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets a copy of this date with the specified field set to a new value.\n     * <p>\n     * If this partial did not previously support the field, the new one will.\n     * Contrast this behaviour with {@link #withField(DateTimeFieldType, int)}.\n     * <p>\n     * For example, if the field type is <code>dayOfMonth</code> then the day\n     * would be changed/added in the returned instance.\n     *\n     * @param fieldType  the field type to set, not null\n     * @param value  the value to set\n     * @return a copy of this instance with the field set\n     * @throws IllegalArgumentException if the value is null or invalid\n     */\n    public Partial with(DateTimeFieldType fieldType, int value) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Gets a copy of this date with the specified field removed.\n     * <p>\n     * If this partial did not previously support the field, no error occurs.\n     *\n     * @param fieldType  the field type to remove, may be null\n     * @return a copy of this instance with the field removed\n     */\n    public Partial without(DateTimeFieldType fieldType) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets a copy of this Partial with the specified field set to a new value.\n     * <p>\n     * If this partial does not support the field, an exception is thrown.\n     * Contrast this behaviour with {@link #with(DateTimeFieldType, int)}.\n     * <p>\n     * For example, if the field type is <code>dayOfMonth</code> then the day\n     * would be changed in the returned instance if supported.\n     *\n     * @param fieldType  the field type to set, not null\n     * @param value  the value to set\n     * @return a copy of this instance with the field set\n     * @throws IllegalArgumentException if the value is null or invalid\n     */\n    public Partial withField(DateTimeFieldType fieldType, int value) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Gets a copy of this Partial with the value of the specified field increased.\n     * If this partial does not support the field, an exception is thrown.\n     * <p>\n     * If the addition is zero, then <code>this</code> is returned.\n     * The addition will overflow into larger fields (eg. minute to hour).\n     * However, it will not wrap around if the top maximum is reached.\n     *\n     * @param fieldType  the field type to add to, not null\n     * @param amount  the amount to add\n     * @return a copy of this instance with the field updated\n     * @throws IllegalArgumentException if the value is null or invalid\n     * @throws ArithmeticException if the new datetime exceeds the capacity\n     */\n    public Partial withFieldAdded(DurationFieldType fieldType, int amount) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Gets a copy of this Partial with the value of the specified field increased.\n     * If this partial does not support the field, an exception is thrown.\n     * <p>\n     * If the addition is zero, then <code>this</code> is returned.\n     * The addition will overflow into larger fields (eg. minute to hour).\n     * If the maximum is reached, the addition will wra.\n     *\n     * @param fieldType  the field type to add to, not null\n     * @param amount  the amount to add\n     * @return a copy of this instance with the field updated\n     * @throws IllegalArgumentException if the value is null or invalid\n     * @throws ArithmeticException if the new datetime exceeds the capacity\n     */\n    public Partial withFieldAddWrapped(DurationFieldType fieldType, int amount) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Gets a copy of this Partial with the specified period added.\n     * <p>\n     * If the addition is zero, then <code>this</code> is returned.\n     * Fields in the period that aren't present in the partial are ignored.\n     * <p>\n     * This method is typically used to add multiple copies of complex\n     * period instances. Adding one field is best achieved using the method\n     * {@link #withFieldAdded(DurationFieldType, int)}.\n     * \n     * @param period  the period to add to this one, null means zero\n     * @param scalar  the amount of times to add, such as -1 to subtract once\n     * @return a copy of this instance with the period added\n     * @throws ArithmeticException if the new datetime exceeds the capacity\n     */\n    public Partial withPeriodAdded(ReadablePeriod period, int scalar) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Gets a copy of this instance with the specified period added.\n     * <p>\n     * If the amount is zero or null, then <code>this</code> is returned.\n     *\n     * @param period  the duration to add to this one, null means zero\n     * @return a copy of this instance with the period added\n     * @throws ArithmeticException if the new datetime exceeds the capacity of a long\n     */\n    public Partial plus(ReadablePeriod period) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Gets a copy of this instance with the specified period take away.\n     * <p>\n     * If the amount is zero or null, then <code>this</code> is returned.\n     *\n     * @param period  the period to reduce this instant by\n     * @return a copy of this instance with the period taken away\n     * @throws ArithmeticException if the new datetime exceeds the capacity of a long\n     */\n    public Partial minus(ReadablePeriod period) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the property object for the specified type, which contains\n     * many useful methods for getting and manipulating the partial.\n     * <p>\n     * See also {@link ReadablePartial#get(DateTimeFieldType)}.\n     *\n     * @param type  the field type to get the property for, not null\n     * @return the property object\n     * @throws IllegalArgumentException if the field is null or unsupported\n     */\n    public Property property(DateTimeFieldType type) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Does this partial match the specified instant.\n     * <p>\n     * A match occurs when all the fields of this partial are the same as the\n     * corresponding fields on the specified instant.\n     *\n     * @param instant  an instant to check against, null means now in default zone\n     * @return true if this partial matches the specified instant\n     */\n    public boolean isMatch(ReadableInstant instant) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Does this partial match the specified partial.\n     * <p>\n     * A match occurs when all the fields of this partial are the same as the\n     * corresponding fields on the specified partial.\n     *\n     * @param partial  a partial to check against, must not be null\n     * @return true if this partial matches the specified partial\n     * @throws IllegalArgumentException if the partial is null\n     * @throws IllegalArgumentException if the fields of the two partials do not match\n     * @since 1.5\n     */\n    public boolean isMatch(ReadablePartial partial) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets a formatter suitable for the fields in this partial.\n     * <p>\n     * If there is no appropriate ISO format, null is returned.\n     * This method may return a formatter that does not display all the\n     * fields of the partial. This might occur when you have overlapping\n     * fields, such as dayOfWeek and dayOfMonth.\n     *\n     * @return a formatter suitable for the fields in this partial, null\n     *  if none is suitable\n     */\n    public DateTimeFormatter getFormatter() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Output the date in an appropriate ISO8601 format.\n     * <p>\n     * This method will output the partial in one of two ways.\n     * If {@link #getFormatter()}\n     * <p>\n     * If there is no appropriate ISO format a dump of the fields is output\n     * via {@link #toStringList()}.\n     * \n     * @return ISO8601 formatted string\n     */\n    public String toString() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Gets a string version of the partial that lists all the fields.\n     * <p>\n     * This method exists to provide a better debugging toString than\n     * the standard toString. This method lists all the fields and their\n     * values in a style similar to the collections framework.\n     *\n     * @return a toString format that lists all the fields\n     */\n    public String toStringList() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Output the date using the specified format pattern.\n     * Unsupported fields will appear as special unicode characters.\n     *\n     * @param pattern  the pattern specification, null means use <code>toString</code>\n     * @see org.joda.time.format.DateTimeFormat\n     */\n    public String toString(String pattern) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Output the date using the specified format pattern.\n     * Unsupported fields will appear as special unicode characters.\n     *\n     * @param pattern  the pattern specification, null means use <code>toString</code>\n     * @param locale  Locale to use, null means default\n     * @see org.joda.time.format.DateTimeFormat\n     */\n    public String toString(String pattern, Locale locale) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * The property class for <code>Partial</code>.\n     * <p>\n     * This class binds a <code>Partial</code> to a <code>DateTimeField</code>.\n     * \n     * @author Stephen Colebourne\n     * @since 1.1\n     */\n    public static class Property extends AbstractPartialFieldProperty implements Serializable {\n\n        /** Serialization version */\n        private static final long serialVersionUID = 53278362873888L;\n\n        /** The partial */\n        private final Partial iPartial;\n        /** The field index */\n        private final int iFieldIndex;\n\n        /**\n         * Constructs a property.\n         * \n         * @param partial  the partial instance\n         * @param fieldIndex  the index in the partial\n         */\n        Property(Partial partial, int fieldIndex) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * Gets the field that this property uses.\n         * \n         * @return the field\n         */\n        public DateTimeField getField() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * Gets the partial that this property belongs to.\n         * \n         * @return the partial\n         */\n        protected ReadablePartial getReadablePartial() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * Gets the partial that this property belongs to.\n         * \n         * @return the partial\n         */\n        public Partial getPartial() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * Gets the value of this field.\n         * \n         * @return the field value\n         */\n        public int get() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        //-----------------------------------------------------------------------\n        /**\n         * Adds to the value of this field in a copy of this Partial.\n         * <p>\n         * The value will be added to this field. If the value is too large to be\n         * added solely to this field then it will affect larger fields.\n         * Smaller fields are unaffected.\n         * <p>\n         * If the result would be too large, beyond the maximum year, then an\n         * IllegalArgumentException is thrown.\n         * <p>\n         * The Partial attached to this property is unchanged by this call.\n         * Instead, a new instance is returned.\n         * \n         * @param valueToAdd  the value to add to the field in the copy\n         * @return a copy of the Partial with the field value changed\n         * @throws IllegalArgumentException if the value isn't valid\n         */\n        public Partial addToCopy(int valueToAdd) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * Adds to the value of this field in a copy of this Partial wrapping\n         * within this field if the maximum value is reached.\n         * <p>\n         * The value will be added to this field. If the value is too large to be\n         * added solely to this field then it wraps within this field.\n         * Other fields are unaffected.\n         * <p>\n         * For example,\n         * <code>2004-12-20</code> addWrapField one month returns <code>2004-01-20</code>.\n         * <p>\n         * The Partial attached to this property is unchanged by this call.\n         * Instead, a new instance is returned.\n         * \n         * @param valueToAdd  the value to add to the field in the copy\n         * @return a copy of the Partial with the field value changed\n         * @throws IllegalArgumentException if the value isn't valid\n         */\n        public Partial addWrapFieldToCopy(int valueToAdd) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        //-----------------------------------------------------------------------\n        /**\n         * Sets this field in a copy of the Partial.\n         * <p>\n         * The Partial attached to this property is unchanged by this call.\n         * Instead, a new instance is returned.\n         * \n         * @param value  the value to set the field in the copy to\n         * @return a copy of the Partial with the field value changed\n         * @throws IllegalArgumentException if the value isn't valid\n         */\n        public Partial setCopy(int value) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * Sets this field in a copy of the Partial to a parsed text value.\n         * <p>\n         * The Partial attached to this property is unchanged by this call.\n         * Instead, a new instance is returned.\n         * \n         * @param text  the text value to set\n         * @param locale  optional locale to use for selecting a text symbol\n         * @return a copy of the Partial with the field value changed\n         * @throws IllegalArgumentException if the text value isn't valid\n         */\n        public Partial setCopy(String text, Locale locale) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * Sets this field in a copy of the Partial to a parsed text value.\n         * <p>\n         * The Partial attached to this property is unchanged by this call.\n         * Instead, a new instance is returned.\n         * \n         * @param text  the text value to set\n         * @return a copy of the Partial with the field value changed\n         * @throws IllegalArgumentException if the text value isn't valid\n         */\n        public Partial setCopy(String text) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        //-----------------------------------------------------------------------\n        /**\n         * Returns a new Partial with this field set to the maximum value\n         * for this field.\n         * <p>\n         * The Partial attached to this property is unchanged by this call.\n         *\n         * @return a copy of the Partial with this field set to its maximum\n         * @since 1.2\n         */\n        public Partial withMaximumValue() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * Returns a new Partial with this field set to the minimum value\n         * for this field.\n         * <p>\n         * The Partial attached to this property is unchanged by this call.\n         *\n         * @return a copy of the Partial with this field set to its minimum\n         * @since 1.2\n         */\n        public Partial withMinimumValue() {\n         //The specific code has been omitted, but there is no error\n        }\n    }\n\n}", "Property": "    public static class Property extends AbstractPartialFieldProperty implements Serializable {\n\n        /** Serialization version */\n        private static final long serialVersionUID = 53278362873888L;\n\n        /** The partial */\n        private final Partial iPartial;\n        /** The field index */\n        private final int iFieldIndex;\n\n        /**\n         * Constructs a property.\n         * \n         * @param partial  the partial instance\n         * @param fieldIndex  the index in the partial\n         */\n        Property(Partial partial, int fieldIndex) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * Gets the field that this property uses.\n         * \n         * @return the field\n         */\n        public DateTimeField getField() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * Gets the partial that this property belongs to.\n         * \n         * @return the partial\n         */\n        protected ReadablePartial getReadablePartial() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * Gets the partial that this property belongs to.\n         * \n         * @return the partial\n         */\n        public Partial getPartial() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * Gets the value of this field.\n         * \n         * @return the field value\n         */\n        public int get() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        //-----------------------------------------------------------------------\n        /**\n         * Adds to the value of this field in a copy of this Partial.\n         * <p>\n         * The value will be added to this field. If the value is too large to be\n         * added solely to this field then it will affect larger fields.\n         * Smaller fields are unaffected.\n         * <p>\n         * If the result would be too large, beyond the maximum year, then an\n         * IllegalArgumentException is thrown.\n         * <p>\n         * The Partial attached to this property is unchanged by this call.\n         * Instead, a new instance is returned.\n         * \n         * @param valueToAdd  the value to add to the field in the copy\n         * @return a copy of the Partial with the field value changed\n         * @throws IllegalArgumentException if the value isn't valid\n         */\n        public Partial addToCopy(int valueToAdd) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * Adds to the value of this field in a copy of this Partial wrapping\n         * within this field if the maximum value is reached.\n         * <p>\n         * The value will be added to this field. If the value is too large to be\n         * added solely to this field then it wraps within this field.\n         * Other fields are unaffected.\n         * <p>\n         * For example,\n         * <code>2004-12-20</code> addWrapField one month returns <code>2004-01-20</code>.\n         * <p>\n         * The Partial attached to this property is unchanged by this call.\n         * Instead, a new instance is returned.\n         * \n         * @param valueToAdd  the value to add to the field in the copy\n         * @return a copy of the Partial with the field value changed\n         * @throws IllegalArgumentException if the value isn't valid\n         */\n        public Partial addWrapFieldToCopy(int valueToAdd) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        //-----------------------------------------------------------------------\n        /**\n         * Sets this field in a copy of the Partial.\n         * <p>\n         * The Partial attached to this property is unchanged by this call.\n         * Instead, a new instance is returned.\n         * \n         * @param value  the value to set the field in the copy to\n         * @return a copy of the Partial with the field value changed\n         * @throws IllegalArgumentException if the value isn't valid\n         */\n        public Partial setCopy(int value) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * Sets this field in a copy of the Partial to a parsed text value.\n         * <p>\n         * The Partial attached to this property is unchanged by this call.\n         * Instead, a new instance is returned.\n         * \n         * @param text  the text value to set\n         * @param locale  optional locale to use for selecting a text symbol\n         * @return a copy of the Partial with the field value changed\n         * @throws IllegalArgumentException if the text value isn't valid\n         */\n        public Partial setCopy(String text, Locale locale) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * Sets this field in a copy of the Partial to a parsed text value.\n         * <p>\n         * The Partial attached to this property is unchanged by this call.\n         * Instead, a new instance is returned.\n         * \n         * @param text  the text value to set\n         * @return a copy of the Partial with the field value changed\n         * @throws IllegalArgumentException if the text value isn't valid\n         */\n        public Partial setCopy(String text) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        //-----------------------------------------------------------------------\n        /**\n         * Returns a new Partial with this field set to the maximum value\n         * for this field.\n         * <p>\n         * The Partial attached to this property is unchanged by this call.\n         *\n         * @return a copy of the Partial with this field set to its maximum\n         * @since 1.2\n         */\n        public Partial withMaximumValue() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * Returns a new Partial with this field set to the minimum value\n         * for this field.\n         * <p>\n         * The Partial attached to this property is unchanged by this call.\n         *\n         * @return a copy of the Partial with this field set to its minimum\n         * @since 1.2\n         */\n        public Partial withMinimumValue() {\n         //The specific code has been omitted, but there is no error\n        }\n    }"}