{"Period": "public final class Period\n        extends BasePeriod\n        implements ReadablePeriod, Serializable {\n\n    /**\n     * A period of zero length and standard period type.\n     * @since 1.4\n     */\n    public static final Period ZERO = new Period();\n\n    /** Serialization version */\n    private static final long serialVersionUID = 741052353876488155L;\n\n    //-----------------------------------------------------------------------\n    /**\n     * Parses a {@code Period} from the specified string.\n     * <p>\n     * This uses {@link ISOPeriodFormat#standard()}.\n     * \n     * @param str  the string to parse, not null\n     * @since 2.0\n     */\n    @FromString\n    public static Period parse(String str) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Parses a {@code Period} from the specified string using a formatter.\n     * \n     * @param str  the string to parse, not null\n     * @param formatter  the formatter to use, not null\n     * @since 2.0\n     */\n    public static Period parse(String str, PeriodFormatter formatter) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Create a period with a specified number of years.\n     * <p>\n     * The standard period type is used, thus you can add other fields such\n     * as months or days using the <code>withXxx()</code> methods.\n     * For example, <code>Period.years(2).withMonths(6);</code>\n     * <p>\n     * If you want a year-based period that cannot have other fields added,\n     * then you should consider using {@link Years}.\n     *\n     * @param years  the amount of years in this period\n     * @return the period\n     */\n    public static Period years(int years) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Create a period with a specified number of months.\n     * <p>\n     * The standard period type is used, thus you can add other fields such\n     * as years or days using the <code>withXxx()</code> methods.\n     * For example, <code>Period.months(2).withDays(6);</code>\n     * <p>\n     * If you want a month-based period that cannot have other fields added,\n     * then you should consider using {@link Months}.\n     *\n     * @param months  the amount of months in this period\n     * @return the period\n     */\n    public static Period months(int months) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Create a period with a specified number of weeks.\n     * <p>\n     * The standard period type is used, thus you can add other fields such\n     * as months or days using the <code>withXxx()</code> methods.\n     * For example, <code>Period.weeks(2).withDays(6);</code>\n     * <p>\n     * If you want a week-based period that cannot have other fields added,\n     * then you should consider using {@link Weeks}.\n     *\n     * @param weeks  the amount of weeks in this period\n     * @return the period\n     */\n    public static Period weeks(int weeks) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Create a period with a specified number of days.\n     * <p>\n     * The standard period type is used, thus you can add other fields such\n     * as months or weeks using the <code>withXxx()</code> methods.\n     * For example, <code>Period.days(2).withHours(6);</code>\n     * <p>\n     * If you want a day-based period that cannot have other fields added,\n     * then you should consider using {@link Days}.\n     *\n     * @param days  the amount of days in this period\n     * @return the period\n     */\n    public static Period days(int days) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Create a period with a specified number of hours.\n     * <p>\n     * The standard period type is used, thus you can add other fields such\n     * as months or days using the <code>withXxx()</code> methods.\n     * For example, <code>Period.hours(2).withMinutes(30);</code>\n     * <p>\n     * If you want a hour-based period that cannot have other fields added,\n     * then you should consider using {@link Hours}.\n     *\n     * @param hours  the amount of hours in this period\n     * @return the period\n     */\n    public static Period hours(int hours) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Create a period with a specified number of minutes.\n     * <p>\n     * The standard period type is used, thus you can add other fields such\n     * as days or hours using the <code>withXxx()</code> methods.\n     * For example, <code>Period.minutes(2).withSeconds(30);</code>\n     * <p>\n     * If you want a minute-based period that cannot have other fields added,\n     * then you should consider using {@link Minutes}.\n     *\n     * @param minutes  the amount of minutes in this period\n     * @return the period\n     */\n    public static Period minutes(int minutes) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Create a period with a specified number of seconds.\n     * <p>\n     * The standard period type is used, thus you can add other fields such\n     * as days or hours using the <code>withXxx()</code> methods.\n     * For example, <code>Period.seconds(2).withMillis(30);</code>\n     * <p>\n     * If you want a second-based period that cannot have other fields added,\n     * then you should consider using {@link Seconds}.\n     *\n     * @param seconds  the amount of seconds in this period\n     * @return the period\n     */\n    public static Period seconds(int seconds) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Create a period with a specified number of millis.\n     * <p>\n     * The standard period type is used, thus you can add other fields such\n     * as days or hours using the <code>withXxx()</code> methods.\n     * For example, <code>Period.millis(20).withSeconds(30);</code>\n     *\n     * @param millis  the amount of millis in this period\n     * @return the period\n     */\n    public static Period millis(int millis) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Creates a period from two partially specified times, calculating\n     * by field difference.\n     * <p>\n     * The two partials must contain the same fields, thus you can specify\n     * two <code>LocalDate</code> objects, or two <code>LocalTime</code> objects,\n     * but not one of each. Also, the partial may not contain overlapping\n     * fields, such as dayOfWeek and dayOfMonth.\n     * <p>\n     * Calculation by field difference works by extracting the difference\n     * one field at a time and not wrapping into other fields.\n     * Thus 2005-06-09/2007-04-12 will yield P1Y-2M3D.\n     * <p>\n     * For example, you have an event that always runs from the 27th of\n     * each month to the 2nd of the next month. If you calculate this\n     * period using a standard constructor, then you will get between\n     * P3D and P6D depending on the month. If you use this method, then\n     * you will get P1M-25D. This field-difference based period can\n     * be successfully applied to each month of the year to obtain the\n     * correct end date for a given start date.\n     *\n     * @param start  the start of the period, must not be null\n     * @param end  the end of the period, must not be null\n     * @throws IllegalArgumentException if the partials are null or invalid\n     * @since 1.1\n     */\n    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Creates a new empty period with the standard set of fields.\n     * <p>\n     * One way to initialise a period is as follows:\n     * <pre>\n     * Period = new Period().withYears(6).withMonths(3).withSeconds(23);\n     * </pre>\n     * Bear in mind that this creates four period instances in total, three of\n     * which are immediately discarded.\n     * The alterative is more efficient, but less readable:\n     * <pre>\n     * Period = new Period(6, 3, 0, 0, 0, 0, 23, 0);\n     * </pre>\n     * The following is also slightly less wasteful:\n     * <pre>\n     * Period = Period.years(6).withMonths(3).withSeconds(23);\n     * </pre>\n     */\n    public Period() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Create a period from a set of field values using the standard set of fields.\n     * Note that the parameters specify the time fields hours, minutes,\n     * seconds and millis, not the date fields.\n     *\n     * @param hours  amount of hours in this period\n     * @param minutes  amount of minutes in this period\n     * @param seconds  amount of seconds in this period\n     * @param millis  amount of milliseconds in this period\n     */\n    public Period(int hours, int minutes, int seconds, int millis) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Create a period from a set of field values using the standard set of fields.\n     *\n     * @param years  amount of years in this period\n     * @param months  amount of months in this period\n     * @param weeks  amount of weeks in this period\n     * @param days  amount of days in this period\n     * @param hours  amount of hours in this period\n     * @param minutes  amount of minutes in this period\n     * @param seconds  amount of seconds in this period\n     * @param millis  amount of milliseconds in this period\n     */\n    public Period(int years, int months, int weeks, int days,\n                  int hours, int minutes, int seconds, int millis) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Create a period from a set of field values.\n     * <p>\n     * There is usually little need to use this constructor.\n     * The period type is used primarily to define how to split an interval into a period.\n     * As this constructor already is split, the period type does no real work.\n     *\n     * @param years  amount of years in this period, which must be zero if unsupported\n     * @param months  amount of months in this period, which must be zero if unsupported\n     * @param weeks  amount of weeks in this period, which must be zero if unsupported\n     * @param days  amount of days in this period, which must be zero if unsupported\n     * @param hours  amount of hours in this period, which must be zero if unsupported\n     * @param minutes  amount of minutes in this period, which must be zero if unsupported\n     * @param seconds  amount of seconds in this period, which must be zero if unsupported\n     * @param millis  amount of milliseconds in this period, which must be zero if unsupported\n     * @param type  which set of fields this period supports, null means AllType\n     * @throws IllegalArgumentException if an unsupported field's value is non-zero\n     */\n    public Period(int years, int months, int weeks, int days,\n                    int hours, int minutes, int seconds, int millis, PeriodType type) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Creates a period from the given millisecond duration using the standard\n     * set of fields.\n     * <p>\n     * Only precise fields in the period type will be used.\n     * For the standard period type this is the time fields only.\n     * Thus the year, month, week and day fields will not be populated.\n     * <p>\n     * If the duration is small, less than one day, then this method will perform\n     * as you might expect and split the fields evenly.\n     * <p>\n     * If the duration is larger than one day then all the remaining duration will\n     * be stored in the largest available precise field, hours in this case.\n     * <p>\n     * For example, a duration equal to (365 + 60 + 5) days will be converted to\n     * ((365 + 60 + 5) * 24) hours by this constructor.\n     * <p>\n     * For more control over the conversion process, you have two options:\n     * <ul>\n     * <li>convert the duration to an {@link Interval}, and from there obtain the period\n     * <li>specify a period type that contains precise definitions of the day and larger\n     * fields, such as UTC\n     * </ul>\n     *\n     * @param duration  the duration, in milliseconds\n     */\n    public Period(long duration) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Creates a period from the given millisecond duration.\n     * <p>\n     * Only precise fields in the period type will be used.\n     * Imprecise fields will not be populated.\n     * <p>\n     * If the duration is small then this method will perform\n     * as you might expect and split the fields evenly.\n     * <p>\n     * If the duration is large then all the remaining duration will\n     * be stored in the largest available precise field.\n     * For details as to which fields are precise, review the period type javadoc.\n     *\n     * @param duration  the duration, in milliseconds\n     * @param type  which set of fields this period supports, null means standard\n     */\n    public Period(long duration, PeriodType type) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Creates a period from the given millisecond duration using the standard\n     * set of fields.\n     * <p>\n     * Only precise fields in the period type will be used.\n     * Imprecise fields will not be populated.\n     * <p>\n     * If the duration is small then this method will perform\n     * as you might expect and split the fields evenly.\n     * <p>\n     * If the duration is large then all the remaining duration will\n     * be stored in the largest available precise field.\n     * For details as to which fields are precise, review the period type javadoc.\n     *\n     * @param duration  the duration, in milliseconds\n     * @param chronology  the chronology to use to split the duration, null means ISO default\n     */\n    public Period(long duration, Chronology chronology) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Creates a period from the given millisecond duration.\n     * <p>\n     * Only precise fields in the period type will be used.\n     * Imprecise fields will not be populated.\n     * <p>\n     * If the duration is small then this method will perform\n     * as you might expect and split the fields evenly.\n     * <p>\n     * If the duration is large then all the remaining duration will\n     * be stored in the largest available precise field.\n     * For details as to which fields are precise, review the period type javadoc.\n     *\n     * @param duration  the duration, in milliseconds\n     * @param type  which set of fields this period supports, null means standard\n     * @param chronology  the chronology to use to split the duration, null means ISO default\n     */\n    public Period(long duration, PeriodType type, Chronology chronology) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Creates a period from the given interval endpoints using the standard\n     * set of fields.\n     *\n     * @param startInstant  interval start, in milliseconds\n     * @param endInstant  interval end, in milliseconds\n     */\n    public Period(long startInstant, long endInstant) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Creates a period from the given interval endpoints.\n     *\n     * @param startInstant  interval start, in milliseconds\n     * @param endInstant  interval end, in milliseconds\n     * @param type  which set of fields this period supports, null means standard\n     */\n    public Period(long startInstant, long endInstant, PeriodType type) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Creates a period from the given interval endpoints using the standard\n     * set of fields.\n     *\n     * @param startInstant  interval start, in milliseconds\n     * @param endInstant  interval end, in milliseconds\n     * @param chrono  the chronology to use, null means ISO in default zone\n     */\n    public Period(long startInstant, long endInstant, Chronology chrono) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Creates a period from the given interval endpoints.\n     *\n     * @param startInstant  interval start, in milliseconds\n     * @param endInstant  interval end, in milliseconds\n     * @param type  which set of fields this period supports, null means standard\n     * @param chrono  the chronology to use, null means ISO in default zone\n     */\n    public Period(long startInstant, long endInstant, PeriodType type, Chronology chrono) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Creates a period between the given instants using the standard set of fields.\n     * <p>\n     * Most calculations performed by this method have obvious results.\n     * The special case is where the calculation is from a \"long\" month to a \"short\" month.\n     * Here, the result favours increasing the months field rather than the days.\n     * For example, 2013-01-31 to 2013-02-28 is treated as one whole month.\n     * By contrast, 2013-01-31 to 2013-03-30 is treated as one month and 30 days\n     * (exposed as 4 weeks and 2 days).\n     * The results are explained by considering that the start date plus the\n     * calculated period result in the end date.\n     *\n     * @param startInstant  interval start, null means now\n     * @param endInstant  interval end, null means now\n     */\n    public Period(ReadableInstant startInstant, ReadableInstant endInstant) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Creates a period between the given instants.\n     * <p>\n     * Most calculations performed by this method have obvious results.\n     * The special case is where the calculation is from a \"long\" month to a \"short\" month.\n     * Here, the result favours increasing the months field rather than the days.\n     * For example, 2013-01-31 to 2013-02-28 is treated as one whole month.\n     * By contrast, 2013-01-31 to 2013-03-30 is treated as one month and 30 days.\n     * The results are explained by considering that the start date plus the\n     * calculated period result in the end date.\n     *\n     * @param startInstant  interval start, null means now\n     * @param endInstant  interval end, null means now\n     * @param type  which set of fields this period supports, null means standard\n     */\n    public Period(ReadableInstant startInstant, ReadableInstant endInstant, PeriodType type) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Creates a period from two partially specified times.\n     * <p>\n     * The two partials must contain the same fields, thus you can specify\n     * two <code>LocalDate</code> objects, or two <code>LocalTime</code> objects,\n     * but not one of each.\n     * As these are Partial objects, time zones have no effect on the result.\n     * <p>\n     * The two partials must also both be contiguous - see\n     * {@link DateTimeUtils#isContiguous(ReadablePartial)} for a definition.\n     * Both <code>LocalDate</code> and <code>LocalTime</code> are contiguous.\n     * <p>\n     * Most calculations performed by this method have obvious results.\n     * The special case is where the calculation is from a \"long\" month to a \"short\" month.\n     * Here, the result favours increasing the months field rather than the days.\n     * For example, 2013-01-31 to 2013-02-28 is treated as one whole month.\n     * By contrast, 2013-01-31 to 2013-03-30 is treated as one month and 30 days\n     * (exposed as 4 weeks and 2 days).\n     * The results are explained by considering that the start date plus the\n     * calculated period result in the end date.\n     * <p>\n     * An alternative way of constructing a Period from two Partials\n     * is {@link #fieldDifference(ReadablePartial, ReadablePartial)}.\n     * That method handles all kinds of partials.\n     *\n     * @param start  the start of the period, must not be null\n     * @param end  the end of the period, must not be null\n     * @throws IllegalArgumentException if the partials are null or invalid\n     * @since 1.1\n     */\n    public Period(ReadablePartial start, ReadablePartial end) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Creates a period from two partially specified times.\n     * <p>\n     * The two partials must contain the same fields, thus you can specify\n     * two <code>LocalDate</code> objects, or two <code>LocalTime</code> objects,\n     * but not one of each.\n     * As these are Partial objects, time zones have no effect on the result.\n     * <p>\n     * The two partials must also both be contiguous - see\n     * {@link DateTimeUtils#isContiguous(ReadablePartial)} for a definition.\n     * Both <code>LocalDate</code> and <code>LocalTime</code> are contiguous.\n     * <p>\n     * Most calculations performed by this method have obvious results.\n     * The special case is where the calculation is from a \"long\" month to a \"short\" month.\n     * Here, the result favours increasing the months field rather than the days.\n     * For example, 2013-01-31 to 2013-02-28 is treated as one whole month.\n     * By contrast, 2013-01-31 to 2013-03-30 is treated as one month and 30 days.\n     * The results are explained by considering that the start date plus the\n     * calculated period result in the end date.\n     * <p>\n     * An alternative way of constructing a Period from two Partials\n     * is {@link #fieldDifference(ReadablePartial, ReadablePartial)}.\n     * That method handles all kinds of partials.\n     *\n     * @param start  the start of the period, must not be null\n     * @param end  the end of the period, must not be null\n     * @param type  which set of fields this period supports, null means standard\n     * @throws IllegalArgumentException if the partials are null or invalid\n     * @since 1.1\n     */\n    public Period(ReadablePartial start, ReadablePartial end, PeriodType type) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Creates a period from the given start point and the duration.\n     *\n     * @param startInstant  the interval start, null means now\n     * @param duration  the duration of the interval, null means zero-length\n     */\n    public Period(ReadableInstant startInstant, ReadableDuration duration) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Creates a period from the given start point and the duration.\n     *\n     * @param startInstant  the interval start, null means now\n     * @param duration  the duration of the interval, null means zero-length\n     * @param type  which set of fields this period supports, null means standard\n     */\n    public Period(ReadableInstant startInstant, ReadableDuration duration, PeriodType type) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Creates a period from the given duration and end point.\n     *\n     * @param duration  the duration of the interval, null means zero-length\n     * @param endInstant  the interval end, null means now\n     */\n    public Period(ReadableDuration duration, ReadableInstant endInstant) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Creates a period from the given duration and end point.\n     *\n     * @param duration  the duration of the interval, null means zero-length\n     * @param endInstant  the interval end, null means now\n     * @param type  which set of fields this period supports, null means standard\n     */\n    public Period(ReadableDuration duration, ReadableInstant endInstant, PeriodType type) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Creates a period by converting or copying from another object.\n     * <p>\n     * The recognised object types are defined in\n     * {@link org.joda.time.convert.ConverterManager ConverterManager} and\n     * include ReadablePeriod, ReadableInterval and String.\n     * The String formats are described by {@link ISOPeriodFormat#standard()}.\n     *\n     * @param period  period to convert\n     * @throws IllegalArgumentException if period is invalid\n     * @throws UnsupportedOperationException if an unsupported field's value is non-zero\n     */\n    public Period(Object period) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Creates a period by converting or copying from another object.\n     * <p>\n     * The recognised object types are defined in\n     * {@link org.joda.time.convert.ConverterManager ConverterManager} and\n     * include ReadablePeriod, ReadableInterval and String.\n     * The String formats are described by {@link ISOPeriodFormat#standard()}.\n     *\n     * @param period  period to convert\n     * @param type  which set of fields this period supports, null means use converter\n     * @throws IllegalArgumentException if period is invalid\n     * @throws UnsupportedOperationException if an unsupported field's value is non-zero\n     */\n    public Period(Object period, PeriodType type) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Creates a period by converting or copying from another object.\n     * <p>\n     * The recognised object types are defined in\n     * {@link org.joda.time.convert.ConverterManager ConverterManager} and\n     * include ReadablePeriod, ReadableInterval and String.\n     * The String formats are described by {@link ISOPeriodFormat#standard()}.\n     *\n     * @param period  period to convert\n     * @param chrono  the chronology to use, null means ISO in default zone\n     * @throws IllegalArgumentException if period is invalid\n     * @throws UnsupportedOperationException if an unsupported field's value is non-zero\n     */\n    public Period(Object period, Chronology chrono) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Creates a period by converting or copying from another object.\n     * <p>\n     * The recognised object types are defined in\n     * {@link org.joda.time.convert.ConverterManager ConverterManager} and\n     * include ReadablePeriod, ReadableInterval and String.\n     * The String formats are described by {@link ISOPeriodFormat#standard()}.\n     *\n     * @param period  period to convert\n     * @param type  which set of fields this period supports, null means use converter\n     * @param chrono  the chronology to use, null means ISO in default zone\n     * @throws IllegalArgumentException if period is invalid\n     * @throws UnsupportedOperationException if an unsupported field's value is non-zero\n     */\n    public Period(Object period, PeriodType type, Chronology chrono) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Constructor used when we trust ourselves.\n     *\n     * @param values  the values to use, not null, not cloned\n     * @param type  which set of fields this period supports, not null\n     */\n    private Period(int[] values, PeriodType type) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Get this period as an immutable <code>Period</code> object\n     * by returning <code>this</code>.\n     * \n     * @return <code>this</code>\n     */\n    public Period toPeriod() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the years field part of the period.\n     * \n     * @return the number of years in the period, zero if unsupported\n     */\n    public int getYears() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Gets the months field part of the period.\n     * \n     * @return the number of months in the period, zero if unsupported\n     */\n    public int getMonths() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Gets the weeks field part of the period.\n     * \n     * @return the number of weeks in the period, zero if unsupported\n     */\n    public int getWeeks() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Gets the days field part of the period.\n     * \n     * @return the number of days in the period, zero if unsupported\n     */\n    public int getDays() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the hours field part of the period.\n     * \n     * @return the number of hours in the period, zero if unsupported\n     */\n    public int getHours() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Gets the minutes field part of the period.\n     * \n     * @return the number of minutes in the period, zero if unsupported\n     */\n    public int getMinutes() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Gets the seconds field part of the period.\n     * \n     * @return the number of seconds in the period, zero if unsupported\n     */\n    public int getSeconds() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Gets the millis field part of the period.\n     * \n     * @return the number of millis in the period, zero if unsupported\n     */\n    public int getMillis() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Creates a new Period instance with the same field values but\n     * different PeriodType.\n     * <p>\n     * This period instance is immutable and unaffected by this method call.\n     * \n     * @param type  the period type to use, null means standard\n     * @return the new period instance\n     * @throws IllegalArgumentException if the new period won't accept all of the current fields\n     */\n    public Period withPeriodType(PeriodType type) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Creates a new Period instance with the fields from the specified period\n     * copied on top of those from this period.\n     * <p>\n     * This period instance is immutable and unaffected by this method call.\n     * \n     * @param period  the period to copy from, null ignored\n     * @return the new period instance\n     * @throws IllegalArgumentException if a field type is unsupported\n     */\n    public Period withFields(ReadablePeriod period) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Creates a new Period instance with the specified field set to a new value.\n     * <p>\n     * This period instance is immutable and unaffected by this method call.\n     * \n     * @param field  the field to set, not null\n     * @param value  the value to set to\n     * @return the new period instance\n     * @throws IllegalArgumentException if the field type is null or unsupported\n     */\n    public Period withField(DurationFieldType field, int value) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Creates a new Period instance with the valueToAdd added to the specified field.\n     * <p>\n     * This period instance is immutable and unaffected by this method call.\n     * \n     * @param field  the field to set, not null\n     * @param value  the value to add\n     * @return the new period instance\n     * @throws IllegalArgumentException if the field type is null or unsupported\n     */\n    public Period withFieldAdded(DurationFieldType field, int value) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a new period with the specified number of years.\n     * <p>\n     * This period instance is immutable and unaffected by this method call.\n     *\n     * @param years  the amount of years to add, may be negative\n     * @return the new period with the increased years\n     * @throws UnsupportedOperationException if the field is not supported\n     */\n    public Period withYears(int years) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns a new period with the specified number of months.\n     * <p>\n     * This period instance is immutable and unaffected by this method call.\n     *\n     * @param months  the amount of months to add, may be negative\n     * @return the new period with the increased months\n     * @throws UnsupportedOperationException if the field is not supported\n     */\n    public Period withMonths(int months) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns a new period with the specified number of weeks.\n     * <p>\n     * This period instance is immutable and unaffected by this method call.\n     *\n     * @param weeks  the amount of weeks to add, may be negative\n     * @return the new period with the increased weeks\n     * @throws UnsupportedOperationException if the field is not supported\n     */\n    public Period withWeeks(int weeks) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns a new period with the specified number of days.\n     * <p>\n     * This period instance is immutable and unaffected by this method call.\n     *\n     * @param days  the amount of days to add, may be negative\n     * @return the new period with the increased days\n     * @throws UnsupportedOperationException if the field is not supported\n     */\n    public Period withDays(int days) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns a new period with the specified number of hours.\n     * <p>\n     * This period instance is immutable and unaffected by this method call.\n     *\n     * @param hours  the amount of hours to add, may be negative\n     * @return the new period with the increased hours\n     * @throws UnsupportedOperationException if the field is not supported\n     */\n    public Period withHours(int hours) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns a new period with the specified number of minutes.\n     * <p>\n     * This period instance is immutable and unaffected by this method call.\n     *\n     * @param minutes  the amount of minutes to add, may be negative\n     * @return the new period with the increased minutes\n     * @throws UnsupportedOperationException if the field is not supported\n     */\n    public Period withMinutes(int minutes) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns a new period with the specified number of seconds.\n     * <p>\n     * This period instance is immutable and unaffected by this method call.\n     *\n     * @param seconds  the amount of seconds to add, may be negative\n     * @return the new period with the increased seconds\n     * @throws UnsupportedOperationException if the field is not supported\n     */\n    public Period withSeconds(int seconds) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns a new period with the specified number of millis.\n     * <p>\n     * This period instance is immutable and unaffected by this method call.\n     *\n     * @param millis  the amount of millis to add, may be negative\n     * @return the new period with the increased millis\n     * @throws UnsupportedOperationException if the field is not supported\n     */\n    public Period withMillis(int millis) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a new period with the specified period added.\n     * <p>\n     * Each field of the period is added separately. Thus a period of\n     * 2 hours 30 minutes plus 3 hours 40 minutes will produce a result\n     * of 5 hours 70 minutes - see {@link #normalizedStandard()}.\n     * <p>\n     * If the period being added contains a non-zero amount for a field that\n     * is not supported in this period then an exception is thrown.\n     * <p>\n     * This period instance is immutable and unaffected by this method call.\n     *\n     * @param period  the period to add, null adds zero and returns this\n     * @return the new updated period\n     * @throws UnsupportedOperationException if any field is not supported\n     * @since 1.5\n     */\n    public Period plus(ReadablePeriod period) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a new period with the specified number of years added.\n     * <p>\n     * This period instance is immutable and unaffected by this method call.\n     *\n     * @param years  the amount of years to add, may be negative\n     * @return the new period with the increased years\n     * @throws UnsupportedOperationException if the field is not supported\n     */\n    public Period plusYears(int years) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns a new period plus the specified number of months added.\n     * <p>\n     * This period instance is immutable and unaffected by this method call.\n     *\n     * @param months  the amount of months to add, may be negative\n     * @return the new period plus the increased months\n     * @throws UnsupportedOperationException if the field is not supported\n     */\n    public Period plusMonths(int months) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns a new period plus the specified number of weeks added.\n     * <p>\n     * This period instance is immutable and unaffected by this method call.\n     *\n     * @param weeks  the amount of weeks to add, may be negative\n     * @return the new period plus the increased weeks\n     * @throws UnsupportedOperationException if the field is not supported\n     */\n    public Period plusWeeks(int weeks) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns a new period plus the specified number of days added.\n     * <p>\n     * This period instance is immutable and unaffected by this method call.\n     *\n     * @param days  the amount of days to add, may be negative\n     * @return the new period plus the increased days\n     * @throws UnsupportedOperationException if the field is not supported\n     */\n    public Period plusDays(int days) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns a new period plus the specified number of hours added.\n     * <p>\n     * This period instance is immutable and unaffected by this method call.\n     *\n     * @param hours  the amount of hours to add, may be negative\n     * @return the new period plus the increased hours\n     * @throws UnsupportedOperationException if the field is not supported\n     */\n    public Period plusHours(int hours) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns a new period plus the specified number of minutes added.\n     * <p>\n     * This period instance is immutable and unaffected by this method call.\n     *\n     * @param minutes  the amount of minutes to add, may be negative\n     * @return the new period plus the increased minutes\n     * @throws UnsupportedOperationException if the field is not supported\n     */\n    public Period plusMinutes(int minutes) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns a new period plus the specified number of seconds added.\n     * <p>\n     * This period instance is immutable and unaffected by this method call.\n     *\n     * @param seconds  the amount of seconds to add, may be negative\n     * @return the new period plus the increased seconds\n     * @throws UnsupportedOperationException if the field is not supported\n     */\n    public Period plusSeconds(int seconds) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns a new period plus the specified number of millis added.\n     * <p>\n     * This period instance is immutable and unaffected by this method call.\n     *\n     * @param millis  the amount of millis to add, may be negative\n     * @return the new period plus the increased millis\n     * @throws UnsupportedOperationException if the field is not supported\n     */\n    public Period plusMillis(int millis) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a new period with the specified period subtracted.\n     * <p>\n     * Each field of the period is subtracted separately. Thus a period of\n     * 3 hours 30 minutes minus 2 hours 40 minutes will produce a result\n     * of 1 hour and -10 minutes - see {@link #normalizedStandard()}.\n     * <p>\n     * If the period being added contains a non-zero amount for a field that\n     * is not supported in this period then an exception is thrown.\n     * <p>\n     * This period instance is immutable and unaffected by this method call.\n     *\n     * @param period  the period to add, null adds zero and returns this\n     * @return the new updated period\n     * @throws UnsupportedOperationException if any field is not supported\n     * @since 1.5\n     */\n    public Period minus(ReadablePeriod period) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a new period with the specified number of years taken away.\n     * <p>\n     * This period instance is immutable and unaffected by this method call.\n     *\n     * @param years  the amount of years to take away, may be negative\n     * @return the new period with the increased years\n     * @throws UnsupportedOperationException if the field is not supported\n     */\n    public Period minusYears(int years) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns a new period minus the specified number of months taken away.\n     * <p>\n     * This period instance is immutable and unaffected by this method call.\n     *\n     * @param months  the amount of months to take away, may be negative\n     * @return the new period minus the increased months\n     * @throws UnsupportedOperationException if the field is not supported\n     */\n    public Period minusMonths(int months) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns a new period minus the specified number of weeks taken away.\n     * <p>\n     * This period instance is immutable and unaffected by this method call.\n     *\n     * @param weeks  the amount of weeks to take away, may be negative\n     * @return the new period minus the increased weeks\n     * @throws UnsupportedOperationException if the field is not supported\n     */\n    public Period minusWeeks(int weeks) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns a new period minus the specified number of days taken away.\n     * <p>\n     * This period instance is immutable and unaffected by this method call.\n     *\n     * @param days  the amount of days to take away, may be negative\n     * @return the new period minus the increased days\n     * @throws UnsupportedOperationException if the field is not supported\n     */\n    public Period minusDays(int days) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns a new period minus the specified number of hours taken away.\n     * <p>\n     * This period instance is immutable and unaffected by this method call.\n     *\n     * @param hours  the amount of hours to take away, may be negative\n     * @return the new period minus the increased hours\n     * @throws UnsupportedOperationException if the field is not supported\n     */\n    public Period minusHours(int hours) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns a new period minus the specified number of minutes taken away.\n     * <p>\n     * This period instance is immutable and unaffected by this method call.\n     *\n     * @param minutes  the amount of minutes to take away, may be negative\n     * @return the new period minus the increased minutes\n     * @throws UnsupportedOperationException if the field is not supported\n     */\n    public Period minusMinutes(int minutes) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns a new period minus the specified number of seconds taken away.\n     * <p>\n     * This period instance is immutable and unaffected by this method call.\n     *\n     * @param seconds  the amount of seconds to take away, may be negative\n     * @return the new period minus the increased seconds\n     * @throws UnsupportedOperationException if the field is not supported\n     */\n    public Period minusSeconds(int seconds) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns a new period minus the specified number of millis taken away.\n     * <p>\n     * This period instance is immutable and unaffected by this method call.\n     *\n     * @param millis  the amount of millis to take away, may be negative\n     * @return the new period minus the increased millis\n     * @throws UnsupportedOperationException if the field is not supported\n     */\n    public Period minusMillis(int millis) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a new instance with each element in this period multiplied\n     * by the specified scalar.\n     *\n     * @param scalar  the scalar to multiply by, not null\n     * @return a {@code Period} based on this period with the amounts multiplied by the scalar, never null\n     * @throws ArithmeticException if the capacity of any field is exceeded\n     * @since 2.1\n     */\n    public Period multipliedBy(int scalar) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns a new instance with each amount in this period negated.\n     *\n     * @return a {@code Period} based on this period with the amounts negated, never null\n     * @throws ArithmeticException if any field has the minimum value\n     * @since 2.1\n     */\n    public Period negated() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Converts this period to a period in weeks assuming a\n     * 7 day week, 24 hour day, 60 minute hour and 60 second minute.\n     * <p>\n     * This method allows you to convert between different types of period.\n     * However to achieve this it makes the assumption that all\n     * weeks are 7 days, all days are 24 hours, all hours are 60 minutes and\n     * all minutes are 60 seconds. This is not true when daylight savings time\n     * is considered, and may also not be true for some unusual chronologies.\n     * However, it is included as it is a useful operation for many\n     * applications and business rules.\n     * <p>\n     * If the period contains years or months, an exception will be thrown.\n     * \n     * @return a period representing the number of standard weeks in this period\n     * @throws UnsupportedOperationException if the period contains years or months\n     * @throws ArithmeticException if the number of weeks is too large to be represented\n     * @since 1.5\n     */\n    public Weeks toStandardWeeks() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Converts this period to a period in days assuming a\n     * 7 day week, 24 hour day, 60 minute hour and 60 second minute.\n     * <p>\n     * This method allows you to convert between different types of period.\n     * However to achieve this it makes the assumption that all\n     * weeks are 7 days, all days are 24 hours, all hours are 60 minutes and\n     * all minutes are 60 seconds. This is not true when daylight savings time\n     * is considered, and may also not be true for some unusual chronologies.\n     * However, it is included as it is a useful operation for many\n     * applications and business rules.\n     * <p>\n     * If the period contains years or months, an exception will be thrown.\n     * \n     * @return a period representing the number of standard days in this period\n     * @throws UnsupportedOperationException if the period contains years or months\n     * @throws ArithmeticException if the number of days is too large to be represented\n     * @since 1.5\n     */\n    public Days toStandardDays() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Converts this period to a period in hours assuming a\n     * 7 day week, 24 hour day, 60 minute hour and 60 second minute.\n     * <p>\n     * This method allows you to convert between different types of period.\n     * However to achieve this it makes the assumption that all\n     * weeks are 7 days, all days are 24 hours, all hours are 60 minutes and\n     * all minutes are 60 seconds. This is not true when daylight savings time\n     * is considered, and may also not be true for some unusual chronologies.\n     * However, it is included as it is a useful operation for many\n     * applications and business rules.\n     * <p>\n     * If the period contains years or months, an exception will be thrown.\n     * \n     * @return a period representing the number of standard hours in this period\n     * @throws UnsupportedOperationException if the period contains years or months\n     * @throws ArithmeticException if the number of hours is too large to be represented\n     * @since 1.5\n     */\n    public Hours toStandardHours() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Converts this period to a period in minutes assuming a\n     * 7 day week, 24 hour day, 60 minute hour and 60 second minute.\n     * <p>\n     * This method allows you to convert between different types of period.\n     * However to achieve this it makes the assumption that all\n     * weeks are 7 days, all days are 24 hours, all hours are 60 minutes and\n     * all minutes are 60 seconds. This is not true when daylight savings time\n     * is considered, and may also not be true for some unusual chronologies.\n     * However, it is included as it is a useful operation for many\n     * applications and business rules.\n     * <p>\n     * If the period contains years or months, an exception will be thrown.\n     * \n     * @return a period representing the number of standard minutes in this period\n     * @throws UnsupportedOperationException if the period contains years or months\n     * @throws ArithmeticException if the number of minutes is too large to be represented\n     * @since 1.5\n     */\n    public Minutes toStandardMinutes() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Converts this period to a period in seconds assuming a\n     * 7 day week, 24 hour day, 60 minute hour and 60 second minute.\n     * <p>\n     * This method allows you to convert between different types of period.\n     * However to achieve this it makes the assumption that all\n     * weeks are 7 days, all days are 24 hours, all hours are 60 minutes and\n     * all minutes are 60 seconds. This is not true when daylight savings time\n     * is considered, and may also not be true for some unusual chronologies.\n     * However, it is included as it is a useful operation for many\n     * applications and business rules.\n     * <p>\n     * If the period contains years or months, an exception will be thrown.\n     * \n     * @return a period representing the number of standard seconds in this period\n     * @throws UnsupportedOperationException if the period contains years or months\n     * @throws ArithmeticException if the number of seconds is too large to be represented\n     * @since 1.5\n     */\n    public Seconds toStandardSeconds() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Converts this period to a duration assuming a\n     * 7 day week, 24 hour day, 60 minute hour and 60 second minute.\n     * <p>\n     * This method allows you to convert from a period to a duration.\n     * However to achieve this it makes the assumption that all\n     * weeks are 7 days, all days are 24 hours, all hours are 60 minutes and\n     * all minutes are 60 seconds. This is not true when daylight savings time\n     * is considered, and may also not be true for some unusual chronologies.\n     * However, it is included as it is a useful operation for many\n     * applications and business rules.\n     * <p>\n     * If the period contains years or months, an exception will be thrown.\n     * \n     * @return a duration equivalent to this period\n     * @throws UnsupportedOperationException if the period contains years or months\n     * @since 1.5\n     */\n    public Duration toStandardDuration() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Check that there are no years or months in the period.\n     * \n     * @param destintionType  the destination type, not null\n     * @throws UnsupportedOperationException if the period contains years or months\n     */\n    private void checkYearsAndMonths(String destintionType) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Normalizes this period using standard rules, assuming a 12 month year,\n     * 7 day week, 24 hour day, 60 minute hour and 60 second minute.\n     * <p>\n     * This method allows you to normalize a period.\n     * However to achieve this it makes the assumption that all years are\n     * 12 months, all weeks are 7 days, all days are 24 hours,\n     * all hours are 60 minutes and all minutes are 60 seconds. This is not\n     * true when daylight savings time is considered, and may also not be true\n     * for some chronologies. However, it is included as it is a useful operation\n     * for many applications and business rules.\n     * <p>\n     * If the period contains years or months, then the months will be\n     * normalized to be between 0 and 11. The days field and below will be\n     * normalized as necessary, however this will not overflow into the months\n     * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.\n     * But a period of 1 month 40 days will remain as 1 month 40 days.\n     * <p>\n     * The result will always have a <code>PeriodType</code> of standard, thus\n     * days will be grouped into weeks.\n     * \n     * @return a normalized period equivalent to this period\n     * @throws ArithmeticException if any field is too large to be represented\n     * @since 1.5\n     */\n    public Period normalizedStandard() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Normalizes this period using standard rules, assuming a 12 month year,\n     * 7 day week, 24 hour day, 60 minute hour and 60 second minute,\n     * providing control over how the result is split into fields.\n     * <p>\n     * This method allows you to normalize a period.\n     * However to achieve this it makes the assumption that all years are\n     * 12 months, all weeks are 7 days, all days are 24 hours,\n     * all hours are 60 minutes and all minutes are 60 seconds. This is not\n     * true when daylight savings time is considered, and may also not be true\n     * for some chronologies. However, it is included as it is a useful operation\n     * for many applications and business rules.\n     * <p>\n     * If the period contains years or months, then the months will be\n     * normalized to be between 0 and 11. The days field and below will be\n     * normalized as necessary, however this will not overflow into the months\n     * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.\n     * But a period of 1 month 40 days will remain as 1 month 40 days.\n     * <p>\n     * The PeriodType parameter controls how the result is created. It allows\n     * you to omit certain fields from the result if desired. For example,\n     * you may not want the result to include weeks, in which case you pass\n     * in <code>PeriodType.yearMonthDayTime()</code>.\n     * \n     * @param type  the period type of the new period, null means standard type\n     * @return a normalized period equivalent to this period\n     * @throws ArithmeticException if any field is too large to be represented\n     * @throws UnsupportedOperationException if this period contains non-zero\n     *  years or months but the specified period type does not support them\n     * @since 1.5\n     */\n    public Period normalizedStandard(PeriodType type) {\n         //The specific code has been omitted, but there is no error\n        }\n\n}"}