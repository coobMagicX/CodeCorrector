{"PeepholeOptimizationsPass": "class PeepholeOptimizationsPass\n    implements CompilerPass {\n  private AbstractCompiler compiler;\n\n  // Use an array here for faster iteration compared to ImmutableSet\n  private final AbstractPeepholeOptimization[] peepholeOptimizations;\n\n  // Track whether the a scope has been modified so that it can be revisited\n  // immediately.\n  private StateStack traversalState = new StateStack();\n\n  static private class ScopeState {\n         //The specific code has been omitted, but there is no error\n        }\n\n  static private class StateStack {\n         //The specific code has been omitted, but there is no error\n        }\n\n  private class PeepholeChangeHandler implements CodeChangeHandler {\n    @Override\n    public void reportChange() {\n         //The specific code has been omitted, but there is no error\n        }\n  }\n\n  /**\n   * Creates a peephole optimization pass that runs the given\n   * optimizations.\n   */\n  PeepholeOptimizationsPass(AbstractCompiler compiler,\n      AbstractPeepholeOptimization... optimizations) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  public AbstractCompiler getCompiler() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  @Override\n  public void process(Node externs, Node root) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  private void traverse(Node node) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  private boolean shouldRetraverse(Node node) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  private boolean shouldVisit(Node node) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  private void exitNode(Node node) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  public void visit(Node n) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /**\n   * Make sure that all the optimizations have the current traversal so they\n   * can report errors.\n   */\n  private void beginTraversal() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  private void endTraversal() {\n         //The specific code has been omitted, but there is no error\n        }\n}", "ScopeState": "  static private class ScopeState {\n         //The specific code has been omitted, but there is no error\n        }", "StateStack": "  static private class StateStack {\n         //The specific code has been omitted, but there is no error\n        }", "PeepholeChangeHandler": "  private class PeepholeChangeHandler implements CodeChangeHandler {\n    @Override\n    public void reportChange() {\n         //The specific code has been omitted, but there is no error\n        }\n  }"}