{"VerificationOverTimeImpl": "public class VerificationOverTimeImpl implements VerificationMode {\n\n    private final long pollingPeriodMillis;\n    private final long durationMillis;\n    private final VerificationMode delegate;\n    private final boolean returnOnSuccess;\n    private final Timer timer;\n\n    /**\n     * Create this verification mode, to be used to verify invocation ongoing data later.\n     *\n     * @param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied\n     * @param durationMillis The max time to wait (in millis) for the delegate verification mode to be satisfied\n     * @param delegate The verification mode to delegate overall success or failure to\n     * @param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in\n     *                        {@link org.mockito.verification.VerificationWithTimeout}, or to only return once\n     *                        the delegate is satisfied and the full duration has passed (as in\n     *                        {@link org.mockito.verification.VerificationAfterDelay}).\n     */\n    public VerificationOverTimeImpl(long pollingPeriodMillis, long durationMillis, VerificationMode delegate, boolean returnOnSuccess) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Create this verification mode, to be used to verify invocation ongoing data later.\n     *\n     * @param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied\n     * @param durationMillis The max time to wait (in millis) for the delegate verification mode to be satisfied\n     * @param delegate The verification mode to delegate overall success or failure to\n     * @param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in\n     *                        {@link org.mockito.verification.VerificationWithTimeout}, or to only return once\n     *                        the delegate is satisfied and the full duration has passed (as in\n     *                        {@link org.mockito.verification.VerificationAfterDelay}).\n     * @param timer Checker of whether the duration of the verification is still acceptable\n     */\n    public VerificationOverTimeImpl(long pollingPeriodMillis, long durationMillis, VerificationMode delegate, boolean returnOnSuccess, Timer timer) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Verify the given ongoing verification data, and confirm that it satisfies the delegate verification mode\n     * before the full duration has passed.\n     *\n     * In practice, this polls the delegate verification mode until it is satisfied. If it is not satisfied once\n     * the full duration has passed, the last error returned by the delegate verification mode will be thrown\n     * here in turn. This may be thrown early if the delegate is unsatisfied and the verification mode is known\n     * to never recover from this situation (e.g. {@link AtMost}).\n     *\n     * If it is satisfied before the full duration has passed, behaviour is dependent on the returnOnSuccess parameter\n     * given in the constructor. If true, this verification mode is immediately satisfied once the delegate is. If\n     * false, this verification mode is not satisfied until the delegate is satisfied and the full time has passed.\n     *\n     * @throws MockitoAssertionError if the delegate verification mode does not succeed before the timeout\n     */\n    public void verify(VerificationData data) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    private AssertionError handleVerifyException(AssertionError e) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    protected boolean canRecoverFromFailure(VerificationMode verificationMode) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    private void sleep(long sleep) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    public long getPollingPeriod() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    public long getDuration() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    public VerificationMode getDelegate() {\n         //The specific code has been omitted, but there is no error\n        }\n\n}"}