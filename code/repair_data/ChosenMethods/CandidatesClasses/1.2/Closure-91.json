{"CheckGlobalThis": "final class CheckGlobalThis implements Callback {\n\n  static final DiagnosticType GLOBAL_THIS = DiagnosticType.warning(\n      \"JSC_USED_GLOBAL_THIS\",\n      \"dangerous use of the global 'this' object\");\n\n  private final AbstractCompiler compiler;\n  private final CheckLevel level;\n\n  /**\n   * If {@code assignLhsChild != null}, then the node being traversed is\n   * a descendant of the first child of an ASSIGN node. assignLhsChild's\n   * parent is this ASSIGN node.\n   */\n  private Node assignLhsChild = null;\n\n  CheckGlobalThis(AbstractCompiler compiler, CheckLevel level) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /**\n   * Since this pass reports errors only when a global {@code this} keyword\n   * is encountered, there is no reason to traverse non global contexts.\n   */\n  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  public void visit(NodeTraversal t, Node n, Node parent) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  private boolean shouldReportThis(Node n, Node parent) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /**\n   * Gets a function's JSDoc information, if it has any. Checks for a few\n   * patterns (ellipses show where JSDoc would be):\n   * <pre>\n   * ... function() {\n         //The specific code has been omitted, but there is no error\n        }\n   * ... x = function() {\n         //The specific code has been omitted, but there is no error\n        };\n   * var ... x = function() {\n         //The specific code has been omitted, but there is no error\n        };\n   * ... var x = function() {\n         //The specific code has been omitted, but there is no error\n        };\n   * </pre>\n   */\n  private JSDocInfo getFunctionJsDocInfo(Node n) {\n         //The specific code has been omitted, but there is no error\n        }\n}"}