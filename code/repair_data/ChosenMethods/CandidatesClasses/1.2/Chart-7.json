{"TimePeriodValues": "public class TimePeriodValues extends Series implements Serializable {\n\n    /** For serialization. */\n    static final long serialVersionUID = -2210593619794989709L;\n    \n    /** Default value for the domain description. */\n    protected static final String DEFAULT_DOMAIN_DESCRIPTION = \"Time\";\n\n    /** Default value for the range description. */\n    protected static final String DEFAULT_RANGE_DESCRIPTION = \"Value\";\n\n    /** A description of the domain. */\n    private String domain;\n\n    /** A description of the range. */\n    private String range;\n\n    /** The list of data pairs in the series. */\n    private List data;\n\n    /** Index of the time period with the minimum start milliseconds. */\n    private int minStartIndex = -1;\n    \n    /** Index of the time period with the maximum start milliseconds. */\n    private int maxStartIndex = -1;\n    \n    /** Index of the time period with the minimum middle milliseconds. */\n    private int minMiddleIndex = -1;\n    \n    /** Index of the time period with the maximum middle milliseconds. */\n    private int maxMiddleIndex = -1;\n    \n    /** Index of the time period with the minimum end milliseconds. */\n    private int minEndIndex = -1;\n    \n    /** Index of the time period with the maximum end milliseconds. */\n    private int maxEndIndex = -1;\n\n    /**\n     * Creates a new (empty) collection of time period values.\n     *\n     * @param name  the name of the series (<code>null</code> not permitted).\n     */\n    public TimePeriodValues(Comparable name) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Creates a new time series that contains no data.\n     * <P>\n     * Descriptions can be specified for the domain and range.  One situation\n     * where this is helpful is when generating a chart for the time series -\n     * axis labels can be taken from the domain and range description.\n     *\n     * @param name  the name of the series (<code>null</code> not permitted).\n     * @param domain  the domain description.\n     * @param range  the range description.\n     */\n    public TimePeriodValues(Comparable name, String domain, String range) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the domain description.\n     *\n     * @return The domain description (possibly <code>null</code>).\n     * \n     * @see #getRangeDescription()\n     * @see #setDomainDescription(String)\n     */\n    public String getDomainDescription() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the domain description and fires a property change event (with the\n     * property name <code>Domain</code> if the description changes).\n     *\n     * @param description  the new description (<code>null</code> permitted).\n     * \n     * @see #getDomainDescription()\n     */\n    public void setDomainDescription(String description) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the range description.\n     *\n     * @return The range description (possibly <code>null</code>).\n     * \n     * @see #getDomainDescription()\n     * @see #setRangeDescription(String)\n     */\n    public String getRangeDescription() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the range description and fires a property change event with the\n     * name <code>Range</code>.\n     *\n     * @param description  the new description (<code>null</code> permitted).\n     * \n     * @see #getRangeDescription()\n     */\n    public void setRangeDescription(String description) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the number of items in the series.\n     *\n     * @return The item count.\n     */\n    public int getItemCount() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns one data item for the series.\n     *\n     * @param index  the item index (in the range <code>0</code> to \n     *     <code>getItemCount() - 1</code>).\n     *\n     * @return One data item for the series.\n     */\n    public TimePeriodValue getDataItem(int index) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the time period at the specified index.\n     *\n     * @param index  the item index (in the range <code>0</code> to \n     *     <code>getItemCount() - 1</code>).\n     *\n     * @return The time period at the specified index.\n     * \n     * @see #getDataItem(int)\n     */\n    public TimePeriod getTimePeriod(int index) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the value at the specified index.\n     *\n     * @param index  the item index (in the range <code>0</code> to \n     *     <code>getItemCount() - 1</code>).\n     *\n     * @return The value at the specified index (possibly <code>null</code>).\n     * \n     * @see #getDataItem(int)\n     */\n    public Number getValue(int index) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Adds a data item to the series and sends a {@link SeriesChangeEvent} to\n     * all registered listeners.\n     *\n     * @param item  the item (<code>null</code> not permitted).\n     */\n    public void add(TimePeriodValue item) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Update the index values for the maximum and minimum bounds.\n     * \n     * @param period  the time period.\n     * @param index  the index of the time period.\n     */\n    private void updateBounds(TimePeriod period, int index) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Recalculates the bounds for the collection of items.\n     */\n    private void recalculateBounds() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Adds a new data item to the series and sends a {@link SeriesChangeEvent}\n     * to all registered listeners.\n     *\n     * @param period  the time period (<code>null</code> not permitted).\n     * @param value  the value.\n     * \n     * @see #add(TimePeriod, Number)\n     */\n    public void add(TimePeriod period, double value) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Adds a new data item to the series and sends a {@link SeriesChangeEvent}\n     * to all registered listeners.\n     *\n     * @param period  the time period (<code>null</code> not permitted).\n     * @param value  the value (<code>null</code> permitted).\n     */\n    public void add(TimePeriod period, Number value) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Updates (changes) the value of a data item and sends a \n     * {@link SeriesChangeEvent} to all registered listeners.\n     *\n     * @param index  the index of the data item to update.\n     * @param value  the new value (<code>null</code> not permitted).\n     */\n    public void update(int index, Number value) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Deletes data from start until end index (end inclusive) and sends a\n     * {@link SeriesChangeEvent} to all registered listeners.\n     *\n     * @param start  the index of the first period to delete.\n     * @param end  the index of the last period to delete.\n     */\n    public void delete(int start, int end) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Tests the series for equality with another object.\n     *\n     * @param obj  the object (<code>null</code> permitted).\n     *\n     * @return <code>true</code> or <code>false</code>.\n     */\n    public boolean equals(Object obj) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns a hash code value for the object.\n     *\n     * @return The hashcode\n     */\n    public int hashCode() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns a clone of the collection.\n     * <P>\n     * Notes:\n     * <ul>\n     *   <li>no need to clone the domain and range descriptions, since String \n     *       object is immutable;</li>\n     *   <li>we pass over to the more general method createCopy(start, end).\n     *   </li>\n     * </ul>\n     *\n     * @return A clone of the time series.\n     * \n     * @throws CloneNotSupportedException if there is a cloning problem.\n     */\n    public Object clone() throws CloneNotSupportedException {\n        Object clone = createCopy(0, getItemCount() - 1);\n        return clone;\n    }\n\n    /**\n     * Creates a new instance by copying a subset of the data in this \n     * collection.\n     *\n     * @param start  the index of the first item to copy.\n     * @param end  the index of the last item to copy.\n     *\n     * @return A copy of a subset of the items.\n     * \n     * @throws CloneNotSupportedException if there is a cloning problem.\n     */\n    public TimePeriodValues createCopy(int start, int end) \n        throws CloneNotSupportedException {\n\n        TimePeriodValues copy = (TimePeriodValues) super.clone();\n\n        copy.data = new ArrayList();\n        if (this.data.size() > 0) {\n            for (int index = start; index <= end; index++) {\n         //The specific code has been omitted, but there is no error\n        }\n        }\n        return copy;\n\n    }\n    \n    /**\n     * Returns the index of the time period with the minimum start milliseconds.\n     * \n     * @return The index.\n     */\n    public int getMinStartIndex() {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Returns the index of the time period with the maximum start milliseconds.\n     * \n     * @return The index.\n     */\n    public int getMaxStartIndex() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the index of the time period with the minimum middle \n     * milliseconds.\n     * \n     * @return The index.\n     */\n    public int getMinMiddleIndex() {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Returns the index of the time period with the maximum middle \n     * milliseconds.\n     * \n     * @return The index.\n     */\n    public int getMaxMiddleIndex() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the index of the time period with the minimum end milliseconds.\n     * \n     * @return The index.\n     */\n    public int getMinEndIndex() {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Returns the index of the time period with the maximum end milliseconds.\n     * \n     * @return The index.\n     */\n    public int getMaxEndIndex() {\n         //The specific code has been omitted, but there is no error\n        }\n\n}"}