{"InlineObjectLiterals": "class InlineObjectLiterals implements CompilerPass {\n\n  public static final String VAR_PREFIX = \"JSCompiler_object_inline_\";\n\n  private final AbstractCompiler compiler;\n\n  private final Supplier<String> safeNameIdSupplier;\n\n  InlineObjectLiterals(\n      AbstractCompiler compiler,\n      Supplier<String> safeNameIdSupplier) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  @Override\n  public void process(Node externs, Node root) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /**\n   * Builds up information about nodes in each scope. When exiting the\n   * scope, inspects all variables in that scope, and inlines any\n   * that we can.\n   */\n  private class InliningBehavior implements Behavior {\n\n    /**\n     * A list of variables that should not be inlined, because their\n     * reference information is out of sync with the state of the AST.\n     */\n    private final Set<Var> staleVars = Sets.newHashSet();\n\n    @Override\n    public void afterExitScope(NodeTraversal t, ReferenceMap referenceMap) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * If there are any variable references in the given node tree,\n     * blacklist them to prevent the pass from trying to inline the\n     * variable. Any code modifications will have potentially made the\n     * ReferenceCollection invalid.\n     */\n    private void blacklistVarReferencesInTree(Node root, final Scope scope) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Whether the given variable is forbidden from being inlined.\n     */\n    private boolean isVarInlineForbidden(Var var) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Counts the number of direct (full) references to an object.\n     * Specifically, we check for references of the following type:\n     * <pre>\n     *   x;\n     *   x.fn();\n     * </pre>\n     */\n    private boolean isInlinableObject(List<Reference> refs) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    private boolean isVarOrAssignExprLhs(Node n) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Computes a list of ever-referenced keys in the object being\n     * inlined, and returns a mapping of key name -> generated\n     * variable name.\n     */\n    private Map<String, String> computeVarList(\n        Var v, ReferenceCollection referenceInfo) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Populates a map of key names -> initial assigned values. The\n     * object literal these are being pulled from is invalidated as\n     * a result.\n     */\n    private void fillInitialValues(Reference init, Map<String, Node> initvals) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Replaces an assignment like x = {...} with t1=a,t2=b,t3=c,true.\n     * Note that the resulting expression will always evaluate to\n     * true, as would the x = {...} expression.\n     */\n    private void replaceAssignmentExpression(Var v, Reference ref,\n                                             Map<String, String> varmap) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Splits up the object literal into individual variables, and\n     * updates all uses.\n     */\n    private void splitObject(Var v, Reference declaration,\n                             Reference init,\n                             ReferenceCollection referenceInfo) {\n         //The specific code has been omitted, but there is no error\n        }\n  }\n}", "InliningBehavior": "  private class InliningBehavior implements Behavior {\n\n    /**\n     * A list of variables that should not be inlined, because their\n     * reference information is out of sync with the state of the AST.\n     */\n    private final Set<Var> staleVars = Sets.newHashSet();\n\n    @Override\n    public void afterExitScope(NodeTraversal t, ReferenceMap referenceMap) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * If there are any variable references in the given node tree,\n     * blacklist them to prevent the pass from trying to inline the\n     * variable. Any code modifications will have potentially made the\n     * ReferenceCollection invalid.\n     */\n    private void blacklistVarReferencesInTree(Node root, final Scope scope) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Whether the given variable is forbidden from being inlined.\n     */\n    private boolean isVarInlineForbidden(Var var) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Counts the number of direct (full) references to an object.\n     * Specifically, we check for references of the following type:\n     * <pre>\n     *   x;\n     *   x.fn();\n     * </pre>\n     */\n    private boolean isInlinableObject(List<Reference> refs) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    private boolean isVarOrAssignExprLhs(Node n) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Computes a list of ever-referenced keys in the object being\n     * inlined, and returns a mapping of key name -> generated\n     * variable name.\n     */\n    private Map<String, String> computeVarList(\n        Var v, ReferenceCollection referenceInfo) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Populates a map of key names -> initial assigned values. The\n     * object literal these are being pulled from is invalidated as\n     * a result.\n     */\n    private void fillInitialValues(Reference init, Map<String, Node> initvals) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Replaces an assignment like x = {...} with t1=a,t2=b,t3=c,true.\n     * Note that the resulting expression will always evaluate to\n     * true, as would the x = {...} expression.\n     */\n    private void replaceAssignmentExpression(Var v, Reference ref,\n                                             Map<String, String> varmap) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Splits up the object literal into individual variables, and\n     * updates all uses.\n     */\n    private void splitObject(Var v, Reference declaration,\n                             Reference init,\n                             ReferenceCollection referenceInfo) {\n         //The specific code has been omitted, but there is no error\n        }\n  }"}