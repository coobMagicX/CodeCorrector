{"XYPlot": "public class XYPlot extends Plot implements ValueAxisPlot, Pannable,\n        Selectable, Zoomable, RendererChangeListener, Cloneable,\n        PublicCloneable, Serializable {\n\n    /** For serialization. */\n    private static final long serialVersionUID = 7044148245716569264L;\n\n    /** The default grid line stroke. */\n    public static final Stroke DEFAULT_GRIDLINE_STROKE = new BasicStroke(0.5f,\n            BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 0.0f,\n            new float[] {2.0f, 2.0f}, 0.0f);\n\n    /** The default grid line paint. */\n    public static final Paint DEFAULT_GRIDLINE_PAINT = Color.WHITE;\n\n    /** The default crosshair visibility. */\n    public static final boolean DEFAULT_CROSSHAIR_VISIBLE = false;\n\n    /** The default crosshair stroke. */\n    public static final Stroke DEFAULT_CROSSHAIR_STROKE\n            = DEFAULT_GRIDLINE_STROKE;\n\n    /** The default crosshair paint. */\n    public static final Paint DEFAULT_CROSSHAIR_PAINT = Color.blue;\n\n    /** The resourceBundle for the localization. */\n    protected static ResourceBundle localizationResources\n            = ResourceBundleWrapper.getBundle(\n                    \"org.jfree.chart.plot.LocalizationBundle\");\n\n    /** The plot orientation. */\n    private PlotOrientation orientation;\n\n    /** The offset between the data area and the axes. */\n    private RectangleInsets axisOffset;\n\n    /** The domain axis / axes (used for the x-values). */\n    private ObjectList domainAxes;\n\n    /** The domain axis locations. */\n    private ObjectList domainAxisLocations;\n\n    /** The range axis (used for the y-values). */\n    private ObjectList rangeAxes;\n\n    /** The range axis location. */\n    private ObjectList rangeAxisLocations;\n\n    /** Storage for the datasets. */\n    private ObjectList datasets;\n\n    /** Storage for the renderers. */\n    private ObjectList renderers;\n\n    /**\n     * Storage for the mapping between datasets/renderers and domain axes.  The\n     * keys in the map are Integer objects, corresponding to the dataset\n     * index.  The values in the map are List objects containing Integer\n     * objects (corresponding to the axis indices).  If the map contains no\n     * entry for a dataset, it is assumed to map to the primary domain axis\n     * (index = 0).\n     */\n    private Map datasetToDomainAxesMap;\n\n    /**\n     * Storage for the mapping between datasets/renderers and range axes.  The\n     * keys in the map are Integer objects, corresponding to the dataset\n     * index.  The values in the map are List objects containing Integer\n     * objects (corresponding to the axis indices).  If the map contains no\n     * entry for a dataset, it is assumed to map to the primary domain axis\n     * (index = 0).\n     */\n    private Map datasetToRangeAxesMap;\n\n    /** The origin point for the quadrants (if drawn). */\n    private transient Point2D quadrantOrigin = new Point2D.Double(0.0, 0.0);\n\n    /** The paint used for each quadrant. */\n    private transient Paint[] quadrantPaint\n            = new Paint[] {null, null, null, null};\n\n    /** A flag that controls whether the domain grid-lines are visible. */\n    private boolean domainGridlinesVisible;\n\n    /** The stroke used to draw the domain grid-lines. */\n    private transient Stroke domainGridlineStroke;\n\n    /** The paint used to draw the domain grid-lines. */\n    private transient Paint domainGridlinePaint;\n\n    /** A flag that controls whether the range grid-lines are visible. */\n    private boolean rangeGridlinesVisible;\n\n    /** The stroke used to draw the range grid-lines. */\n    private transient Stroke rangeGridlineStroke;\n\n    /** The paint used to draw the range grid-lines. */\n    private transient Paint rangeGridlinePaint;\n\n    /**\n     * A flag that controls whether the domain minor grid-lines are visible.\n     *\n     * @since 1.0.12\n     */\n    private boolean domainMinorGridlinesVisible;\n\n    /**\n     * The stroke used to draw the domain minor grid-lines.\n     *\n     * @since 1.0.12\n     */\n    private transient Stroke domainMinorGridlineStroke;\n\n    /**\n     * The paint used to draw the domain minor grid-lines.\n     *\n     * @since 1.0.12\n     */\n    private transient Paint domainMinorGridlinePaint;\n\n    /**\n     * A flag that controls whether the range minor grid-lines are visible.\n     *\n     * @since 1.0.12\n     */\n    private boolean rangeMinorGridlinesVisible;\n\n    /**\n     * The stroke used to draw the range minor grid-lines.\n     *\n     * @since 1.0.12\n     */\n    private transient Stroke rangeMinorGridlineStroke;\n\n    /**\n     * The paint used to draw the range minor grid-lines.\n     *\n     * @since 1.0.12\n     */\n    private transient Paint rangeMinorGridlinePaint;\n\n    /**\n     * A flag that controls whether or not the zero baseline against the domain\n     * axis is visible.\n     *\n     * @since 1.0.5\n     */\n    private boolean domainZeroBaselineVisible;\n\n    /**\n     * The stroke used for the zero baseline against the domain axis.\n     *\n     * @since 1.0.5\n     */\n    private transient Stroke domainZeroBaselineStroke;\n\n    /**\n     * The paint used for the zero baseline against the domain axis.\n     *\n     * @since 1.0.5\n     */\n    private transient Paint domainZeroBaselinePaint;\n\n    /**\n     * A flag that controls whether or not the zero baseline against the range\n     * axis is visible.\n     */\n    private boolean rangeZeroBaselineVisible;\n\n    /** The stroke used for the zero baseline against the range axis. */\n    private transient Stroke rangeZeroBaselineStroke;\n\n    /** The paint used for the zero baseline against the range axis. */\n    private transient Paint rangeZeroBaselinePaint;\n\n    /** A flag that controls whether or not a domain crosshair is drawn..*/\n    private boolean domainCrosshairVisible;\n\n    /** The domain crosshair value. */\n    private double domainCrosshairValue;\n\n    /** The pen/brush used to draw the crosshair (if any). */\n    private transient Stroke domainCrosshairStroke;\n\n    /** The color used to draw the crosshair (if any). */\n    private transient Paint domainCrosshairPaint;\n\n    /**\n     * A flag that controls whether or not the crosshair locks onto actual\n     * data points.\n     */\n    private boolean domainCrosshairLockedOnData = true;\n\n    /** A flag that controls whether or not a range crosshair is drawn..*/\n    private boolean rangeCrosshairVisible;\n\n    /** The range crosshair value. */\n    private double rangeCrosshairValue;\n\n    /** The pen/brush used to draw the crosshair (if any). */\n    private transient Stroke rangeCrosshairStroke;\n\n    /** The color used to draw the crosshair (if any). */\n    private transient Paint rangeCrosshairPaint;\n\n    /**\n     * A flag that controls whether or not the crosshair locks onto actual\n     * data points.\n     */\n    private boolean rangeCrosshairLockedOnData = true;\n\n    /** A map of lists of foreground markers (optional) for the domain axes. */\n    private Map foregroundDomainMarkers;\n\n    /** A map of lists of background markers (optional) for the domain axes. */\n    private Map backgroundDomainMarkers;\n\n    /** A map of lists of foreground markers (optional) for the range axes. */\n    private Map foregroundRangeMarkers;\n\n    /** A map of lists of background markers (optional) for the range axes. */\n    private Map backgroundRangeMarkers;\n\n    /**\n     * A (possibly empty) list of annotations for the plot.  The list should\n     * be initialised in the constructor and never allowed to be\n     * <code>null</code>.\n     */\n    private List annotations;\n\n    /** The paint used for the domain tick bands (if any). */\n    private transient Paint domainTickBandPaint;\n\n    /** The paint used for the range tick bands (if any). */\n    private transient Paint rangeTickBandPaint;\n\n    /** The fixed domain axis space. */\n    private AxisSpace fixedDomainAxisSpace;\n\n    /** The fixed range axis space. */\n    private AxisSpace fixedRangeAxisSpace;\n\n    /**\n     * The order of the dataset rendering (REVERSE draws the primary dataset\n     * last so that it appears to be on top).\n     */\n    private DatasetRenderingOrder datasetRenderingOrder\n            = DatasetRenderingOrder.REVERSE;\n\n    /**\n     * The order of the series rendering (REVERSE draws the primary series\n     * last so that it appears to be on top).\n     */\n    private SeriesRenderingOrder seriesRenderingOrder\n            = SeriesRenderingOrder.REVERSE;\n\n    /**\n     * The weight for this plot (only relevant if this is a subplot in a\n     * combined plot).\n     */\n    private int weight;\n\n    /**\n     * An optional collection of legend items that can be returned by the\n     * getLegendItems() method.\n     */\n    private LegendItemCollection fixedLegendItems;\n\n    /**\n     * A flag that controls whether or not panning is enabled for the domain\n     * axis/axes.\n     *\n     * @since 1.0.13\n     */\n    private boolean domainPannable;\n\n    /**\n     * A flag that controls whether or not panning is enabled for the range\n     * axis/axes.\n     *\n     * @since 1.0.13\n     */\n    private boolean rangePannable;\n\n    /**\n     * Creates a new <code>XYPlot</code> instance with no dataset, no axes and\n     * no renderer.  You should specify these items before using the plot.\n     */\n    public XYPlot() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Creates a new plot with the specified dataset, axes and renderer.  Any\n     * of the arguments can be <code>null</code>, but in that case you should\n     * take care to specify the value before using the plot (otherwise a\n     * <code>NullPointerException</code> may be thrown).\n     *\n     * @param dataset  the dataset (<code>null</code> permitted).\n     * @param domainAxis  the domain axis (<code>null</code> permitted).\n     * @param rangeAxis  the range axis (<code>null</code> permitted).\n     * @param renderer  the renderer (<code>null</code> permitted).\n     */\n    public XYPlot(XYDataset dataset,\n                  ValueAxis domainAxis,\n                  ValueAxis rangeAxis,\n                  XYItemRenderer renderer) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the plot type as a string.\n     *\n     * @return A short string describing the type of plot.\n     */\n    public String getPlotType() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the orientation of the plot.\n     *\n     * @return The orientation (never <code>null</code>).\n     *\n     * @see #setOrientation(PlotOrientation)\n     */\n    public PlotOrientation getOrientation() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the orientation for the plot and sends a {@link PlotChangeEvent} to\n     * all registered listeners.\n     *\n     * @param orientation  the orientation (<code>null</code> not allowed).\n     *\n     * @see #getOrientation()\n     */\n    public void setOrientation(PlotOrientation orientation) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the axis offset.\n     *\n     * @return The axis offset (never <code>null</code>).\n     *\n     * @see #setAxisOffset(RectangleInsets)\n     */\n    public RectangleInsets getAxisOffset() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the axis offsets (gap between the data area and the axes) and sends\n     * a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param offset  the offset (<code>null</code> not permitted).\n     *\n     * @see #getAxisOffset()\n     */\n    public void setAxisOffset(RectangleInsets offset) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the domain axis with index 0.  If the domain axis for this plot\n     * is <code>null</code>, then the method will return the parent plot's\n     * domain axis (if there is a parent plot).\n     *\n     * @return The domain axis (possibly <code>null</code>).\n     *\n     * @see #getDomainAxis(int)\n     * @see #setDomainAxis(ValueAxis)\n     */\n    public ValueAxis getDomainAxis() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the domain axis with the specified index, or <code>null</code>.\n     *\n     * @param index  the axis index.\n     *\n     * @return The axis (<code>null</code> possible).\n     *\n     * @see #setDomainAxis(int, ValueAxis)\n     */\n    public ValueAxis getDomainAxis(int index) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the domain axis for the plot and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param axis  the new axis (<code>null</code> permitted).\n     *\n     * @see #getDomainAxis()\n     * @see #setDomainAxis(int, ValueAxis)\n     */\n    public void setDomainAxis(ValueAxis axis) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets a domain axis and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param index  the axis index.\n     * @param axis  the axis (<code>null</code> permitted).\n     *\n     * @see #getDomainAxis(int)\n     * @see #setRangeAxis(int, ValueAxis)\n     */\n    public void setDomainAxis(int index, ValueAxis axis) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets a domain axis and, if requested, sends a {@link PlotChangeEvent} to\n     * all registered listeners.\n     *\n     * @param index  the axis index.\n     * @param axis  the axis.\n     * @param notify  notify listeners?\n     *\n     * @see #getDomainAxis(int)\n     */\n    public void setDomainAxis(int index, ValueAxis axis, boolean notify) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the domain axes for this plot and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param axes  the axes (<code>null</code> not permitted).\n     *\n     * @see #setRangeAxes(ValueAxis[])\n     */\n    public void setDomainAxes(ValueAxis[] axes) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the location of the primary domain axis.\n     *\n     * @return The location (never <code>null</code>).\n     *\n     * @see #setDomainAxisLocation(AxisLocation)\n     */\n    public AxisLocation getDomainAxisLocation() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the location of the primary domain axis and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param location  the location (<code>null</code> not permitted).\n     *\n     * @see #getDomainAxisLocation()\n     */\n    public void setDomainAxisLocation(AxisLocation location) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the location of the domain axis and, if requested, sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param location  the location (<code>null</code> not permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getDomainAxisLocation()\n     */\n    public void setDomainAxisLocation(AxisLocation location, boolean notify) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the edge for the primary domain axis (taking into account the\n     * plot's orientation).\n     *\n     * @return The edge.\n     *\n     * @see #getDomainAxisLocation()\n     * @see #getOrientation()\n     */\n    public RectangleEdge getDomainAxisEdge() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the number of domain axes.\n     *\n     * @return The axis count.\n     *\n     * @see #getRangeAxisCount()\n     */\n    public int getDomainAxisCount() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Clears the domain axes from the plot and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @see #clearRangeAxes()\n     */\n    public void clearDomainAxes() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Configures the domain axes.\n     */\n    public void configureDomainAxes() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the location for a domain axis.  If this hasn't been set\n     * explicitly, the method returns the location that is opposite to the\n     * primary domain axis location.\n     *\n     * @param index  the axis index.\n     *\n     * @return The location (never <code>null</code>).\n     *\n     * @see #setDomainAxisLocation(int, AxisLocation)\n     */\n    public AxisLocation getDomainAxisLocation(int index) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the location for a domain axis and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param index  the axis index.\n     * @param location  the location (<code>null</code> not permitted for index\n     *     0).\n     *\n     * @see #getDomainAxisLocation(int)\n     */\n    public void setDomainAxisLocation(int index, AxisLocation location) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the axis location for a domain axis and, if requested, sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param index  the axis index.\n     * @param location  the location (<code>null</code> not permitted for\n     *     index 0).\n     * @param notify  notify listeners?\n     *\n     * @since 1.0.5\n     *\n     * @see #getDomainAxisLocation(int)\n     * @see #setRangeAxisLocation(int, AxisLocation, boolean)\n     */\n    public void setDomainAxisLocation(int index, AxisLocation location,\n            boolean notify) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the edge for a domain axis.\n     *\n     * @param index  the axis index.\n     *\n     * @return The edge.\n     *\n     * @see #getRangeAxisEdge(int)\n     */\n    public RectangleEdge getDomainAxisEdge(int index) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the range axis for the plot.  If the range axis for this plot is\n     * <code>null</code>, then the method will return the parent plot's range\n     * axis (if there is a parent plot).\n     *\n     * @return The range axis.\n     *\n     * @see #getRangeAxis(int)\n     * @see #setRangeAxis(ValueAxis)\n     */\n    public ValueAxis getRangeAxis() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the range axis for the plot and sends a {@link PlotChangeEvent} to\n     * all registered listeners.\n     *\n     * @param axis  the axis (<code>null</code> permitted).\n     *\n     * @see #getRangeAxis()\n     * @see #setRangeAxis(int, ValueAxis)\n     */\n    public void setRangeAxis(ValueAxis axis)  {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the location of the primary range axis.\n     *\n     * @return The location (never <code>null</code>).\n     *\n     * @see #setRangeAxisLocation(AxisLocation)\n     */\n    public AxisLocation getRangeAxisLocation() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the location of the primary range axis and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param location  the location (<code>null</code> not permitted).\n     *\n     * @see #getRangeAxisLocation()\n     */\n    public void setRangeAxisLocation(AxisLocation location) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the location of the primary range axis and, if requested, sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param location  the location (<code>null</code> not permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getRangeAxisLocation()\n     */\n    public void setRangeAxisLocation(AxisLocation location, boolean notify) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the edge for the primary range axis.\n     *\n     * @return The range axis edge.\n     *\n     * @see #getRangeAxisLocation()\n     * @see #getOrientation()\n     */\n    public RectangleEdge getRangeAxisEdge() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns a range axis.\n     *\n     * @param index  the axis index.\n     *\n     * @return The axis (<code>null</code> possible).\n     *\n     * @see #setRangeAxis(int, ValueAxis)\n     */\n    public ValueAxis getRangeAxis(int index) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets a range axis and sends a {@link PlotChangeEvent} to all registered\n     * listeners.\n     *\n     * @param index  the axis index.\n     * @param axis  the axis (<code>null</code> permitted).\n     *\n     * @see #getRangeAxis(int)\n     */\n    public void setRangeAxis(int index, ValueAxis axis) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets a range axis and, if requested, sends a {@link PlotChangeEvent} to\n     * all registered listeners.\n     *\n     * @param index  the axis index.\n     * @param axis  the axis (<code>null</code> permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getRangeAxis(int)\n     */\n    public void setRangeAxis(int index, ValueAxis axis, boolean notify) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the range axes for this plot and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param axes  the axes (<code>null</code> not permitted).\n     *\n     * @see #setDomainAxes(ValueAxis[])\n     */\n    public void setRangeAxes(ValueAxis[] axes) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the number of range axes.\n     *\n     * @return The axis count.\n     *\n     * @see #getDomainAxisCount()\n     */\n    public int getRangeAxisCount() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Clears the range axes from the plot and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @see #clearDomainAxes()\n     */\n    public void clearRangeAxes() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Configures the range axes.\n     *\n     * @see #configureDomainAxes()\n     */\n    public void configureRangeAxes() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the location for a range axis.  If this hasn't been set\n     * explicitly, the method returns the location that is opposite to the\n     * primary range axis location.\n     *\n     * @param index  the axis index.\n     *\n     * @return The location (never <code>null</code>).\n     *\n     * @see #setRangeAxisLocation(int, AxisLocation)\n     */\n    public AxisLocation getRangeAxisLocation(int index) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the location for a range axis and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param index  the axis index.\n     * @param location  the location (<code>null</code> permitted).\n     *\n     * @see #getRangeAxisLocation(int)\n     */\n    public void setRangeAxisLocation(int index, AxisLocation location) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the axis location for a domain axis and, if requested, sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param index  the axis index.\n     * @param location  the location (<code>null</code> not permitted for\n     *     index 0).\n     * @param notify  notify listeners?\n     *\n     * @since 1.0.5\n     *\n     * @see #getRangeAxisLocation(int)\n     * @see #setDomainAxisLocation(int, AxisLocation, boolean)\n     */\n    public void setRangeAxisLocation(int index, AxisLocation location,\n            boolean notify) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the edge for a range axis.\n     *\n     * @param index  the axis index.\n     *\n     * @return The edge.\n     *\n     * @see #getRangeAxisLocation(int)\n     * @see #getOrientation()\n     */\n    public RectangleEdge getRangeAxisEdge(int index) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the primary dataset for the plot.\n     *\n     * @return The primary dataset (possibly <code>null</code>).\n     *\n     * @see #getDataset(int)\n     * @see #setDataset(XYDataset)\n     */\n    public XYDataset getDataset() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns a dataset.\n     *\n     * @param index  the dataset index.\n     *\n     * @return The dataset (possibly <code>null</code>).\n     *\n     * @see #setDataset(int, XYDataset)\n     */\n    public XYDataset getDataset(int index) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the primary dataset for the plot, replacing the existing dataset if\n     * there is one.\n     *\n     * @param dataset  the dataset (<code>null</code> permitted).\n     *\n     * @see #getDataset()\n     * @see #setDataset(int, XYDataset)\n     */\n    public void setDataset(XYDataset dataset) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets a dataset for the plot.\n     *\n     * @param index  the dataset index.\n     * @param dataset  the dataset (<code>null</code> permitted).\n     *\n     * @see #getDataset(int)\n     */\n    public void setDataset(int index, XYDataset dataset) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the number of datasets.\n     *\n     * @return The number of datasets.\n     */\n    public int getDatasetCount() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the index of the specified dataset, or <code>-1</code> if the\n     * dataset does not belong to the plot.\n     *\n     * @param dataset  the dataset (<code>null</code> not permitted).\n     *\n     * @return The index.\n     */\n    public int indexOf(XYDataset dataset) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Maps a dataset to a particular domain axis.  All data will be plotted\n     * against axis zero by default, no mapping is required for this case.\n     *\n     * @param index  the dataset index (zero-based).\n     * @param axisIndex  the axis index.\n     *\n     * @see #mapDatasetToRangeAxis(int, int)\n     */\n    public void mapDatasetToDomainAxis(int index, int axisIndex) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Maps the specified dataset to the axes in the list.  Note that the\n     * conversion of data values into Java2D space is always performed using\n     * the first axis in the list.\n     *\n     * @param index  the dataset index (zero-based).\n     * @param axisIndices  the axis indices (<code>null</code> permitted).\n     *\n     * @since 1.0.12\n     */\n    public void mapDatasetToDomainAxes(int index, List axisIndices) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Maps a dataset to a particular range axis.  All data will be plotted\n     * against axis zero by default, no mapping is required for this case.\n     *\n     * @param index  the dataset index (zero-based).\n     * @param axisIndex  the axis index.\n     *\n     * @see #mapDatasetToDomainAxis(int, int)\n     */\n    public void mapDatasetToRangeAxis(int index, int axisIndex) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Maps the specified dataset to the axes in the list.  Note that the\n     * conversion of data values into Java2D space is always performed using\n     * the first axis in the list.\n     *\n     * @param index  the dataset index (zero-based).\n     * @param axisIndices  the axis indices (<code>null</code> permitted).\n     *\n     * @since 1.0.12\n     */\n    public void mapDatasetToRangeAxes(int index, List axisIndices) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * This method is used to perform argument checking on the list of\n     * axis indices passed to mapDatasetToDomainAxes() and\n     * mapDatasetToRangeAxes().\n     *\n     * @param indices  the list of indices (<code>null</code> permitted).\n     */\n    private void checkAxisIndices(List indices) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the number of renderer slots for this plot.\n     *\n     * @return The number of renderer slots.\n     *\n     * @since 1.0.11\n     */\n    public int getRendererCount() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the renderer for the primary dataset.\n     *\n     * @return The item renderer (possibly <code>null</code>).\n     *\n     * @see #setRenderer(XYItemRenderer)\n     */\n    public XYItemRenderer getRenderer() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the renderer for a dataset, or <code>null</code>.\n     *\n     * @param index  the renderer index.\n     *\n     * @return The renderer (possibly <code>null</code>).\n     *\n     * @see #setRenderer(int, XYItemRenderer)\n     */\n    public XYItemRenderer getRenderer(int index) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the renderer for the primary dataset and sends a\n     * {@link PlotChangeEvent} to all registered listeners.  If the renderer\n     * is set to <code>null</code>, no data will be displayed.\n     *\n     * @param renderer  the renderer (<code>null</code> permitted).\n     *\n     * @see #getRenderer()\n     */\n    public void setRenderer(XYItemRenderer renderer) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets a renderer and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param index  the index.\n     * @param renderer  the renderer.\n     *\n     * @see #getRenderer(int)\n     */\n    public void setRenderer(int index, XYItemRenderer renderer) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets a renderer and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param index  the index.\n     * @param renderer  the renderer.\n     * @param notify  notify listeners?\n     *\n     * @see #getRenderer(int)\n     */\n    public void setRenderer(int index, XYItemRenderer renderer,\n                            boolean notify) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the renderers for this plot and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param renderers  the renderers (<code>null</code> not permitted).\n     */\n    public void setRenderers(XYItemRenderer[] renderers) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the dataset rendering order.\n     *\n     * @return The order (never <code>null</code>).\n     *\n     * @see #setDatasetRenderingOrder(DatasetRenderingOrder)\n     */\n    public DatasetRenderingOrder getDatasetRenderingOrder() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the rendering order and sends a {@link PlotChangeEvent} to all\n     * registered listeners.  By default, the plot renders the primary dataset\n     * last (so that the primary dataset overlays the secondary datasets).\n     * You can reverse this if you want to.\n     *\n     * @param order  the rendering order (<code>null</code> not permitted).\n     *\n     * @see #getDatasetRenderingOrder()\n     */\n    public void setDatasetRenderingOrder(DatasetRenderingOrder order) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the series rendering order.\n     *\n     * @return the order (never <code>null</code>).\n     *\n     * @see #setSeriesRenderingOrder(SeriesRenderingOrder)\n     */\n    public SeriesRenderingOrder getSeriesRenderingOrder() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the series order and sends a {@link PlotChangeEvent} to all\n     * registered listeners.  By default, the plot renders the primary series\n     * last (so that the primary series appears to be on top).\n     * You can reverse this if you want to.\n     *\n     * @param order  the rendering order (<code>null</code> not permitted).\n     *\n     * @see #getSeriesRenderingOrder()\n     */\n    public void setSeriesRenderingOrder(SeriesRenderingOrder order) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the index of the specified renderer, or <code>-1</code> if the\n     * renderer is not assigned to this plot.\n     *\n     * @param renderer  the renderer (<code>null</code> permitted).\n     *\n     * @return The renderer index.\n     */\n    public int getIndexOf(XYItemRenderer renderer) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the renderer for the specified dataset.  The code first\n     * determines the index of the dataset, then checks if there is a\n     * renderer with the same index (if not, the method returns renderer(0).\n     *\n     * @param dataset  the dataset (<code>null</code> permitted).\n     *\n     * @return The renderer (possibly <code>null</code>).\n     */\n    public XYItemRenderer getRendererForDataset(XYDataset dataset) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the weight for this plot when it is used as a subplot within a\n     * combined plot.\n     *\n     * @return The weight.\n     *\n     * @see #setWeight(int)\n     */\n    public int getWeight() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the weight for the plot and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param weight  the weight.\n     *\n     * @see #getWeight()\n     */\n    public void setWeight(int weight) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns <code>true</code> if the domain gridlines are visible, and\n     * <code>false<code> otherwise.\n     *\n     * @return <code>true</code> or <code>false</code>.\n     *\n     * @see #setDomainGridlinesVisible(boolean)\n     */\n    public boolean isDomainGridlinesVisible() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the flag that controls whether or not the domain grid-lines are\n     * visible.\n     * <p>\n     * If the flag value is changed, a {@link PlotChangeEvent} is sent to all\n     * registered listeners.\n     *\n     * @param visible  the new value of the flag.\n     *\n     * @see #isDomainGridlinesVisible()\n     */\n    public void setDomainGridlinesVisible(boolean visible) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns <code>true</code> if the domain minor gridlines are visible, and\n     * <code>false<code> otherwise.\n     *\n     * @return <code>true</code> or <code>false</code>.\n     *\n     * @see #setDomainMinorGridlinesVisible(boolean)\n     *\n     * @since 1.0.12\n     */\n    public boolean isDomainMinorGridlinesVisible() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the flag that controls whether or not the domain minor grid-lines\n     * are visible.\n     * <p>\n     * If the flag value is changed, a {@link PlotChangeEvent} is sent to all\n     * registered listeners.\n     *\n     * @param visible  the new value of the flag.\n     *\n     * @see #isDomainMinorGridlinesVisible()\n     *\n     * @since 1.0.12\n     */\n    public void setDomainMinorGridlinesVisible(boolean visible) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the stroke for the grid-lines (if any) plotted against the\n     * domain axis.\n     *\n     * @return The stroke (never <code>null</code>).\n     *\n     * @see #setDomainGridlineStroke(Stroke)\n     */\n    public Stroke getDomainGridlineStroke() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the stroke for the grid lines plotted against the domain axis, and\n     * sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param stroke  the stroke (<code>null</code> not permitted).\n     *\n     * @throws IllegalArgumentException if <code>stroke</code> is\n     *     <code>null</code>.\n     *\n     * @see #getDomainGridlineStroke()\n     */\n    public void setDomainGridlineStroke(Stroke stroke) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the stroke for the minor grid-lines (if any) plotted against the\n     * domain axis.\n     *\n     * @return The stroke (never <code>null</code>).\n     *\n     * @see #setDomainMinorGridlineStroke(Stroke)\n     *\n     * @since 1.0.12\n     */\n\n    public Stroke getDomainMinorGridlineStroke() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the stroke for the minor grid lines plotted against the domain\n     * axis, and sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param stroke  the stroke (<code>null</code> not permitted).\n     *\n     * @throws IllegalArgumentException if <code>stroke</code> is\n     *     <code>null</code>.\n     *\n     * @see #getDomainMinorGridlineStroke()\n     *\n     * @since 1.0.12\n     */\n    public void setDomainMinorGridlineStroke(Stroke stroke) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the paint for the grid lines (if any) plotted against the domain\n     * axis.\n     *\n     * @return The paint (never <code>null</code>).\n     *\n     * @see #setDomainGridlinePaint(Paint)\n     */\n    public Paint getDomainGridlinePaint() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the paint for the grid lines plotted against the domain axis, and\n     * sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint (<code>null</code> not permitted).\n     *\n     * @throws IllegalArgumentException if <code>paint</code> is\n     *     <code>null</code>.\n     *\n     * @see #getDomainGridlinePaint()\n     */\n    public void setDomainGridlinePaint(Paint paint) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the paint for the minor grid lines (if any) plotted against the\n     * domain axis.\n     *\n     * @return The paint (never <code>null</code>).\n     *\n     * @see #setDomainMinorGridlinePaint(Paint)\n     *\n     * @since 1.0.12\n     */\n    public Paint getDomainMinorGridlinePaint() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the paint for the minor grid lines plotted against the domain axis,\n     * and sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint (<code>null</code> not permitted).\n     *\n     * @throws IllegalArgumentException if <code>paint</code> is\n     *     <code>null</code>.\n     *\n     * @see #getDomainMinorGridlinePaint()\n     *\n     * @since 1.0.12\n     */\n    public void setDomainMinorGridlinePaint(Paint paint) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns <code>true</code> if the range axis grid is visible, and\n     * <code>false<code> otherwise.\n     *\n     * @return A boolean.\n     *\n     * @see #setRangeGridlinesVisible(boolean)\n     */\n    public boolean isRangeGridlinesVisible() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the flag that controls whether or not the range axis grid lines\n     * are visible.\n     * <p>\n     * If the flag value is changed, a {@link PlotChangeEvent} is sent to all\n     * registered listeners.\n     *\n     * @param visible  the new value of the flag.\n     *\n     * @see #isRangeGridlinesVisible()\n     */\n    public void setRangeGridlinesVisible(boolean visible) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the stroke for the grid lines (if any) plotted against the\n     * range axis.\n     *\n     * @return The stroke (never <code>null</code>).\n     *\n     * @see #setRangeGridlineStroke(Stroke)\n     */\n    public Stroke getRangeGridlineStroke() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the stroke for the grid lines plotted against the range axis,\n     * and sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param stroke  the stroke (<code>null</code> not permitted).\n     *\n     * @see #getRangeGridlineStroke()\n     */\n    public void setRangeGridlineStroke(Stroke stroke) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the paint for the grid lines (if any) plotted against the range\n     * axis.\n     *\n     * @return The paint (never <code>null</code>).\n     *\n     * @see #setRangeGridlinePaint(Paint)\n     */\n    public Paint getRangeGridlinePaint() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the paint for the grid lines plotted against the range axis and\n     * sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint (<code>null</code> not permitted).\n     *\n     * @see #getRangeGridlinePaint()\n     */\n    public void setRangeGridlinePaint(Paint paint) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns <code>true</code> if the range axis minor grid is visible, and\n     * <code>false<code> otherwise.\n     *\n     * @return A boolean.\n     *\n     * @see #setRangeMinorGridlinesVisible(boolean)\n     *\n     * @since 1.0.12\n     */\n    public boolean isRangeMinorGridlinesVisible() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the flag that controls whether or not the range axis minor grid\n     * lines are visible.\n     * <p>\n     * If the flag value is changed, a {@link PlotChangeEvent} is sent to all\n     * registered listeners.\n     *\n     * @param visible  the new value of the flag.\n     *\n     * @see #isRangeMinorGridlinesVisible()\n     *\n     * @since 1.0.12\n     */\n    public void setRangeMinorGridlinesVisible(boolean visible) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the stroke for the minor grid lines (if any) plotted against the\n     * range axis.\n     *\n     * @return The stroke (never <code>null</code>).\n     *\n     * @see #setRangeMinorGridlineStroke(Stroke)\n     *\n     * @since 1.0.12\n     */\n    public Stroke getRangeMinorGridlineStroke() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the stroke for the minor grid lines plotted against the range axis,\n     * and sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param stroke  the stroke (<code>null</code> not permitted).\n     *\n     * @see #getRangeMinorGridlineStroke()\n     *\n     * @since 1.0.12\n     */\n    public void setRangeMinorGridlineStroke(Stroke stroke) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the paint for the minor grid lines (if any) plotted against the\n     * range axis.\n     *\n     * @return The paint (never <code>null</code>).\n     *\n     * @see #setRangeMinorGridlinePaint(Paint)\n     *\n     * @since 1.0.12\n     */\n    public Paint getRangeMinorGridlinePaint() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the paint for the minor grid lines plotted against the range axis\n     * and sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint (<code>null</code> not permitted).\n     *\n     * @see #getRangeMinorGridlinePaint()\n     *\n     * @since 1.0.12\n     */\n    public void setRangeMinorGridlinePaint(Paint paint) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns a flag that controls whether or not a zero baseline is\n     * displayed for the domain axis.\n     *\n     * @return A boolean.\n     *\n     * @since 1.0.5\n     *\n     * @see #setDomainZeroBaselineVisible(boolean)\n     */\n    public boolean isDomainZeroBaselineVisible() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the flag that controls whether or not the zero baseline is\n     * displayed for the domain axis, and sends a {@link PlotChangeEvent} to\n     * all registered listeners.\n     *\n     * @param visible  the flag.\n     *\n     * @since 1.0.5\n     *\n     * @see #isDomainZeroBaselineVisible()\n     */\n    public void setDomainZeroBaselineVisible(boolean visible) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the stroke used for the zero baseline against the domain axis.\n     *\n     * @return The stroke (never <code>null</code>).\n     *\n     * @since 1.0.5\n     *\n     * @see #setDomainZeroBaselineStroke(Stroke)\n     */\n    public Stroke getDomainZeroBaselineStroke() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the stroke for the zero baseline for the domain axis,\n     * and sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param stroke  the stroke (<code>null</code> not permitted).\n     *\n     * @since 1.0.5\n     *\n     * @see #getRangeZeroBaselineStroke()\n     */\n    public void setDomainZeroBaselineStroke(Stroke stroke) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the paint for the zero baseline (if any) plotted against the\n     * domain axis.\n     *\n     * @since 1.0.5\n     *\n     * @return The paint (never <code>null</code>).\n     *\n     * @see #setDomainZeroBaselinePaint(Paint)\n     */\n    public Paint getDomainZeroBaselinePaint() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the paint for the zero baseline plotted against the domain axis and\n     * sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint (<code>null</code> not permitted).\n     *\n     * @since 1.0.5\n     *\n     * @see #getDomainZeroBaselinePaint()\n     */\n    public void setDomainZeroBaselinePaint(Paint paint) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns a flag that controls whether or not a zero baseline is\n     * displayed for the range axis.\n     *\n     * @return A boolean.\n     *\n     * @see #setRangeZeroBaselineVisible(boolean)\n     */\n    public boolean isRangeZeroBaselineVisible() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the flag that controls whether or not the zero baseline is\n     * displayed for the range axis, and sends a {@link PlotChangeEvent} to\n     * all registered listeners.\n     *\n     * @param visible  the flag.\n     *\n     * @see #isRangeZeroBaselineVisible()\n     */\n    public void setRangeZeroBaselineVisible(boolean visible) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the stroke used for the zero baseline against the range axis.\n     *\n     * @return The stroke (never <code>null</code>).\n     *\n     * @see #setRangeZeroBaselineStroke(Stroke)\n     */\n    public Stroke getRangeZeroBaselineStroke() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the stroke for the zero baseline for the range axis,\n     * and sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param stroke  the stroke (<code>null</code> not permitted).\n     *\n     * @see #getRangeZeroBaselineStroke()\n     */\n    public void setRangeZeroBaselineStroke(Stroke stroke) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the paint for the zero baseline (if any) plotted against the\n     * range axis.\n     *\n     * @return The paint (never <code>null</code>).\n     *\n     * @see #setRangeZeroBaselinePaint(Paint)\n     */\n    public Paint getRangeZeroBaselinePaint() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the paint for the zero baseline plotted against the range axis and\n     * sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint (<code>null</code> not permitted).\n     *\n     * @see #getRangeZeroBaselinePaint()\n     */\n    public void setRangeZeroBaselinePaint(Paint paint) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the paint used for the domain tick bands.  If this is\n     * <code>null</code>, no tick bands will be drawn.\n     *\n     * @return The paint (possibly <code>null</code>).\n     *\n     * @see #setDomainTickBandPaint(Paint)\n     */\n    public Paint getDomainTickBandPaint() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the paint for the domain tick bands.\n     *\n     * @param paint  the paint (<code>null</code> permitted).\n     *\n     * @see #getDomainTickBandPaint()\n     */\n    public void setDomainTickBandPaint(Paint paint) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the paint used for the range tick bands.  If this is\n     * <code>null</code>, no tick bands will be drawn.\n     *\n     * @return The paint (possibly <code>null</code>).\n     *\n     * @see #setRangeTickBandPaint(Paint)\n     */\n    public Paint getRangeTickBandPaint() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the paint for the range tick bands.\n     *\n     * @param paint  the paint (<code>null</code> permitted).\n     *\n     * @see #getRangeTickBandPaint()\n     */\n    public void setRangeTickBandPaint(Paint paint) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the origin for the quadrants that can be displayed on the plot.\n     * This defaults to (0, 0).\n     *\n     * @return The origin point (never <code>null</code>).\n     *\n     * @see #setQuadrantOrigin(Point2D)\n     */\n    public Point2D getQuadrantOrigin() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the quadrant origin and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param origin  the origin (<code>null</code> not permitted).\n     *\n     * @see #getQuadrantOrigin()\n     */\n    public void setQuadrantOrigin(Point2D origin) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the paint used for the specified quadrant.\n     *\n     * @param index  the quadrant index (0-3).\n     *\n     * @return The paint (possibly <code>null</code>).\n     *\n     * @see #setQuadrantPaint(int, Paint)\n     */\n    public Paint getQuadrantPaint(int index) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the paint used for the specified quadrant and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param index  the quadrant index (0-3).\n     * @param paint  the paint (<code>null</code> permitted).\n     *\n     * @see #getQuadrantPaint(int)\n     */\n    public void setQuadrantPaint(int index, Paint paint) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Adds a marker for the domain axis and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     * <P>\n     * Typically a marker will be drawn by the renderer as a line perpendicular\n     * to the range axis, however this is entirely up to the renderer.\n     *\n     * @param marker  the marker (<code>null</code> not permitted).\n     *\n     * @see #addDomainMarker(Marker, Layer)\n     * @see #clearDomainMarkers()\n     */\n    public void addDomainMarker(Marker marker) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Adds a marker for the domain axis in the specified layer and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     * <P>\n     * Typically a marker will be drawn by the renderer as a line perpendicular\n     * to the range axis, however this is entirely up to the renderer.\n     *\n     * @param marker  the marker (<code>null</code> not permitted).\n     * @param layer  the layer (foreground or background).\n     *\n     * @see #addDomainMarker(int, Marker, Layer)\n     */\n    public void addDomainMarker(Marker marker, Layer layer) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Clears all the (foreground and background) domain markers and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @see #addDomainMarker(int, Marker, Layer)\n     */\n    public void clearDomainMarkers() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Clears the (foreground and background) domain markers for a particular\n     * renderer.\n     *\n     * @param index  the renderer index.\n     *\n     * @see #clearRangeMarkers(int)\n     */\n    public void clearDomainMarkers(int index) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Adds a marker for a specific dataset/renderer and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     * <P>\n     * Typically a marker will be drawn by the renderer as a line perpendicular\n     * to the domain axis (that the renderer is mapped to), however this is\n     * entirely up to the renderer.\n     *\n     * @param index  the dataset/renderer index.\n     * @param marker  the marker.\n     * @param layer  the layer (foreground or background).\n     *\n     * @see #clearDomainMarkers(int)\n     * @see #addRangeMarker(int, Marker, Layer)\n     */\n    public void addDomainMarker(int index, Marker marker, Layer layer) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Adds a marker for a specific dataset/renderer and, if requested, sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     * <P>\n     * Typically a marker will be drawn by the renderer as a line perpendicular\n     * to the domain axis (that the renderer is mapped to), however this is\n     * entirely up to the renderer.\n     *\n     * @param index  the dataset/renderer index.\n     * @param marker  the marker.\n     * @param layer  the layer (foreground or background).\n     * @param notify  notify listeners?\n     *\n     * @since 1.0.10\n     */\n    public void addDomainMarker(int index, Marker marker, Layer layer,\n            boolean notify) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Removes a marker for the domain axis and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param marker  the marker.\n     *\n     * @return A boolean indicating whether or not the marker was actually\n     *         removed.\n     *\n     * @since 1.0.7\n     */\n    public boolean removeDomainMarker(Marker marker) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Removes a marker for the domain axis in the specified layer and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param marker the marker (<code>null</code> not permitted).\n     * @param layer the layer (foreground or background).\n     *\n     * @return A boolean indicating whether or not the marker was actually\n     *         removed.\n     *\n     * @since 1.0.7\n     */\n    public boolean removeDomainMarker(Marker marker, Layer layer) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Removes a marker for a specific dataset/renderer and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param index the dataset/renderer index.\n     * @param marker the marker.\n     * @param layer the layer (foreground or background).\n     *\n     * @return A boolean indicating whether or not the marker was actually\n     *         removed.\n     *\n     * @since 1.0.7\n     */\n    public boolean removeDomainMarker(int index, Marker marker, Layer layer) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Removes a marker for a specific dataset/renderer and, if requested,\n     * sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param index  the dataset/renderer index.\n     * @param marker  the marker.\n     * @param layer  the layer (foreground or background).\n     * @param notify  notify listeners?\n     *\n     * @return A boolean indicating whether or not the marker was actually\n     *         removed.\n     *\n     * @since 1.0.10\n     */\n    public boolean removeDomainMarker(int index, Marker marker, Layer layer,\n            boolean notify) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Adds a marker for the range axis and sends a {@link PlotChangeEvent} to\n     * all registered listeners.\n     * <P>\n     * Typically a marker will be drawn by the renderer as a line perpendicular\n     * to the range axis, however this is entirely up to the renderer.\n     *\n     * @param marker  the marker (<code>null</code> not permitted).\n     *\n     * @see #addRangeMarker(Marker, Layer)\n     */\n    public void addRangeMarker(Marker marker) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Adds a marker for the range axis in the specified layer and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     * <P>\n     * Typically a marker will be drawn by the renderer as a line perpendicular\n     * to the range axis, however this is entirely up to the renderer.\n     *\n     * @param marker  the marker (<code>null</code> not permitted).\n     * @param layer  the layer (foreground or background).\n     *\n     * @see #addRangeMarker(int, Marker, Layer)\n     */\n    public void addRangeMarker(Marker marker, Layer layer) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Clears all the range markers and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @see #clearRangeMarkers()\n     */\n    public void clearRangeMarkers() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Adds a marker for a specific dataset/renderer and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     * <P>\n     * Typically a marker will be drawn by the renderer as a line perpendicular\n     * to the range axis, however this is entirely up to the renderer.\n     *\n     * @param index  the dataset/renderer index.\n     * @param marker  the marker.\n     * @param layer  the layer (foreground or background).\n     *\n     * @see #clearRangeMarkers(int)\n     * @see #addDomainMarker(int, Marker, Layer)\n     */\n    public void addRangeMarker(int index, Marker marker, Layer layer) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Adds a marker for a specific dataset/renderer and, if requested, sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     * <P>\n     * Typically a marker will be drawn by the renderer as a line perpendicular\n     * to the range axis, however this is entirely up to the renderer.\n     *\n     * @param index  the dataset/renderer index.\n     * @param marker  the marker.\n     * @param layer  the layer (foreground or background).\n     * @param notify  notify listeners?\n     *\n     * @since 1.0.10\n     */\n    public void addRangeMarker(int index, Marker marker, Layer layer,\n            boolean notify) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Clears the (foreground and background) range markers for a particular\n     * renderer.\n     *\n     * @param index  the renderer index.\n     */\n    public void clearRangeMarkers(int index) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Removes a marker for the range axis and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param marker the marker.\n     *\n     * @return A boolean indicating whether or not the marker was actually\n     *         removed.\n     *\n     * @since 1.0.7\n     */\n    public boolean removeRangeMarker(Marker marker) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Removes a marker for the range axis in the specified layer and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param marker the marker (<code>null</code> not permitted).\n     * @param layer the layer (foreground or background).\n     *\n     * @return A boolean indicating whether or not the marker was actually\n     *         removed.\n     *\n     * @since 1.0.7\n     */\n    public boolean removeRangeMarker(Marker marker, Layer layer) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Removes a marker for a specific dataset/renderer and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param index the dataset/renderer index.\n     * @param marker the marker.\n     * @param layer the layer (foreground or background).\n     *\n     * @return A boolean indicating whether or not the marker was actually\n     *         removed.\n     *\n     * @since 1.0.7\n     */\n    public boolean removeRangeMarker(int index, Marker marker, Layer layer) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Removes a marker for a specific dataset/renderer and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param index  the dataset/renderer index.\n     * @param marker  the marker.\n     * @param layer  the layer (foreground or background).\n     * @param notify  notify listeners?\n     *\n     * @return A boolean indicating whether or not the marker was actually\n     *         removed.\n     *\n     * @since 1.0.10\n     */\n    public boolean removeRangeMarker(int index, Marker marker, Layer layer,\n            boolean notify) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Adds an annotation to the plot and sends a {@link PlotChangeEvent} to\n     * all registered listeners.\n     *\n     * @param annotation  the annotation (<code>null</code> not permitted).\n     *\n     * @see #getAnnotations()\n     * @see #removeAnnotation(XYAnnotation)\n     */\n    public void addAnnotation(XYAnnotation annotation) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Adds an annotation to the plot and, if requested, sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param annotation  the annotation (<code>null</code> not permitted).\n     * @param notify  notify listeners?\n     *\n     * @since 1.0.10\n     */\n    public void addAnnotation(XYAnnotation annotation, boolean notify) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Removes an annotation from the plot and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param annotation  the annotation (<code>null</code> not permitted).\n     *\n     * @return A boolean (indicates whether or not the annotation was removed).\n     *\n     * @see #addAnnotation(XYAnnotation)\n     * @see #getAnnotations()\n     */\n    public boolean removeAnnotation(XYAnnotation annotation) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Removes an annotation from the plot and sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param annotation  the annotation (<code>null</code> not permitted).\n     * @param notify  notify listeners?\n     *\n     * @return A boolean (indicates whether or not the annotation was removed).\n     *\n     * @since 1.0.10\n     */\n    public boolean removeAnnotation(XYAnnotation annotation, boolean notify) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the list of annotations.\n     *\n     * @return The list of annotations.\n     *\n     * @since 1.0.1\n     *\n     * @see #addAnnotation(XYAnnotation)\n     */\n    public List getAnnotations() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Clears all the annotations and sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @see #addAnnotation(XYAnnotation)\n     */\n    public void clearAnnotations() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Calculates the space required for all the axes in the plot.\n     *\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area.\n     *\n     * @return The required space.\n     */\n    protected AxisSpace calculateAxisSpace(Graphics2D g2,\n                                           Rectangle2D plotArea) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Calculates the space required for the domain axis/axes.\n     *\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area.\n     * @param space  a carrier for the result (<code>null</code> permitted).\n     *\n     * @return The required space.\n     */\n    protected AxisSpace calculateDomainAxisSpace(Graphics2D g2,\n                                                 Rectangle2D plotArea,\n                                                 AxisSpace space) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Calculates the space required for the range axis/axes.\n     *\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area.\n     * @param space  a carrier for the result (<code>null</code> permitted).\n     *\n     * @return The required space.\n     */\n    protected AxisSpace calculateRangeAxisSpace(Graphics2D g2,\n                                                Rectangle2D plotArea,\n                                                AxisSpace space) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Draws the plot within the specified area on a graphics device.\n     *\n     * @param g2  the graphics device.\n     * @param area  the plot area (in Java2D space).\n     * @param anchor  an anchor point in Java2D space (<code>null</code>\n     *                permitted).\n     * @param parentState  the state from the parent plot, if there is one\n     *                     (<code>null</code> permitted).\n     * @param info  collects chart drawing information (<code>null</code>\n     *              permitted).\n     */\n    public void draw(Graphics2D g2, Rectangle2D area, Point2D anchor,\n            PlotState parentState, PlotRenderingInfo info) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Draws the background for the plot.\n     *\n     * @param g2  the graphics device.\n     * @param area  the area.\n     */\n    public void drawBackground(Graphics2D g2, Rectangle2D area) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Draws the quadrants.\n     *\n     * @param g2  the graphics device.\n     * @param area  the area.\n     *\n     * @see #setQuadrantOrigin(Point2D)\n     * @see #setQuadrantPaint(int, Paint)\n     */\n    protected void drawQuadrants(Graphics2D g2, Rectangle2D area) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Draws the domain tick bands, if any.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the data area.\n     * @param ticks  the ticks.\n     *\n     * @see #setDomainTickBandPaint(Paint)\n     */\n    public void drawDomainTickBands(Graphics2D g2, Rectangle2D dataArea,\n                                    List ticks) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Draws the range tick bands, if any.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the data area.\n     * @param ticks  the ticks.\n     *\n     * @see #setRangeTickBandPaint(Paint)\n     */\n    public void drawRangeTickBands(Graphics2D g2, Rectangle2D dataArea,\n                                   List ticks) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * A utility method for drawing the axes.\n     *\n     * @param g2  the graphics device (<code>null</code> not permitted).\n     * @param plotArea  the plot area (<code>null</code> not permitted).\n     * @param dataArea  the data area (<code>null</code> not permitted).\n     * @param plotState  collects information about the plot (<code>null</code>\n     *                   permitted).\n     *\n     * @return A map containing the state for each axis drawn.\n     */\n    protected Map drawAxes(Graphics2D g2,\n                           Rectangle2D plotArea,\n                           Rectangle2D dataArea,\n                           PlotRenderingInfo plotState) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Draws a representation of the data within the dataArea region, using the\n     * current renderer.\n     * <P>\n     * The <code>info</code> and <code>crosshairState</code> arguments may be\n     * <code>null</code>.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the region in which the data is to be drawn.\n     * @param index  the dataset index.\n     * @param info  an optional object for collection dimension information.\n     * @param crosshairState  collects crosshair information\n     *                        (<code>null</code> permitted).\n     *\n     * @return A flag that indicates whether any data was actually rendered.\n     */\n    public boolean render(Graphics2D g2, Rectangle2D dataArea, int index,\n            PlotRenderingInfo info, CrosshairState crosshairState) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the domain axis for a dataset.\n     *\n     * @param index  the dataset index.\n     *\n     * @return The axis.\n     */\n    public ValueAxis getDomainAxisForDataset(int index) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the range axis for a dataset.\n     *\n     * @param index  the dataset index.\n     *\n     * @return The axis.\n     */\n    public ValueAxis getRangeAxisForDataset(int index) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Draws the gridlines for the plot, if they are visible.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the data area.\n     * @param ticks  the ticks.\n     *\n     * @see #drawRangeGridlines(Graphics2D, Rectangle2D, List)\n     */\n    protected void drawDomainGridlines(Graphics2D g2, Rectangle2D dataArea,\n                                       List ticks) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Draws the gridlines for the plot's primary range axis, if they are\n     * visible.\n     *\n     * @param g2  the graphics device.\n     * @param area  the data area.\n     * @param ticks  the ticks.\n     *\n     * @see #drawDomainGridlines(Graphics2D, Rectangle2D, List)\n     */\n    protected void drawRangeGridlines(Graphics2D g2, Rectangle2D area,\n                                      List ticks) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Draws a base line across the chart at value zero on the domain axis.\n     *\n     * @param g2  the graphics device.\n     * @param area  the data area.\n     *\n     * @see #setDomainZeroBaselineVisible(boolean)\n     *\n     * @since 1.0.5\n     */\n    protected void drawZeroDomainBaseline(Graphics2D g2, Rectangle2D area) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Draws a base line across the chart at value zero on the range axis.\n     *\n     * @param g2  the graphics device.\n     * @param area  the data area.\n     *\n     * @see #setRangeZeroBaselineVisible(boolean)\n     */\n    protected void drawZeroRangeBaseline(Graphics2D g2, Rectangle2D area) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Draws the annotations for the plot.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the data area.\n     * @param info  the chart rendering info.\n     */\n    public void drawAnnotations(Graphics2D g2,\n                                Rectangle2D dataArea,\n                                PlotRenderingInfo info) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Draws the domain markers (if any) for an axis and layer.  This method is\n     * typically called from within the draw() method.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the data area.\n     * @param index  the renderer index.\n     * @param layer  the layer (foreground or background).\n     */\n    protected void drawDomainMarkers(Graphics2D g2, Rectangle2D dataArea,\n                                     int index, Layer layer) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Draws the range markers (if any) for a renderer and layer.  This method\n     * is typically called from within the draw() method.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the data area.\n     * @param index  the renderer index.\n     * @param layer  the layer (foreground or background).\n     */\n    protected void drawRangeMarkers(Graphics2D g2, Rectangle2D dataArea,\n                                    int index, Layer layer) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the list of domain markers (read only) for the specified layer.\n     *\n     * @param layer  the layer (foreground or background).\n     *\n     * @return The list of domain markers.\n     *\n     * @see #getRangeMarkers(Layer)\n     */\n    public Collection getDomainMarkers(Layer layer) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the list of range markers (read only) for the specified layer.\n     *\n     * @param layer  the layer (foreground or background).\n     *\n     * @return The list of range markers.\n     *\n     * @see #getDomainMarkers(Layer)\n     */\n    public Collection getRangeMarkers(Layer layer) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns a collection of domain markers for a particular renderer and\n     * layer.\n     *\n     * @param index  the renderer index.\n     * @param layer  the layer.\n     *\n     * @return A collection of markers (possibly <code>null</code>).\n     *\n     * @see #getRangeMarkers(int, Layer)\n     */\n    public Collection getDomainMarkers(int index, Layer layer) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns a collection of range markers for a particular renderer and\n     * layer.\n     *\n     * @param index  the renderer index.\n     * @param layer  the layer.\n     *\n     * @return A collection of markers (possibly <code>null</code>).\n     *\n     * @see #getDomainMarkers(int, Layer)\n     */\n    public Collection getRangeMarkers(int index, Layer layer) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Utility method for drawing a horizontal line across the data area of the\n     * plot.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the data area.\n     * @param value  the coordinate, where to draw the line.\n     * @param stroke  the stroke to use.\n     * @param paint  the paint to use.\n     */\n    protected void drawHorizontalLine(Graphics2D g2, Rectangle2D dataArea,\n                                      double value, Stroke stroke,\n                                      Paint paint) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Draws a domain crosshair.\n     *\n     * @param g2  the graphics target.\n     * @param dataArea  the data area.\n     * @param orientation  the plot orientation.\n     * @param value  the crosshair value.\n     * @param axis  the axis against which the value is measured.\n     * @param stroke  the stroke used to draw the crosshair line.\n     * @param paint  the paint used to draw the crosshair line.\n     *\n     * @since 1.0.4\n     */\n    protected void drawDomainCrosshair(Graphics2D g2, Rectangle2D dataArea,\n            PlotOrientation orientation, double value, ValueAxis axis,\n            Stroke stroke, Paint paint) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Utility method for drawing a vertical line on the data area of the plot.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the data area.\n     * @param value  the coordinate, where to draw the line.\n     * @param stroke  the stroke to use.\n     * @param paint  the paint to use.\n     */\n    protected void drawVerticalLine(Graphics2D g2, Rectangle2D dataArea,\n                                    double value, Stroke stroke, Paint paint) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Draws a range crosshair.\n     *\n     * @param g2  the graphics target.\n     * @param dataArea  the data area.\n     * @param orientation  the plot orientation.\n     * @param value  the crosshair value.\n     * @param axis  the axis against which the value is measured.\n     * @param stroke  the stroke used to draw the crosshair line.\n     * @param paint  the paint used to draw the crosshair line.\n     *\n     * @since 1.0.4\n     */\n    protected void drawRangeCrosshair(Graphics2D g2, Rectangle2D dataArea,\n            PlotOrientation orientation, double value, ValueAxis axis,\n            Stroke stroke, Paint paint) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Handles a 'click' on the plot by updating the anchor values.\n     *\n     * @param x  the x-coordinate, where the click occurred, in Java2D space.\n     * @param y  the y-coordinate, where the click occurred, in Java2D space.\n     * @param info  object containing information about the plot dimensions.\n     */\n    public void handleClick(int x, int y, PlotRenderingInfo info) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * A utility method that returns a list of datasets that are mapped to a\n     * particular axis.\n     *\n     * @param axisIndex  the axis index (<code>null</code> not permitted).\n     *\n     * @return A list of datasets.\n     */\n    private List getDatasetsMappedToDomainAxis(Integer axisIndex) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * A utility method that returns a list of datasets that are mapped to a\n     * particular axis.\n     *\n     * @param axisIndex  the axis index (<code>null</code> not permitted).\n     *\n     * @return A list of datasets.\n     */\n    private List getDatasetsMappedToRangeAxis(Integer axisIndex) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the index of the given domain axis.\n     *\n     * @param axis  the axis.\n     *\n     * @return The axis index.\n     *\n     * @see #getRangeAxisIndex(ValueAxis)\n     */\n    public int getDomainAxisIndex(ValueAxis axis) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the index of the given range axis.\n     *\n     * @param axis  the axis.\n     *\n     * @return The axis index.\n     *\n     * @see #getDomainAxisIndex(ValueAxis)\n     */\n    public int getRangeAxisIndex(ValueAxis axis) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the range for the specified axis.\n     *\n     * @param axis  the axis.\n     *\n     * @return The range.\n     */\n    public Range getDataRange(ValueAxis axis) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Receives notification of a change to the plot's dataset.\n     * <P>\n     * The axis ranges are updated if necessary.\n     *\n     * @param event  information about the event (not used here).\n     */\n    public void datasetChanged(DatasetChangeEvent event) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Receives notification of a renderer change event.\n     *\n     * @param event  the event.\n     */\n    public void rendererChanged(RendererChangeEvent event) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns a flag indicating whether or not the domain crosshair is visible.\n     *\n     * @return The flag.\n     *\n     * @see #setDomainCrosshairVisible(boolean)\n     */\n    public boolean isDomainCrosshairVisible() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the flag indicating whether or not the domain crosshair is visible\n     * and, if the flag changes, sends a {@link PlotChangeEvent} to all\n     * registered listeners.\n     *\n     * @param flag  the new value of the flag.\n     *\n     * @see #isDomainCrosshairVisible()\n     */\n    public void setDomainCrosshairVisible(boolean flag) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns a flag indicating whether or not the crosshair should \"lock-on\"\n     * to actual data values.\n     *\n     * @return The flag.\n     *\n     * @see #setDomainCrosshairLockedOnData(boolean)\n     */\n    public boolean isDomainCrosshairLockedOnData() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the flag indicating whether or not the domain crosshair should\n     * \"lock-on\" to actual data values.  If the flag value changes, this\n     * method sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param flag  the flag.\n     *\n     * @see #isDomainCrosshairLockedOnData()\n     */\n    public void setDomainCrosshairLockedOnData(boolean flag) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the domain crosshair value.\n     *\n     * @return The value.\n     *\n     * @see #setDomainCrosshairValue(double)\n     */\n    public double getDomainCrosshairValue() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the domain crosshair value and sends a {@link PlotChangeEvent} to\n     * all registered listeners (provided that the domain crosshair is visible).\n     *\n     * @param value  the value.\n     *\n     * @see #getDomainCrosshairValue()\n     */\n    public void setDomainCrosshairValue(double value) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the domain crosshair value and, if requested, sends a\n     * {@link PlotChangeEvent} to all registered listeners (provided that the\n     * domain crosshair is visible).\n     *\n     * @param value  the new value.\n     * @param notify  notify listeners?\n     *\n     * @see #getDomainCrosshairValue()\n     */\n    public void setDomainCrosshairValue(double value, boolean notify) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the {@link Stroke} used to draw the crosshair (if visible).\n     *\n     * @return The crosshair stroke (never <code>null</code>).\n     *\n     * @see #setDomainCrosshairStroke(Stroke)\n     * @see #isDomainCrosshairVisible()\n     * @see #getDomainCrosshairPaint()\n     */\n    public Stroke getDomainCrosshairStroke() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the Stroke used to draw the crosshairs (if visible) and notifies\n     * registered listeners that the axis has been modified.\n     *\n     * @param stroke  the new crosshair stroke (<code>null</code> not\n     *     permitted).\n     *\n     * @see #getDomainCrosshairStroke()\n     */\n    public void setDomainCrosshairStroke(Stroke stroke) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the domain crosshair paint.\n     *\n     * @return The crosshair paint (never <code>null</code>).\n     *\n     * @see #setDomainCrosshairPaint(Paint)\n     * @see #isDomainCrosshairVisible()\n     * @see #getDomainCrosshairStroke()\n     */\n    public Paint getDomainCrosshairPaint() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the paint used to draw the crosshairs (if visible) and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param paint the new crosshair paint (<code>null</code> not permitted).\n     *\n     * @see #getDomainCrosshairPaint()\n     */\n    public void setDomainCrosshairPaint(Paint paint) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns a flag indicating whether or not the range crosshair is visible.\n     *\n     * @return The flag.\n     *\n     * @see #setRangeCrosshairVisible(boolean)\n     * @see #isDomainCrosshairVisible()\n     */\n    public boolean isRangeCrosshairVisible() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the flag indicating whether or not the range crosshair is visible.\n     * If the flag value changes, this method sends a {@link PlotChangeEvent}\n     * to all registered listeners.\n     *\n     * @param flag  the new value of the flag.\n     *\n     * @see #isRangeCrosshairVisible()\n     */\n    public void setRangeCrosshairVisible(boolean flag) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns a flag indicating whether or not the crosshair should \"lock-on\"\n     * to actual data values.\n     *\n     * @return The flag.\n     *\n     * @see #setRangeCrosshairLockedOnData(boolean)\n     */\n    public boolean isRangeCrosshairLockedOnData() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the flag indicating whether or not the range crosshair should\n     * \"lock-on\" to actual data values.  If the flag value changes, this method\n     * sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param flag  the flag.\n     *\n     * @see #isRangeCrosshairLockedOnData()\n     */\n    public void setRangeCrosshairLockedOnData(boolean flag) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the range crosshair value.\n     *\n     * @return The value.\n     *\n     * @see #setRangeCrosshairValue(double)\n     */\n    public double getRangeCrosshairValue() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the range crosshair value.\n     * <P>\n     * Registered listeners are notified that the plot has been modified, but\n     * only if the crosshair is visible.\n     *\n     * @param value  the new value.\n     *\n     * @see #getRangeCrosshairValue()\n     */\n    public void setRangeCrosshairValue(double value) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the range crosshair value and sends a {@link PlotChangeEvent} to\n     * all registered listeners, but only if the crosshair is visible.\n     *\n     * @param value  the new value.\n     * @param notify  a flag that controls whether or not listeners are\n     *                notified.\n     *\n     * @see #getRangeCrosshairValue()\n     */\n    public void setRangeCrosshairValue(double value, boolean notify) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the stroke used to draw the crosshair (if visible).\n     *\n     * @return The crosshair stroke (never <code>null</code>).\n     *\n     * @see #setRangeCrosshairStroke(Stroke)\n     * @see #isRangeCrosshairVisible()\n     * @see #getRangeCrosshairPaint()\n     */\n    public Stroke getRangeCrosshairStroke() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the stroke used to draw the crosshairs (if visible) and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param stroke  the new crosshair stroke (<code>null</code> not\n     *         permitted).\n     *\n     * @see #getRangeCrosshairStroke()\n     */\n    public void setRangeCrosshairStroke(Stroke stroke) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the range crosshair paint.\n     *\n     * @return The crosshair paint (never <code>null</code>).\n     *\n     * @see #setRangeCrosshairPaint(Paint)\n     * @see #isRangeCrosshairVisible()\n     * @see #getRangeCrosshairStroke()\n     */\n    public Paint getRangeCrosshairPaint() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the paint used to color the crosshairs (if visible) and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param paint the new crosshair paint (<code>null</code> not permitted).\n     *\n     * @see #getRangeCrosshairPaint()\n     */\n    public void setRangeCrosshairPaint(Paint paint) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the fixed domain axis space.\n     *\n     * @return The fixed domain axis space (possibly <code>null</code>).\n     *\n     * @see #setFixedDomainAxisSpace(AxisSpace)\n     */\n    public AxisSpace getFixedDomainAxisSpace() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the fixed domain axis space and sends a {@link PlotChangeEvent} to\n     * all registered listeners.\n     *\n     * @param space  the space (<code>null</code> permitted).\n     *\n     * @see #getFixedDomainAxisSpace()\n     */\n    public void setFixedDomainAxisSpace(AxisSpace space) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the fixed domain axis space and, if requested, sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param space  the space (<code>null</code> permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getFixedDomainAxisSpace()\n     *\n     * @since 1.0.9\n     */\n    public void setFixedDomainAxisSpace(AxisSpace space, boolean notify) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the fixed range axis space.\n     *\n     * @return The fixed range axis space (possibly <code>null</code>).\n     *\n     * @see #setFixedRangeAxisSpace(AxisSpace)\n     */\n    public AxisSpace getFixedRangeAxisSpace() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the fixed range axis space and sends a {@link PlotChangeEvent} to\n     * all registered listeners.\n     *\n     * @param space  the space (<code>null</code> permitted).\n     *\n     * @see #getFixedRangeAxisSpace()\n     */\n    public void setFixedRangeAxisSpace(AxisSpace space) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the fixed range axis space and, if requested, sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param space  the space (<code>null</code> permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getFixedRangeAxisSpace()\n     *\n     * @since 1.0.9\n     */\n    public void setFixedRangeAxisSpace(AxisSpace space, boolean notify) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns <code>true</code> if panning is enabled for the domain axes,\n     * and <code>false</code> otherwise.\n     *\n     * @return A boolean.\n     *\n     * @since 1.0.13\n     */\n    public boolean isDomainPannable() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the flag that enables or disables panning of the plot along the\n     * domain axes.\n     *\n     * @param pannable  the new flag value.\n     *\n     * @since 1.0.13\n     */\n    public void setDomainPannable(boolean pannable) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns <code>true</code> if panning is enabled for the range axes,\n     * and <code>false</code> otherwise.\n     *\n     * @return A boolean.\n     *\n     * @since 1.0.13\n     */\n    public boolean isRangePannable() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the flag that enables or disables panning of the plot along\n     * the range axes.\n     *\n     * @param pannable  the new flag value.\n     *\n     * @since 1.0.13\n     */\n    public void setRangePannable(boolean pannable) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Pans the domain axes by the specified percentage.\n     *\n     * @param percent  the distance to pan (as a percentage of the axis length).\n     * @param info the plot info\n     * @param source the source point where the pan action started.\n     *\n     * @since 1.0.13\n     */\n    public void panDomainAxes(double percent, PlotRenderingInfo info,\n            Point2D source) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Pans the range axes by the specified percentage.\n     *\n     * @param percent  the distance to pan (as a percentage of the axis length).\n     * @param info the plot info\n     * @param source the source point where the pan action started.\n     *\n     * @since 1.0.13\n     */\n    public void panRangeAxes(double percent, PlotRenderingInfo info,\n            Point2D source) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Multiplies the range on the domain axis/axes by the specified factor.\n     *\n     * @param factor  the zoom factor.\n     * @param info  the plot rendering info.\n     * @param source  the source point (in Java2D space).\n     *\n     * @see #zoomRangeAxes(double, PlotRenderingInfo, Point2D)\n     */\n    public void zoomDomainAxes(double factor, PlotRenderingInfo info,\n                               Point2D source) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Multiplies the range on the domain axis/axes by the specified factor.\n     *\n     * @param factor  the zoom factor.\n     * @param info  the plot rendering info.\n     * @param source  the source point (in Java2D space).\n     * @param useAnchor  use source point as zoom anchor?\n     *\n     * @see #zoomRangeAxes(double, PlotRenderingInfo, Point2D, boolean)\n     *\n     * @since 1.0.7\n     */\n    public void zoomDomainAxes(double factor, PlotRenderingInfo info,\n                               Point2D source, boolean useAnchor) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Zooms in on the domain axis/axes.  The new lower and upper bounds are\n     * specified as percentages of the current axis range, where 0 percent is\n     * the current lower bound and 100 percent is the current upper bound.\n     *\n     * @param lowerPercent  a percentage that determines the new lower bound\n     *                      for the axis (e.g. 0.20 is twenty percent).\n     * @param upperPercent  a percentage that determines the new upper bound\n     *                      for the axis (e.g. 0.80 is eighty percent).\n     * @param info  the plot rendering info.\n     * @param source  the source point (ignored).\n     *\n     * @see #zoomRangeAxes(double, double, PlotRenderingInfo, Point2D)\n     */\n    public void zoomDomainAxes(double lowerPercent, double upperPercent,\n                               PlotRenderingInfo info, Point2D source) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Multiplies the range on the range axis/axes by the specified factor.\n     *\n     * @param factor  the zoom factor.\n     * @param info  the plot rendering info.\n     * @param source  the source point.\n     *\n     * @see #zoomDomainAxes(double, PlotRenderingInfo, Point2D, boolean)\n     */\n    public void zoomRangeAxes(double factor, PlotRenderingInfo info,\n                              Point2D source) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Multiplies the range on the range axis/axes by the specified factor.\n     *\n     * @param factor  the zoom factor.\n     * @param info  the plot rendering info.\n     * @param source  the source point.\n     * @param useAnchor  a flag that controls whether or not the source point\n     *         is used for the zoom anchor.\n     *\n     * @see #zoomDomainAxes(double, PlotRenderingInfo, Point2D, boolean)\n     *\n     * @since 1.0.7\n     */\n    public void zoomRangeAxes(double factor, PlotRenderingInfo info,\n                              Point2D source, boolean useAnchor) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Zooms in on the range axes.\n     *\n     * @param lowerPercent  the lower bound.\n     * @param upperPercent  the upper bound.\n     * @param info  the plot rendering info.\n     * @param source  the source point.\n     *\n     * @see #zoomDomainAxes(double, double, PlotRenderingInfo, Point2D)\n     */\n    public void zoomRangeAxes(double lowerPercent, double upperPercent,\n                              PlotRenderingInfo info, Point2D source) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns <code>true</code>, indicating that the domain axis/axes for this\n     * plot are zoomable.\n     *\n     * @return A boolean.\n     *\n     * @see #isRangeZoomable()\n     */\n    public boolean isDomainZoomable() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns <code>true</code>, indicating that the range axis/axes for this\n     * plot are zoomable.\n     *\n     * @return A boolean.\n     *\n     * @see #isDomainZoomable()\n     */\n    public boolean isRangeZoomable() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the number of series in the primary dataset for this plot.  If\n     * the dataset is <code>null</code>, the method returns 0.\n     *\n     * @return The series count.\n     */\n    public int getSeriesCount() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the fixed legend items, if any.\n     *\n     * @return The legend items (possibly <code>null</code>).\n     *\n     * @see #setFixedLegendItems(LegendItemCollection)\n     */\n    public LegendItemCollection getFixedLegendItems() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the fixed legend items for the plot.  Leave this set to\n     * <code>null</code> if you prefer the legend items to be created\n     * automatically.\n     *\n     * @param items  the legend items (<code>null</code> permitted).\n     *\n     * @see #getFixedLegendItems()\n     */\n    public void setFixedLegendItems(LegendItemCollection items) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the legend items for the plot.  Each legend item is generated by\n     * the plot's renderer, since the renderer is responsible for the visual\n     * representation of the data.\n     *\n     * @return The legend items.\n     */\n    public LegendItemCollection getLegendItems() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Tests this plot for equality with another object.\n     *\n     * @param obj  the object (<code>null</code> permitted).\n     *\n     * @return <code>true</code> or <code>false</code>.\n     */\n    public boolean equals(Object obj) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns a clone of the plot.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException  this can occur if some component of\n     *         the plot cannot be cloned.\n     */\n    public Object clone() throws CloneNotSupportedException {\n\n        XYPlot clone = (XYPlot) super.clone();\n        clone.domainAxes = (ObjectList) ObjectUtilities.clone(this.domainAxes);\n        for (int i = 0; i < this.domainAxes.size(); i++) {\n            ValueAxis axis = (ValueAxis) this.domainAxes.get(i);\n            if (axis != null) {\n         //The specific code has been omitted, but there is no error\n        }\n        }\n        clone.domainAxisLocations = (ObjectList)\n                this.domainAxisLocations.clone();\n\n        clone.rangeAxes = (ObjectList) ObjectUtilities.clone(this.rangeAxes);\n        for (int i = 0; i < this.rangeAxes.size(); i++) {\n            ValueAxis axis = (ValueAxis) this.rangeAxes.get(i);\n            if (axis != null) {\n         //The specific code has been omitted, but there is no error\n        }\n        }\n        clone.rangeAxisLocations = (ObjectList) ObjectUtilities.clone(\n                this.rangeAxisLocations);\n\n        // the datasets are not cloned, but listeners need to be added...\n        clone.datasets = (ObjectList) ObjectUtilities.clone(this.datasets);\n        for (int i = 0; i < clone.datasets.size(); ++i) {\n            XYDataset d = getDataset(i);\n            if (d != null) {\n         //The specific code has been omitted, but there is no error\n        }\n        }\n\n        clone.datasetToDomainAxesMap = new TreeMap();\n        clone.datasetToDomainAxesMap.putAll(this.datasetToDomainAxesMap);\n        clone.datasetToRangeAxesMap = new TreeMap();\n        clone.datasetToRangeAxesMap.putAll(this.datasetToRangeAxesMap);\n\n        clone.renderers = (ObjectList) ObjectUtilities.clone(this.renderers);\n        for (int i = 0; i < this.renderers.size(); i++) {\n            XYItemRenderer renderer2 = (XYItemRenderer) this.renderers.get(i);\n            if (renderer2 instanceof PublicCloneable) {\n         //The specific code has been omitted, but there is no error\n        }\n        }\n        clone.foregroundDomainMarkers = (Map) ObjectUtilities.clone(\n                this.foregroundDomainMarkers);\n        clone.backgroundDomainMarkers = (Map) ObjectUtilities.clone(\n                this.backgroundDomainMarkers);\n        clone.foregroundRangeMarkers = (Map) ObjectUtilities.clone(\n                this.foregroundRangeMarkers);\n        clone.backgroundRangeMarkers = (Map) ObjectUtilities.clone(\n                this.backgroundRangeMarkers);\n        clone.annotations = (List) ObjectUtilities.deepClone(this.annotations);\n        if (this.fixedDomainAxisSpace != null) {\n         //The specific code has been omitted, but there is no error\n        }\n        if (this.fixedRangeAxisSpace != null) {\n         //The specific code has been omitted, but there is no error\n        }\n        if (this.fixedLegendItems != null) {\n         //The specific code has been omitted, but there is no error\n        }\n        clone.quadrantOrigin = (Point2D) ObjectUtilities.clone(\n                this.quadrantOrigin);\n        clone.quadrantPaint = (Paint[]) this.quadrantPaint.clone();\n        return clone;\n\n    }\n\n    /**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n    private void writeObject(ObjectOutputStream stream) throws IOException {\n        stream.defaultWriteObject();\n        SerialUtilities.writeStroke(this.domainGridlineStroke, stream);\n        SerialUtilities.writePaint(this.domainGridlinePaint, stream);\n        SerialUtilities.writeStroke(this.rangeGridlineStroke, stream);\n        SerialUtilities.writePaint(this.rangeGridlinePaint, stream);\n        SerialUtilities.writeStroke(this.domainMinorGridlineStroke, stream);\n        SerialUtilities.writePaint(this.domainMinorGridlinePaint, stream);\n        SerialUtilities.writeStroke(this.rangeMinorGridlineStroke, stream);\n        SerialUtilities.writePaint(this.rangeMinorGridlinePaint, stream);\n        SerialUtilities.writeStroke(this.rangeZeroBaselineStroke, stream);\n        SerialUtilities.writePaint(this.rangeZeroBaselinePaint, stream);\n        SerialUtilities.writeStroke(this.domainCrosshairStroke, stream);\n        SerialUtilities.writePaint(this.domainCrosshairPaint, stream);\n        SerialUtilities.writeStroke(this.rangeCrosshairStroke, stream);\n        SerialUtilities.writePaint(this.rangeCrosshairPaint, stream);\n        SerialUtilities.writePaint(this.domainTickBandPaint, stream);\n        SerialUtilities.writePaint(this.rangeTickBandPaint, stream);\n        SerialUtilities.writePoint2D(this.quadrantOrigin, stream);\n        for (int i = 0; i < 4; i++) {\n         //The specific code has been omitted, but there is no error\n        }\n        SerialUtilities.writeStroke(this.domainZeroBaselineStroke, stream);\n        SerialUtilities.writePaint(this.domainZeroBaselinePaint, stream);\n    }\n\n    /**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n    private void readObject(ObjectInputStream stream)\n        throws IOException, ClassNotFoundException {\n\n        stream.defaultReadObject();\n        this.domainGridlineStroke = SerialUtilities.readStroke(stream);\n        this.domainGridlinePaint = SerialUtilities.readPaint(stream);\n        this.rangeGridlineStroke = SerialUtilities.readStroke(stream);\n        this.rangeGridlinePaint = SerialUtilities.readPaint(stream);\n        this.domainMinorGridlineStroke = SerialUtilities.readStroke(stream);\n        this.domainMinorGridlinePaint = SerialUtilities.readPaint(stream);\n        this.rangeMinorGridlineStroke = SerialUtilities.readStroke(stream);\n        this.rangeMinorGridlinePaint = SerialUtilities.readPaint(stream);\n        this.rangeZeroBaselineStroke = SerialUtilities.readStroke(stream);\n        this.rangeZeroBaselinePaint = SerialUtilities.readPaint(stream);\n        this.domainCrosshairStroke = SerialUtilities.readStroke(stream);\n        this.domainCrosshairPaint = SerialUtilities.readPaint(stream);\n        this.rangeCrosshairStroke = SerialUtilities.readStroke(stream);\n        this.rangeCrosshairPaint = SerialUtilities.readPaint(stream);\n        this.domainTickBandPaint = SerialUtilities.readPaint(stream);\n        this.rangeTickBandPaint = SerialUtilities.readPaint(stream);\n        this.quadrantOrigin = SerialUtilities.readPoint2D(stream);\n        this.quadrantPaint = new Paint[4];\n        for (int i = 0; i < 4; i++) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        this.domainZeroBaselineStroke = SerialUtilities.readStroke(stream);\n        this.domainZeroBaselinePaint = SerialUtilities.readPaint(stream);\n\n        // register the plot as a listener with its axes, datasets, and\n        // renderers...\n        int domainAxisCount = this.domainAxes.size();\n        for (int i = 0; i < domainAxisCount; i++) {\n         //The specific code has been omitted, but there is no error\n        }\n        int rangeAxisCount = this.rangeAxes.size();\n        for (int i = 0; i < rangeAxisCount; i++) {\n         //The specific code has been omitted, but there is no error\n        }\n        int datasetCount = this.datasets.size();\n        for (int i = 0; i < datasetCount; i++) {\n         //The specific code has been omitted, but there is no error\n        }\n        int rendererCount = this.renderers.size();\n        for (int i = 0; i < rendererCount; i++) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    }\n\n    /**\n     * Returns <code>false</code> to indicate that this plot does not support\n     * selection of data items at a point (only because it hasn't been\n     * implemented yet).\n     *\n     * @return A boolean.\n     *\n     * @since 1.2.0\n     */\n    public boolean canSelectByPoint() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns <code>true</code> to indicate that this plot supports selection\n     * of data items by region.\n     *\n     * @return A boolean.\n     *\n     * @since 1.2.0\n     */\n    public boolean canSelectByRegion() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Selects a single point - NOT YET IMPLEMENTED.\n     *\n     * @since 1.2.0\n     */\n    public void select(double x, double y, Rectangle2D dataArea,\n            RenderingSource source) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Selects the data items within the specified region.\n     *\n     * @param region  the region (in Java2D coordinates).\n     * @param dataArea  the data area.\n     * @param source  the rendering source.\n     *\n     * @since 1.2.0\n     */\n    public void select(GeneralPath region, Rectangle2D dataArea,\n            RenderingSource source) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the selection state for the specified dataset.  This could be\n     * <code>null</code> if the dataset hasn't been set up to support\n     * selections.\n     *\n     * @param dataset  the dataset.\n     * @param source  the selection source.\n     *\n     * @return The selection state (possibly <code>null</code>).\n     */\n    private XYDatasetSelectionState findSelectionStateForDataset(\n            XYDataset dataset, Object source) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Converts a path from Java2D space to data space.\n     *\n     * @param path  the path (<code>null</code> not permitted).\n     * @param dataArea  the data area.\n     * @param dataset  the dataset which can be used to find the appropriate\n     *         axes.\n     *\n     * @return A path in data space.\n     */\n    private GeneralPath convertToDataSpace(GeneralPath path,\n            Rectangle2D dataArea, XYDataset dataset) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Clears the selection.\n     *\n     * @since 1.2.0\n     */\n    public void clearSelection() {\n         //The specific code has been omitted, but there is no error\n        }\n\n}"}