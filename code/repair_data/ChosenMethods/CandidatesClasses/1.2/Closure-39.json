{"PrototypeObjectType": "class PrototypeObjectType extends ObjectType {\n  private static final long serialVersionUID = 1L;\n\n  private final String className;\n  private final Map<String, Property> properties;\n  private final boolean nativeType;\n\n  // NOTE(nicksantos): The implicit prototype can change over time.\n  // Modelling this is a bear. Always call getImplicitPrototype(), because\n  // some subclasses override this to do special resolution handling.\n  private ObjectType implicitPrototypeFallback;\n\n  // If this is a function prototype, then this is the owner.\n  // A PrototypeObjectType can only be the prototype of one function. If we try\n  // to do this for multiple functions, then we'll have to create a new one.\n  private FunctionType ownerFunction = null;\n\n  // Whether the toString representation of this should be pretty-printed,\n  // by printing all properties.\n  private boolean prettyPrint = false;\n\n  private static final int MAX_PRETTY_PRINTED_PROPERTIES = 4;\n\n  /**\n   * Creates an object type.\n   *\n   * @param className the name of the class.  May be {@code null} to\n   *        denote an anonymous class.\n   *\n   * @param implicitPrototype the implicit prototype\n   *        (a.k.a. {@code [[Prototype]]}) as defined by ECMA-262. If the\n   *        implicit prototype is {@code null} the implicit prototype will be\n   *        set to the {@link JSTypeNative#OBJECT_TYPE}.\n   */\n  PrototypeObjectType(JSTypeRegistry registry, String className,\n      ObjectType implicitPrototype) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /**\n   * Creates an object type, allowing specification of the implicit prototype\n   * when creating native objects.\n   */\n  PrototypeObjectType(JSTypeRegistry registry, String className,\n      ObjectType implicitPrototype, boolean nativeType) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  @Override\n  public Property getSlot(String name) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /**\n   * Gets the number of properties of this object.\n   */\n  @Override\n  public int getPropertiesCount() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  @Override\n  public boolean hasProperty(String propertyName) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  @Override\n  public boolean hasOwnProperty(String propertyName) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  @Override\n  public Set<String> getOwnPropertyNames() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  @Override\n  public boolean isPropertyTypeDeclared(String property) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  @Override\n  void collectPropertyNames(Set<String> props) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  @Override\n  public boolean isPropertyTypeInferred(String property) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  @Override\n  public JSType getPropertyType(String property) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  @Override\n  public boolean isPropertyInExterns(String propertyName) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  @Override\n  boolean defineProperty(String name, JSType type, boolean inferred,\n      Node propertyNode) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  @Override\n  public boolean removeProperty(String name) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  @Override\n  public Node getPropertyNode(String propertyName) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  @Override\n  public JSDocInfo getOwnPropertyJSDocInfo(String propertyName) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  @Override\n  public void setPropertyJSDocInfo(String propertyName, JSDocInfo info) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  @Override\n  public boolean matchesNumberContext() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  @Override\n  public boolean matchesStringContext() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /**\n   * Given the name of a native object property, checks whether the property is\n   * present on the object and different from the native one.\n   */\n  private boolean hasOverridenNativeProperty(String propertyName) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  @Override\n  public JSType unboxesTo() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  @Override\n  public boolean matchesObjectContext() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  @Override\n  public boolean canBeCalled() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  @Override\n  String toStringHelper(boolean forAnnotations) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  void setPrettyPrint(boolean prettyPrint) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  boolean isPrettyPrint() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  @Override\n  public FunctionType getConstructor() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  @Override\n  public ObjectType getImplicitPrototype() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /**\n   * This should only be reset on the FunctionPrototypeType, only to fix an\n   * incorrectly established prototype chain due to the user having a mismatch\n   * in super class declaration, and only before properties on that type are\n   * processed.\n   */\n  final void setImplicitPrototype(ObjectType implicitPrototype) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  @Override\n  public String getReferenceName() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  @Override\n  public boolean hasReferenceName() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  @Override\n  public boolean isSubtype(JSType that) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  private boolean implicitPrototypeChainIsUnknown() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  @Override\n  public boolean hasCachedValues() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /** Whether this is a built-in object. */\n  @Override\n  public boolean isNativeObjectType() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  void setOwnerFunction(FunctionType type) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  @Override\n  public FunctionType getOwnerFunction() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  @Override\n  public Iterable<ObjectType> getCtorImplementedInterfaces() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  @Override\n  public Iterable<ObjectType> getCtorExtendedInterfaces() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  @Override\n  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n         //The specific code has been omitted, but there is no error\n        }\n}"}