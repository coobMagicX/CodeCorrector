{"CommandLineRunner": "public class CommandLineRunner extends\n    AbstractCommandLineRunner<Compiler, CompilerOptions> {\n\n  private static class Flags {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /**\n   * Set of options that can be used with the --formatting flag.\n   */\n  private static enum FormattingOption {\n    PRETTY_PRINT,\n    PRINT_INPUT_DELIMITER,\n    ;\n\n    private void applyToOptions(CompilerOptions options) {\n         //The specific code has been omitted, but there is no error\n        }\n  }\n\n  private final Flags flags = new Flags();\n\n  private static final String configResource =\n      \"com.google.javascript.jscomp.parsing.ParserConfig\";\n\n  private boolean isConfigValid = false;\n\n  /**\n   * Create a new command-line runner. You should only need to call\n   * the constructor if you're extending this class. Otherwise, the main\n   * method should instantiate it.\n   */\n  protected CommandLineRunner(String[] args) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  protected CommandLineRunner(String[] args, PrintStream out, PrintStream err) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  private void initConfigFromFlags(String[] args, PrintStream err) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  @Override\n  protected CompilerOptions createOptions() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  @Override\n  protected Compiler createCompiler() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  @Override\n  protected List<JSSourceFile> createExterns() throws FlagUsageException,\n      IOException {\n    List<JSSourceFile> externs = super.createExterns();\n    if (flags.use_only_custom_externs || isInTestMode()) {\n      return externs;\n    } else {\n      List<JSSourceFile> defaultExterns = getDefaultExterns();\n      defaultExterns.addAll(externs);\n      return defaultExterns;\n    }\n  }\n\n  // The externs expected in externs.zip, in sorted order.\n  private static final List<String> DEFAULT_EXTERNS_NAMES = ImmutableList.of(\n    // JS externs\n    \"es3.js\",\n    \"es5.js\",\n\n    // Event APIs\n    \"w3c_event.js\",\n    \"w3c_event3.js\",\n    \"gecko_event.js\",\n    \"ie_event.js\",\n    \"webkit_event.js\",\n\n    // DOM apis\n    \"w3c_dom1.js\",\n    \"w3c_dom2.js\",\n    \"w3c_dom3.js\",\n    \"gecko_dom.js\",\n    \"ie_dom.js\",\n    \"webkit_dom.js\",\n\n    // CSS apis\n    \"w3c_css.js\",\n    \"gecko_css.js\",\n    \"ie_css.js\",\n    \"webkit_css.js\",\n\n    // Top-level namespaces\n    \"google.js\",\n\n    \"deprecated.js\",\n    \"fileapi.js\",\n    \"flash.js\",\n    \"gears_symbols.js\",\n    \"gears_types.js\",\n    \"gecko_xml.js\",\n    \"html5.js\",\n    \"ie_vml.js\",\n    \"iphone.js\",\n    \"webstorage.js\",\n    \"w3c_css3d.js\",\n    \"w3c_elementtraversal.js\",\n    \"w3c_geolocation.js\",\n    \"w3c_range.js\",\n    \"w3c_selectors.js\",\n    \"w3c_xml.js\",\n    \"window.js\",\n    \"webkit_notifications.js\");\n\n  /**\n   * @return a mutable list\n   * @throws IOException\n   */\n  public static List<JSSourceFile> getDefaultExterns() throws IOException {\n    InputStream input = CommandLineRunner.class.getResourceAsStream(\n        \"/externs.zip\");\n    ZipInputStream zip = new ZipInputStream(input);\n    Map<String, JSSourceFile> externsMap = Maps.newHashMap();\n    for (ZipEntry entry = null; (entry = zip.getNextEntry()) != null; ) {\n      LimitInputStream entryStream = new LimitInputStream(zip, entry.getSize());\n      externsMap.put(entry.getName(),\n          JSSourceFile.fromInputStream(\n              // Give the files an odd prefix, so that they do not conflict\n              // with the user's files.\n              \"externs.zip//\" + entry.getName(),\n              entryStream));\n    }\n\n    Preconditions.checkState(\n        externsMap.keySet().equals(Sets.newHashSet(DEFAULT_EXTERNS_NAMES)),\n        \"Externs zip must match our hard-coded list of externs.\");\n\n    // Order matters, so the resources must be added to the result list\n    // in the expected order.\n    List<JSSourceFile> externs = Lists.newArrayList();\n    for (String key : DEFAULT_EXTERNS_NAMES) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    return externs;\n  }\n\n  /**\n   * @return Whether the configuration is valid.\n   */\n  public boolean shouldRunCompiler() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /**\n   * Runs the Compiler. Exits cleanly in the event of an error.\n   */\n  public static void main(String[] args) {\n         //The specific code has been omitted, but there is no error\n        }\n}", "Flags": "  private static class Flags {\n         //The specific code has been omitted, but there is no error\n        }", "BooleanOptionHandler": "    public static class BooleanOptionHandler extends OptionHandler<Boolean> {\n      private static final Set<String> TRUES =\n          Sets.newHashSet(\"true\", \"on\", \"yes\", \"1\");\n      private static final Set<String> FALSES =\n          Sets.newHashSet(\"false\", \"off\", \"no\", \"0\");\n\n      public BooleanOptionHandler(\n          CmdLineParser parser, OptionDef option,\n          Setter<? super Boolean> setter) {\n         //The specific code has been omitted, but there is no error\n        }\n\n      @Override\n      public int parseArguments(Parameters params) throws CmdLineException {\n        String param = params.getParameter(0);\n\n        if (param == null) {\n         //The specific code has been omitted, but there is no error\n        } else {\n          String lowerParam = param.toLowerCase();\n          if (TRUES.contains(lowerParam)) {\n            setter.addValue(true);\n          } else if (FALSES.contains(lowerParam)) {\n            setter.addValue(false);\n          } else {\n            setter.addValue(true);\n            return 0;\n          }\n          return 1;\n        }\n      }\n\n      @Override\n      public String getDefaultMetaVariable() {\n         //The specific code has been omitted, but there is no error\n        }\n    }"}