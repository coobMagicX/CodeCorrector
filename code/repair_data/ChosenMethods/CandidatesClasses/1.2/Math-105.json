{"SimpleRegression": "public class SimpleRegression implements Serializable {\n\n    /** Serializable version identifier */\n    private static final long serialVersionUID = -3004689053607543335L;\n\n    /** sum of x values */\n    private double sumX = 0d;\n\n    /** total variation in x (sum of squared deviations from xbar) */\n    private double sumXX = 0d;\n\n    /** sum of y values */\n    private double sumY = 0d;\n\n    /** total variation in y (sum of squared deviations from ybar) */\n    private double sumYY = 0d;\n\n    /** sum of products */\n    private double sumXY = 0d;\n\n    /** number of observations */\n    private long n = 0;\n\n    /** mean of accumulated x values, used in updating formulas */\n    private double xbar = 0;\n\n    /** mean of accumulated y values, used in updating formulas */\n    private double ybar = 0;\n\n    // ---------------------Public methods--------------------------------------\n\n    /**\n     * Create an empty SimpleRegression instance\n     */\n    public SimpleRegression() {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Adds the observation (x,y) to the regression data set.\n     * <p>\n     * Uses updating formulas for means and sums of squares defined in \n     * \"Algorithms for Computing the Sample Variance: Analysis and\n     * Recommendations\", Chan, T.F., Golub, G.H., and LeVeque, R.J. \n     * 1983, American Statistician, vol. 37, pp. 242-247, referenced in\n     * Weisberg, S. \"Applied Linear Regression\". 2nd Ed. 1985\n     *\n     *\n     * @param x independent variable value\n     * @param y dependent variable value\n     */\n    public void addData(double x, double y) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Adds the observations represented by the elements in \n     * <code>data</code>.\n     * <p>\n     * <code>(data[0][0],data[0][1])</code> will be the first observation, then\n     * <code>(data[1][0],data[1][1])</code>, etc. \n     * <p> \n     * This method does not replace data that has already been added.  The\n     * observations represented by <code>data</code> are added to the existing\n     * dataset.\n     * <p> \n     * To replace all data, use <code>clear()</code> before adding the new \n     * data.\n     * \n     * @param data array of observations to be added\n     */\n    public void addData(double[][] data) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Clears all data from the model.\n     */\n    public void clear() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the number of observations that have been added to the model.\n     *\n     * @return n number of observations that have been added.\n     */\n    public long getN() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the \"predicted\" <code>y</code> value associated with the \n     * supplied <code>x</code> value,  based on the data that has been\n     * added to the model when this method is activated.\n     * <p>\n     * <code> predict(x) = intercept + slope * x </code>\n     * <p>\n     * <strong>Preconditions</strong>: <ul>\n     * <li>At least two observations (with at least two different x values)\n     * must have been added before invoking this method. If this method is \n     * invoked before a model can be estimated, <code>Double,NaN</code> is\n     * returned.\n     * </li></ul>\n     *\n     * @param x input <code>x</code> value\n     * @return predicted <code>y</code> value\n     */\n    public double predict(double x) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the intercept of the estimated regression line.\n     * <p>\n     * The least squares estimate of the intercept is computed using the \n     * <a href=\"http://www.xycoon.com/estimation4.htm\">normal equations</a>.\n     * The intercept is sometimes denoted b0. \n     * <p>\n     * <strong>Preconditions</strong>: <ul>\n     * <li>At least two observations (with at least two different x values)\n     * must have been added before invoking this method. If this method is \n     * invoked before a model can be estimated, <code>Double,NaN</code> is\n     * returned.\n     * </li></ul>\n     *\n     * @return the intercept of the regression line\n     */\n    public double getIntercept() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n    * Returns the slope of the estimated regression line.  \n    * <p>\n    * The least squares estimate of the slope is computed using the \n    * <a href=\"http://www.xycoon.com/estimation4.htm\">normal equations</a>.\n    * The slope is sometimes denoted b1. \n    * <p>\n    * <strong>Preconditions</strong>: <ul>\n    * <li>At least two observations (with at least two different x values)\n    * must have been added before invoking this method. If this method is \n    * invoked before a model can be estimated, <code>Double.NaN</code> is\n    * returned.\n    * </li></ul>\n    *\n    * @return the slope of the regression line\n    */\n    public double getSlope() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the <a href=\"http://www.xycoon.com/SumOfSquares.htm\">\n     * sum of squared errors</a> (SSE) associated with the regression \n     * model.\n     * <p>\n     * The sum is computed using the computational formula\n     * <p>\n     * <code>SSE = SYY - (SXY * SXY / SXX)</code>\n     * <p>\n     * where <code>SYY</code> is the sum of the squared deviations of the y\n     * values about their mean, <code>SXX</code> is similarly defined and\n     * <code>SXY</code> is the sum of the products of x and y mean deviations.\n     * <p>\n     * The sums are accumulated using the updating algorithm referenced in \n     * {@link #addData}.  \n     * <p>\n     * The return value is constrained to be non-negative - i.e., if due to \n     * rounding errors the computational formula returns a negative result, \n     * 0 is returned.\n     * <p>\n     * <strong>Preconditions</strong>: <ul>\n     * <li>At least two observations (with at least two different x values)\n     * must have been added before invoking this method. If this method is \n     * invoked before a model can be estimated, <code>Double,NaN</code> is\n     * returned.\n     * </li></ul>\n     *\n     * @return sum of squared errors associated with the regression model\n     */\n    public double getSumSquaredErrors() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the sum of squared deviations of the y values about their mean.\n     * <p>\n     * This is defined as SSTO \n     * <a href=\"http://www.xycoon.com/SumOfSquares.htm\">here</a>.\n     * <p>\n     * If <code>n < 2</code>, this returns <code>Double.NaN</code>.\n     *\n     * @return sum of squared deviations of y values\n     */\n    public double getTotalSumSquares() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the sum of squared deviations of the predicted y values about \n     * their mean (which equals the mean of y).\n     * <p>\n     * This is usually abbreviated SSR or SSM.  It is defined as SSM \n     * <a href=\"http://www.xycoon.com/SumOfSquares.htm\">here</a>\n     * <p>\n     * <strong>Preconditions</strong>: <ul>\n     * <li>At least two observations (with at least two different x values)\n     * must have been added before invoking this method. If this method is \n     * invoked before a model can be estimated, <code>Double.NaN</code> is\n     * returned.\n     * </li></ul>\n     *\n     * @return sum of squared deviations of predicted y values\n     */\n    public double getRegressionSumSquares() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the sum of squared errors divided by the degrees of freedom,\n     * usually abbreviated MSE. \n     * <p>\n     * If there are fewer than <strong>three</strong> data pairs in the model,\n     * or if there is no variation in <code>x</code>, this returns \n     * <code>Double.NaN</code>.\n     *\n     * @return sum of squared deviations of y values\n     */\n    public double getMeanSquareError() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns <a href=\"http://mathworld.wolfram.com/CorrelationCoefficient.html\">\n     * Pearson's product moment correlation coefficient</a>,\n     * usually denoted r. \n     * <p>\n     * <strong>Preconditions</strong>: <ul>\n     * <li>At least two observations (with at least two different x values)\n     * must have been added before invoking this method. If this method is \n     * invoked before a model can be estimated, <code>Double,NaN</code> is\n     * returned.\n     * </li></ul>\n     *\n     * @return Pearson's r\n     */\n    public double getR() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /** \n     * Returns the <a href=\"http://www.xycoon.com/coefficient1.htm\"> \n     * coefficient of determination</a>,\n     * usually denoted r-square. \n     * <p>\n     * <strong>Preconditions</strong>: <ul>\n     * <li>At least two observations (with at least two different x values)\n     * must have been added before invoking this method. If this method is \n     * invoked before a model can be estimated, <code>Double,NaN</code> is\n     * returned.\n     * </li></ul>\n     *\n     * @return r-square\n     */\n    public double getRSquare() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the <a href=\"http://www.xycoon.com/standarderrorb0.htm\">\n     * standard error of the intercept estimate</a>, \n     * usually denoted s(b0). \n     * <p>\n     * If there are fewer that <strong>three</strong> observations in the \n     * model, or if there is no variation in x, this returns \n     * <code>Double.NaN</code>.\n     *\n     * @return standard error associated with intercept estimate\n     */\n    public double getInterceptStdErr() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the <a href=\"http://www.xycoon.com/standerrorb(1).htm\">standard\n     * error of the slope estimate</a>,\n     * usually denoted s(b1). \n     * <p>\n     * If there are fewer that <strong>three</strong> data pairs in the model,\n     * or if there is no variation in x, this returns <code>Double.NaN</code>.\n     *\n     * @return standard error associated with slope estimate\n     */\n    public double getSlopeStdErr() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the half-width of a 95% confidence interval for the slope\n     * estimate.\n     * <p>\n     * The 95% confidence interval is \n     * <p>\n     * <code>(getSlope() - getSlopeConfidenceInterval(), \n     * getSlope() + getSlopeConfidenceInterval())</code>\n     * <p>\n     * If there are fewer that <strong>three</strong> observations in the \n     * model, or if there is no variation in x, this returns \n     * <code>Double.NaN</code>.\n     * <p>\n     * <strong>Usage Note</strong>:<br>\n     * The validity of this statistic depends on the assumption that the \n     * observations included in the model are drawn from a\n     * <a href=\"http://mathworld.wolfram.com/BivariateNormalDistribution.html\">\n     * Bivariate Normal Distribution</a>.\n     *\n     * @return half-width of 95% confidence interval for the slope estimate\n     * \n     * @throws MathException if the confidence interval can not be computed.\n     */\n    public double getSlopeConfidenceInterval() throws MathException {\n        return getSlopeConfidenceInterval(0.05d);\n    }\n\n    /**\n     * Returns the half-width of a (100-100*alpha)% confidence interval for \n     * the slope estimate.\n     * <p>\n     * The (100-100*alpha)% confidence interval is \n     * <p>\n     * <code>(getSlope() - getSlopeConfidenceInterval(), \n     * getSlope() + getSlopeConfidenceInterval())</code>\n     * <p>\n     * To request, for example, a 99% confidence interval, use \n     * <code>alpha = .01</code>\n     * <p>\n     * <strong>Usage Note</strong>:<br>\n     * The validity of this statistic depends on the assumption that the \n     * observations included in the model are drawn from a\n     * <a href=\"http://mathworld.wolfram.com/BivariateNormalDistribution.html\">\n     * Bivariate Normal Distribution</a>.\n     * <p>\n     * <strong> Preconditions:</strong><ul>\n     * <li>If there are fewer that <strong>three</strong> observations in the \n     * model, or if there is no variation in x, this returns \n     * <code>Double.NaN</code>. \n     * </li>\n     * <li><code>(0 < alpha < 1)</code>; otherwise an \n     * <code>IllegalArgumentException</code> is thrown.\n     * </li></ul>    \n     *\n     * @param alpha the desired significance level \n     * @return half-width of 95% confidence interval for the slope estimate\n     * @throws MathException if the confidence interval can not be computed.\n     */\n    public double getSlopeConfidenceInterval(double alpha)\n        throws MathException {\n        if (alpha >= 1 || alpha <= 0) {\n         //The specific code has been omitted, but there is no error\n        }\n        return getSlopeStdErr() *\n            getTDistribution().inverseCumulativeProbability(1d - alpha / 2d);\n    }\n\n    /**\n     * Returns the significance level of the slope (equiv) correlation. \n     * <p>\n     * Specifically, the returned value is the smallest <code>alpha</code>\n     * such that the slope confidence interval with significance level\n     * equal to <code>alpha</code> does not include <code>0</code>.\n     * On regression output, this is often denoted <code>Prob(|t| > 0)</code>\n     * <p>\n     * <strong>Usage Note</strong>:<br>\n     * The validity of this statistic depends on the assumption that the \n     * observations included in the model are drawn from a\n     * <a href=\"http://mathworld.wolfram.com/BivariateNormalDistribution.html\">\n     * Bivariate Normal Distribution</a>.\n     * <p>\n     * If there are fewer that <strong>three</strong> observations in the \n     * model, or if there is no variation in x, this returns \n     * <code>Double.NaN</code>.\n     *\n     * @return significance level for slope/correlation\n     * @throws MathException if the significance level can not be computed.\n     */\n    public double getSignificance() throws MathException {\n        return 2d* (1.0 - getTDistribution().cumulativeProbability(\n                    Math.abs(getSlope()) / getSlopeStdErr()));\n    }\n\n    // ---------------------Private methods-----------------------------------\n\n    /**\n    * Returns the intercept of the estimated regression line, given the slope.\n    * <p>\n    * Will return <code>NaN</code> if slope is <code>NaN</code>.\n    *\n    * @param slope current slope\n    * @return the intercept of the regression line\n    */\n    private double getIntercept(double slope) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Computes SSR from b1.\n     * \n     * @param slope regression slope estimate\n     * @return sum of squared deviations of predicted y values\n     */\n    private double getRegressionSumSquares(double slope) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Uses distribution framework to get a t distribution instance \n     * with df = n - 2\n     *\n     * @return t distribution with df = n - 2\n     */\n    private TDistribution getTDistribution() {\n         //The specific code has been omitted, but there is no error\n        }\n}"}