{"Fraction": "public class Fraction\n    extends Number\n    implements FieldElement<Fraction>, Comparable<Fraction>, Serializable {\n\n    /** A fraction representing \"2 / 1\". */\n    public static final Fraction TWO = new Fraction(2, 1);\n\n    /** A fraction representing \"1\". */\n    public static final Fraction ONE = new Fraction(1, 1);\n\n    /** A fraction representing \"0\". */\n    public static final Fraction ZERO = new Fraction(0, 1);\n\n    /** A fraction representing \"4/5\". */\n    public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);\n\n    /** A fraction representing \"1/5\". */\n    public static final Fraction ONE_FIFTH = new Fraction(1, 5);\n\n    /** A fraction representing \"1/2\". */\n    public static final Fraction ONE_HALF = new Fraction(1, 2);\n\n    /** A fraction representing \"1/4\". */\n    public static final Fraction ONE_QUARTER = new Fraction(1, 4);\n\n    /** A fraction representing \"1/3\". */\n    public static final Fraction ONE_THIRD = new Fraction(1, 3);\n\n    /** A fraction representing \"3/5\". */\n    public static final Fraction THREE_FIFTHS = new Fraction(3, 5);\n\n    /** A fraction representing \"3/4\". */\n    public static final Fraction THREE_QUARTERS = new Fraction(3, 4);\n\n    /** A fraction representing \"2/5\". */\n    public static final Fraction TWO_FIFTHS = new Fraction(2, 5);\n\n    /** A fraction representing \"2/4\". */\n    public static final Fraction TWO_QUARTERS = new Fraction(2, 4);\n\n    /** A fraction representing \"2/3\". */\n    public static final Fraction TWO_THIRDS = new Fraction(2, 3);\n\n    /** A fraction representing \"-1 / 1\". */\n    public static final Fraction MINUS_ONE = new Fraction(-1, 1);\n\n    /** Serializable version identifier */\n    private static final long serialVersionUID = 3698073679419233275L;\n\n    /** The denominator. */\n    private final int denominator;\n\n    /** The numerator. */\n    private final int numerator;\n\n    /**\n     * Create a fraction given the double value.\n     * @param value the double value to convert to a fraction.\n     * @throws FractionConversionException if the continued fraction failed to\n     *         converge.\n     */\n    public Fraction(double value) throws FractionConversionException {\n        this(value, 1.0e-5, 100);\n    }\n\n    /**\n     * Create a fraction given the double value and maximum error allowed.\n     * <p>\n     * References:\n     * <ul>\n     * <li><a href=\"http://mathworld.wolfram.com/ContinuedFraction.html\">\n     * Continued Fraction</a> equations (11) and (22)-(26)</li>\n     * </ul>\n     * </p>\n     * @param value the double value to convert to a fraction.\n     * @param epsilon maximum error allowed.  The resulting fraction is within\n     *        {@code epsilon} of {@code value}, in absolute terms.\n     * @param maxIterations maximum number of convergents\n     * @throws FractionConversionException if the continued fraction failed to\n     *         converge.\n     */\n    public Fraction(double value, double epsilon, int maxIterations)\n        throws FractionConversionException\n    {\n        this(value, epsilon, Integer.MAX_VALUE, maxIterations);\n    }\n\n    /**\n     * Create a fraction given the double value and maximum denominator.\n     * <p>\n     * References:\n     * <ul>\n     * <li><a href=\"http://mathworld.wolfram.com/ContinuedFraction.html\">\n     * Continued Fraction</a> equations (11) and (22)-(26)</li>\n     * </ul>\n     * </p>\n     * @param value the double value to convert to a fraction.\n     * @param maxDenominator The maximum allowed value for denominator\n     * @throws FractionConversionException if the continued fraction failed to\n     *         converge\n     */\n    public Fraction(double value, int maxDenominator)\n        throws FractionConversionException\n    {\n       this(value, 0, maxDenominator, 100);\n    }\n\n    /**\n     * Create a fraction given the double value and either the maximum error\n     * allowed or the maximum number of denominator digits.\n     * <p>\n     *\n     * NOTE: This constructor is called with EITHER\n     *   - a valid epsilon value and the maxDenominator set to Integer.MAX_VALUE\n     *     (that way the maxDenominator has no effect).\n     * OR\n     *   - a valid maxDenominator value and the epsilon value set to zero\n     *     (that way epsilon only has effect if there is an exact match before\n     *     the maxDenominator value is reached).\n     * </p><p>\n     *\n     * It has been done this way so that the same code can be (re)used for both\n     * scenarios. However this could be confusing to users if it were part of\n     * the public API and this constructor should therefore remain PRIVATE.\n     * </p>\n     *\n     * See JIRA issue ticket MATH-181 for more details:\n     *\n     *     https://issues.apache.org/jira/browse/MATH-181\n     *\n     * @param value the double value to convert to a fraction.\n     * @param epsilon maximum error allowed.  The resulting fraction is within\n     *        {@code epsilon} of {@code value}, in absolute terms.\n     * @param maxDenominator maximum denominator value allowed.\n     * @param maxIterations maximum number of convergents\n     * @throws FractionConversionException if the continued fraction failed to\n     *         converge.\n     */\n    private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n        throws FractionConversionException\n    {\n        long overflow = Integer.MAX_VALUE;\n        double r0 = value;\n        long a0 = (long)FastMath.floor(r0);\n        if (a0 > overflow) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        // check for (almost) integer arguments, which should not go\n        // to iterations.\n        if (FastMath.abs(a0 - value) < epsilon) {\n            this.numerator = (int) a0;\n            this.denominator = 1;\n            return;\n        }\n\n        long p0 = 1;\n        long q0 = 0;\n        long p1 = a0;\n        long q1 = 1;\n\n        long p2 = 0;\n        long q2 = 1;\n\n        int n = 0;\n        boolean stop = false;\n        do {\n            ++n;\n            double r1 = 1.0 / (r0 - a0);\n            long a1 = (long)FastMath.floor(r1);\n            p2 = (a1 * p1) + p0;\n            q2 = (a1 * q1) + q0;\n            if ((p2 > overflow) || (q2 > overflow)) {\n                throw new FractionConversionException(value, p2, q2);\n            }\n\n            double convergent = (double)p2 / (double)q2;\n            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {\n                p0 = p1;\n                p1 = p2;\n                q0 = q1;\n                q1 = q2;\n                a0 = a1;\n                r0 = r1;\n            } else {\n                stop = true;\n            }\n        } while (!stop);\n\n        if (n >= maxIterations) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        if (q2 < maxDenominator) {\n         //The specific code has been omitted, but there is no error\n        } else {\n            this.numerator = (int) p1;\n            this.denominator = (int) q1;\n        }\n\n    }\n\n    /**\n     * Create a fraction from an int.\n     * The fraction is num / 1.\n     * @param num the numerator.\n     */\n    public Fraction(int num) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Create a fraction given the numerator and denominator.  The fraction is\n     * reduced to lowest terms.\n     * @param num the numerator.\n     * @param den the denominator.\n     * @throws MathArithmeticException if the denominator is {@code zero}\n     */\n    public Fraction(int num, int den) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the absolute value of this fraction.\n     * @return the absolute value.\n     */\n    public Fraction abs() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Compares this object to another based on size.\n     * @param object the object to compare to\n     * @return -1 if this is less than <tt>object</tt>, +1 if this is greater\n     *         than <tt>object</tt>, 0 if they are equal.\n     */\n    public int compareTo(Fraction object) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Gets the fraction as a <tt>double</tt>. This calculates the fraction as\n     * the numerator divided by denominator.\n     * @return the fraction as a <tt>double</tt>\n     */\n    @Override\n    public double doubleValue() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Test for the equality of two fractions.  If the lowest term\n     * numerator and denominators are the same for both fractions, the two\n     * fractions are considered to be equal.\n     * @param other fraction to test for equality to this fraction\n     * @return true if two fractions are equal, false if object is\n     *         <tt>null</tt>, not an instance of {@link Fraction}, or not equal\n     *         to this fraction instance.\n     */\n    @Override\n    public boolean equals(Object other) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Gets the fraction as a <tt>float</tt>. This calculates the fraction as\n     * the numerator divided by denominator.\n     * @return the fraction as a <tt>float</tt>\n     */\n    @Override\n    public float floatValue() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Access the denominator.\n     * @return the denominator.\n     */\n    public int getDenominator() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Access the numerator.\n     * @return the numerator.\n     */\n    public int getNumerator() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Gets a hashCode for the fraction.\n     * @return a hash code value for this object\n     */\n    @Override\n    public int hashCode() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Gets the fraction as an <tt>int</tt>. This returns the whole number part\n     * of the fraction.\n     * @return the whole number fraction part\n     */\n    @Override\n    public int intValue() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Gets the fraction as a <tt>long</tt>. This returns the whole number part\n     * of the fraction.\n     * @return the whole number fraction part\n     */\n    @Override\n    public long longValue() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Return the additive inverse of this fraction.\n     * @return the negation of this fraction.\n     */\n    public Fraction negate() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Return the multiplicative inverse of this fraction.\n     * @return the reciprocal fraction\n     */\n    public Fraction reciprocal() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>Adds the value of this fraction to another, returning the result in reduced form.\n     * The algorithm follows Knuth, 4.5.1.</p>\n     *\n     * @param fraction  the fraction to add, must not be {@code null}\n     * @return a {@code Fraction} instance with the resulting values\n     * @throws NullArgumentException if the fraction is {@code null}\n     * @throws MathArithmeticException if the resulting numerator or denominator exceeds\n     *  {@code Integer.MAX_VALUE}\n     */\n    public Fraction add(Fraction fraction) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Add an integer to the fraction.\n     * @param i the <tt>integer</tt> to add.\n     * @return this + i\n     */\n    public Fraction add(final int i) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>Subtracts the value of another fraction from the value of this one,\n     * returning the result in reduced form.</p>\n     *\n     * @param fraction  the fraction to subtract, must not be {@code null}\n     * @return a {@code Fraction} instance with the resulting values\n     * @throws NullArgumentException if the fraction is {@code null}\n     * @throws MathArithmeticException if the resulting numerator or denominator\n     *   cannot be represented in an {@code int}.\n     */\n    public Fraction subtract(Fraction fraction) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Subtract an integer from the fraction.\n     * @param i the <tt>integer</tt> to subtract.\n     * @return this - i\n     */\n    public Fraction subtract(final int i) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Implement add and subtract using algorithm described in Knuth 4.5.1.\n     *\n     * @param fraction the fraction to subtract, must not be {@code null}\n     * @param isAdd true to add, false to subtract\n     * @return a {@code Fraction} instance with the resulting values\n     * @throws NullArgumentException if the fraction is {@code null}\n     * @throws MathArithmeticException if the resulting numerator or denominator\n     *   cannot be represented in an {@code int}.\n     */\n    private Fraction addSub(Fraction fraction, boolean isAdd) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>Multiplies the value of this fraction by another, returning the\n     * result in reduced form.</p>\n     *\n     * @param fraction  the fraction to multiply by, must not be {@code null}\n     * @return a {@code Fraction} instance with the resulting values\n     * @throws NullArgumentException if the fraction is {@code null}\n     * @throws MathArithmeticException if the resulting numerator or denominator exceeds\n     *  {@code Integer.MAX_VALUE}\n     */\n    public Fraction multiply(Fraction fraction) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Multiply the fraction by an integer.\n     * @param i the <tt>integer</tt> to multiply by.\n     * @return this * i\n     */\n    public Fraction multiply(final int i) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>Divide the value of this fraction by another.</p>\n     *\n     * @param fraction  the fraction to divide by, must not be {@code null}\n     * @return a {@code Fraction} instance with the resulting values\n     * @throws IllegalArgumentException if the fraction is {@code null}\n     * @throws MathArithmeticException if the fraction to divide by is zero\n     * @throws MathArithmeticException if the resulting numerator or denominator exceeds\n     *  {@code Integer.MAX_VALUE}\n     */\n    public Fraction divide(Fraction fraction) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Divide the fraction by an integer.\n     * @param i the <tt>integer</tt> to divide by.\n     * @return this * i\n     */\n    public Fraction divide(final int i) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>\n     * Gets the fraction percentage as a <tt>double</tt>. This calculates the\n     * fraction as the numerator divided by denominator multiplied by 100.\n     * </p>\n     *\n     * @return the fraction percentage as a <tt>double</tt>.\n     */\n    public double percentageValue() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>Creates a {@code Fraction} instance with the 2 parts\n     * of a fraction Y/Z.</p>\n     *\n     * <p>Any negative signs are resolved to be on the numerator.</p>\n     *\n     * @param numerator  the numerator, for example the three in 'three sevenths'\n     * @param denominator  the denominator, for example the seven in 'three sevenths'\n     * @return a new fraction instance, with the numerator and denominator reduced\n     * @throws MathArithmeticException if the denominator is {@code zero}\n     */\n    public static Fraction getReducedFraction(int numerator, int denominator) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>\n     * Returns the {@code String} representing this fraction, ie\n     * \"num / dem\" or just \"num\" if the denominator is one.\n     * </p>\n     *\n     * @return a string representation of the fraction.\n     * @see java.lang.Object#toString()\n     */\n    @Override\n    public String toString() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /** {@inheritDoc} */\n    public FractionField getField() {\n         //The specific code has been omitted, but there is no error\n        }\n\n}"}