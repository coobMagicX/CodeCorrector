{"FastDateFormat": "public class FastDateFormat extends Format {\n    // A lot of the speed in this class comes from caching, but some comes\n    // from the special int to StringBuffer conversion.\n    //\n    // The following produces a padded 2 digit number:\n    //   buffer.append((char)(value / 10 + '0'));\n    //   buffer.append((char)(value % 10 + '0'));\n    //\n    // Note that the fastest append to StringBuffer is a single char (used here).\n    // Note that Integer.toString() is not called, the conversion is simply\n    // taking the value and adding (mathematically) the ASCII value for '0'.\n    // So, don't change this code! It works and is very fast.\n\n    /**\n     * Required for serialization support.\n     *\n     * @see java.io.Serializable\n     */\n    private static final long serialVersionUID = 1L;\n\n    /**\n     * FULL locale dependent date or time style.\n     */\n    public static final int FULL = DateFormat.FULL;\n    /**\n     * LONG locale dependent date or time style.\n     */\n    public static final int LONG = DateFormat.LONG;\n    /**\n     * MEDIUM locale dependent date or time style.\n     */\n    public static final int MEDIUM = DateFormat.MEDIUM;\n    /**\n     * SHORT locale dependent date or time style.\n     */\n    public static final int SHORT = DateFormat.SHORT;\n\n    private static final FormatCache<FastDateFormat> cache= new FormatCache<FastDateFormat>() {\n        @Override\n        protected FastDateFormat createInstance(String pattern,    TimeZone timeZone, Locale locale) {\n         //The specific code has been omitted, but there is no error\n        }\n    };\n\n    private static ConcurrentMap<TimeZoneDisplayKey, String> cTimeZoneDisplayCache =\n        new ConcurrentHashMap<TimeZoneDisplayKey, String>(7);\n\n    /**\n     * The pattern.\n     */\n    private final String mPattern;\n    /**\n     * The time zone.\n     */\n    private final TimeZone mTimeZone;\n    /**\n     * The locale.\n     */\n    private final Locale mLocale;\n    /**\n     * The parsed rules.\n     */\n    private transient Rule[] mRules;\n    /**\n     * The estimated maximum length.\n     */\n    private transient int mMaxLengthEstimate;\n\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Gets a formatter instance using the default pattern in the\n     * default locale.</p>\n     *\n     * @return a date/time formatter\n     */\n    public static FastDateFormat getInstance() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>Gets a formatter instance using the specified pattern in the\n     * default locale.</p>\n     *\n     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n     *  pattern\n     * @return a pattern based date/time formatter\n     * @throws IllegalArgumentException if pattern is invalid\n     */\n    public static FastDateFormat getInstance(String pattern) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>Gets a formatter instance using the specified pattern and\n     * time zone.</p>\n     *\n     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n     *  pattern\n     * @param timeZone  optional time zone, overrides time zone of\n     *  formatted date\n     * @return a pattern based date/time formatter\n     * @throws IllegalArgumentException if pattern is invalid\n     */\n    public static FastDateFormat getInstance(String pattern, TimeZone timeZone) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>Gets a formatter instance using the specified pattern and\n     * locale.</p>\n     *\n     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n     *  pattern\n     * @param locale  optional locale, overrides system locale\n     * @return a pattern based date/time formatter\n     * @throws IllegalArgumentException if pattern is invalid\n     */\n    public static FastDateFormat getInstance(String pattern, Locale locale) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>Gets a formatter instance using the specified pattern, time zone\n     * and locale.</p>\n     *\n     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n     *  pattern\n     * @param timeZone  optional time zone, overrides time zone of\n     *  formatted date\n     * @param locale  optional locale, overrides system locale\n     * @return a pattern based date/time formatter\n     * @throws IllegalArgumentException if pattern is invalid\n     *  or {@code null}\n     */\n    public static FastDateFormat getInstance(String pattern, TimeZone timeZone, Locale locale) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Gets a date formatter instance using the specified style in the\n     * default time zone and locale.</p>\n     *\n     * @param style  date style: FULL, LONG, MEDIUM, or SHORT\n     * @return a localized standard date formatter\n     * @throws IllegalArgumentException if the Locale has no date\n     *  pattern defined\n     * @since 2.1\n     */\n    public static FastDateFormat getDateInstance(int style) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>Gets a date formatter instance using the specified style and\n     * locale in the default time zone.</p>\n     *\n     * @param style  date style: FULL, LONG, MEDIUM, or SHORT\n     * @param locale  optional locale, overrides system locale\n     * @return a localized standard date formatter\n     * @throws IllegalArgumentException if the Locale has no date\n     *  pattern defined\n     * @since 2.1\n     */\n    public static FastDateFormat getDateInstance(int style, Locale locale) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>Gets a date formatter instance using the specified style and\n     * time zone in the default locale.</p>\n     *\n     * @param style  date style: FULL, LONG, MEDIUM, or SHORT\n     * @param timeZone  optional time zone, overrides time zone of\n     *  formatted date\n     * @return a localized standard date formatter\n     * @throws IllegalArgumentException if the Locale has no date\n     *  pattern defined\n     * @since 2.1\n     */\n    public static FastDateFormat getDateInstance(int style, TimeZone timeZone) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * <p>Gets a date formatter instance using the specified style, time\n     * zone and locale.</p>\n     *\n     * @param style  date style: FULL, LONG, MEDIUM, or SHORT\n     * @param timeZone  optional time zone, overrides time zone of\n     *  formatted date\n     * @param locale  optional locale, overrides system locale\n     * @return a localized standard date formatter\n     * @throws IllegalArgumentException if the Locale has no date\n     *  pattern defined\n     */\n    public static FastDateFormat getDateInstance(int style, TimeZone timeZone, Locale locale) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Gets a time formatter instance using the specified style in the\n     * default time zone and locale.</p>\n     *\n     * @param style  time style: FULL, LONG, MEDIUM, or SHORT\n     * @return a localized standard time formatter\n     * @throws IllegalArgumentException if the Locale has no time\n     *  pattern defined\n     * @since 2.1\n     */\n    public static FastDateFormat getTimeInstance(int style) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>Gets a time formatter instance using the specified style and\n     * locale in the default time zone.</p>\n     *\n     * @param style  time style: FULL, LONG, MEDIUM, or SHORT\n     * @param locale  optional locale, overrides system locale\n     * @return a localized standard time formatter\n     * @throws IllegalArgumentException if the Locale has no time\n     *  pattern defined\n     * @since 2.1\n     */\n    public static FastDateFormat getTimeInstance(int style, Locale locale) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>Gets a time formatter instance using the specified style and\n     * time zone in the default locale.</p>\n     *\n     * @param style  time style: FULL, LONG, MEDIUM, or SHORT\n     * @param timeZone  optional time zone, overrides time zone of\n     *  formatted time\n     * @return a localized standard time formatter\n     * @throws IllegalArgumentException if the Locale has no time\n     *  pattern defined\n     * @since 2.1\n     */\n    public static FastDateFormat getTimeInstance(int style, TimeZone timeZone) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>Gets a time formatter instance using the specified style, time\n     * zone and locale.</p>\n     *\n     * @param style  time style: FULL, LONG, MEDIUM, or SHORT\n     * @param timeZone  optional time zone, overrides time zone of\n     *  formatted time\n     * @param locale  optional locale, overrides system locale\n     * @return a localized standard time formatter\n     * @throws IllegalArgumentException if the Locale has no time\n     *  pattern defined\n     */\n    public static FastDateFormat getTimeInstance(int style, TimeZone timeZone, Locale locale) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Gets a date/time formatter instance using the specified style\n     * in the default time zone and locale.</p>\n     *\n     * @param dateStyle  date style: FULL, LONG, MEDIUM, or SHORT\n     * @param timeStyle  time style: FULL, LONG, MEDIUM, or SHORT\n     * @return a localized standard date/time formatter\n     * @throws IllegalArgumentException if the Locale has no date/time\n     *  pattern defined\n     * @since 2.1\n     */\n    public static FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>Gets a date/time formatter instance using the specified style and\n     * locale in the default time zone.</p>\n     *\n     * @param dateStyle  date style: FULL, LONG, MEDIUM, or SHORT\n     * @param timeStyle  time style: FULL, LONG, MEDIUM, or SHORT\n     * @param locale  optional locale, overrides system locale\n     * @return a localized standard date/time formatter\n     * @throws IllegalArgumentException if the Locale has no date/time\n     *  pattern defined\n     * @since 2.1\n     */\n    public static FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, Locale locale) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>Gets a date/time formatter instance using the specified style and\n     * time zone in the default locale.</p>\n     *\n     * @param dateStyle  date style: FULL, LONG, MEDIUM, or SHORT\n     * @param timeStyle  time style: FULL, LONG, MEDIUM, or SHORT\n     * @param timeZone  optional time zone, overrides time zone of\n     *  formatted date\n     * @return a localized standard date/time formatter\n     * @throws IllegalArgumentException if the Locale has no date/time\n     *  pattern defined\n     * @since 2.1\n     */\n    public static FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone) {\n         //The specific code has been omitted, but there is no error\n        }\n    /**\n     * <p>Gets a date/time formatter instance using the specified style,\n     * time zone and locale.</p>\n     *\n     * @param dateStyle  date style: FULL, LONG, MEDIUM, or SHORT\n     * @param timeStyle  time style: FULL, LONG, MEDIUM, or SHORT\n     * @param timeZone  optional time zone, overrides time zone of\n     *  formatted date\n     * @param locale  optional locale, overrides system locale\n     * @return a localized standard date/time formatter\n     * @throws IllegalArgumentException if the Locale has no date/time\n     *  pattern defined\n     */\n    public static FastDateFormat getDateTimeInstance(\n            int dateStyle, int timeStyle, TimeZone timeZone, Locale locale) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Gets the time zone display name, using a cache for performance.</p>\n     *\n     * @param tz  the zone to query\n     * @param daylight  true if daylight savings\n     * @param style  the style to use {@code TimeZone.LONG} or {@code TimeZone.SHORT}\n     * @param locale  the locale to use\n     * @return the textual name of the time zone\n     */\n    static String getTimeZoneDisplay(TimeZone tz, boolean daylight, int style, Locale locale) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    // Constructor\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Constructs a new FastDateFormat.</p>\n     *\n     * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern\n     * @param timeZone  non-null time zone to use\n     * @param locale  non-null locale to use\n     * @throws NullPointerException if pattern, timeZone, or locale is null.\n     */\n    protected FastDateFormat(String pattern, TimeZone timeZone, Locale locale) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>Initializes the instance for first use.</p>\n     */\n    private void init() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    // Parse the pattern\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Returns a list of Rules given a pattern.</p>\n     *\n     * @return a {@code List} of Rule objects\n     * @throws IllegalArgumentException if pattern is invalid\n     */\n    protected List<Rule> parsePattern() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>Performs the parsing of tokens.</p>\n     *\n     * @param pattern  the pattern\n     * @param indexRef  index references\n     * @return parsed token\n     */\n    protected String parseToken(String pattern, int[] indexRef) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>Gets an appropriate rule for the padding required.</p>\n     *\n     * @param field  the field to get a rule for\n     * @param padding  the padding required\n     * @return a new rule with the correct padding\n     */\n    protected NumberRule selectNumberRule(int field, int padding) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    // Format methods\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Formats a {@code Date}, {@code Calendar} or\n     * {@code Long} (milliseconds) object.</p>\n     *\n     * @param obj  the object to format\n     * @param toAppendTo  the buffer to append to\n     * @param pos  the position - ignored\n     * @return the buffer passed in\n     */\n    @Override\n    public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>Formats a millisecond {@code long} value.</p>\n     *\n     * @param millis  the millisecond value to format\n     * @return the formatted string\n     * @since 2.1\n     */\n    public String format(long millis) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>Formats a {@code Date} object using a {@code GregorianCalendar}.</p>\n     *\n     * @param date  the date to format\n     * @return the formatted string\n     */\n    public String format(Date date) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>Formats a {@code Calendar} object.</p>\n     *\n     * @param calendar  the calendar to format\n     * @return the formatted string\n     */\n    public String format(Calendar calendar) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>Formats a milliseond {@code long} value into the\n     * supplied {@code StringBuffer}.</p>\n     *\n     * @param millis  the millisecond value to format\n     * @param buf  the buffer to format into\n     * @return the specified string buffer\n     * @since 2.1\n     */\n    public StringBuffer format(long millis, StringBuffer buf) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>Formats a {@code Date} object into the\n     * supplied {@code StringBuffer} using a {@code GregorianCalendar}.</p>\n     *\n     * @param date  the date to format\n     * @param buf  the buffer to format into\n     * @return the specified string buffer\n     */\n    public StringBuffer format(Date date, StringBuffer buf) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>Formats a {@code Calendar} object into the\n     * supplied {@code StringBuffer}.</p>\n     *\n     * @param calendar  the calendar to format\n     * @param buf  the buffer to format into\n     * @return the specified string buffer\n     */\n    public StringBuffer format(Calendar calendar, StringBuffer buf) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>Performs the formatting by applying the rules to the\n     * specified calendar.</p>\n     *\n     * @param calendar  the calendar to format\n     * @param buf  the buffer to format into\n     * @return the specified string buffer\n     */\n    protected StringBuffer applyRules(Calendar calendar, StringBuffer buf) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    // Parsing\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Parsing is not supported.</p>\n     *\n     * @param source  the string to parse\n     * @param pos  the parsing position\n     * @return {@code null} as not supported\n     */\n    @Override\n    public Object parseObject(String source, ParsePosition pos) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    // Accessors\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Gets the pattern used by this formatter.</p>\n     *\n     * @return the pattern, {@link java.text.SimpleDateFormat} compatible\n     */\n    public String getPattern() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>Gets the time zone used by this formatter.</p>\n     *\n     * <p>This zone is always used for {@code Date} formatting. </p>\n     *\n     * @return the time zone\n     */\n    public TimeZone getTimeZone() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>Gets the locale used by this formatter.</p>\n     *\n     * @return the locale\n     */\n    public Locale getLocale() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>Gets an estimate for the maximum string length that the\n     * formatter will produce.</p>\n     *\n     * <p>The actual formatted length will almost always be less than or\n     * equal to this amount.</p>\n     *\n     * @return the maximum formatted length\n     */\n    public int getMaxLengthEstimate() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    // Basics\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Compares two objects for equality.</p>\n     *\n     * @param obj  the object to compare to\n     * @return {@code true} if equal\n     */\n    @Override\n    public boolean equals(Object obj) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>Returns a hashcode compatible with equals.</p>\n     *\n     * @return a hashcode compatible with equals\n     */\n    @Override\n    public int hashCode() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>Gets a debugging string version of this formatter.</p>\n     *\n     * @return a debugging string\n     */\n    @Override\n    public String toString() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    // Serializing\n    //-----------------------------------------------------------------------\n    /**\n     * Create the object after serialization. This implementation reinitializes the\n     * transient properties.\n     *\n     * @param in ObjectInputStream from which the object is being deserialized.\n     * @throws IOException if there is an IO issue.\n     * @throws ClassNotFoundException if a class cannot be found.\n     */\n    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n        in.defaultReadObject();\n        init();\n    }\n\n    // Rules\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Inner class defining a rule.</p>\n     */\n    private interface Rule {\n        /**\n         * Returns the estimated lentgh of the result.\n         *\n         * @return the estimated length\n         */\n        int estimateLength();\n\n        /**\n         * Appends the value of the specified calendar to the output buffer based on the rule implementation.\n         *\n         * @param buffer the output buffer\n         * @param calendar calendar to be appended\n         */\n        void appendTo(StringBuffer buffer, Calendar calendar);\n    }\n\n    /**\n     * <p>Inner class defining a numeric rule.</p>\n     */\n    private interface NumberRule extends Rule {\n        /**\n         * Appends the specified value to the output buffer based on the rule implementation.\n         *\n         * @param buffer the output buffer\n         * @param value the value to be appended\n         */\n        void appendTo(StringBuffer buffer, int value);\n    }\n\n    /**\n     * <p>Inner class to output a constant single character.</p>\n     */\n    private static class CharacterLiteral implements Rule {\n        private final char mValue;\n\n        /**\n         * Constructs a new instance of {@code CharacterLiteral}\n         * to hold the specified value.\n         *\n         * @param value the character literal\n         */\n        CharacterLiteral(char value) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public int estimateLength() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public void appendTo(StringBuffer buffer, Calendar calendar) {\n         //The specific code has been omitted, but there is no error\n        }\n    }\n\n    /**\n     * <p>Inner class to output a constant string.</p>\n     */\n    private static class StringLiteral implements Rule {\n        private final String mValue;\n\n        /**\n         * Constructs a new instance of {@code StringLiteral}\n         * to hold the specified value.\n         *\n         * @param value the string literal\n         */\n        StringLiteral(String value) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public int estimateLength() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public void appendTo(StringBuffer buffer, Calendar calendar) {\n         //The specific code has been omitted, but there is no error\n        }\n    }\n\n    /**\n     * <p>Inner class to output one of a set of values.</p>\n     */\n    private static class TextField implements Rule {\n        private final int mField;\n        private final String[] mValues;\n\n        /**\n         * Constructs an instance of {@code TextField}\n         * with the specified field and values.\n         *\n         * @param field the field\n         * @param values the field values\n         */\n        TextField(int field, String[] values) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public int estimateLength() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public void appendTo(StringBuffer buffer, Calendar calendar) {\n         //The specific code has been omitted, but there is no error\n        }\n    }\n\n    /**\n     * <p>Inner class to output an unpadded number.</p>\n     */\n    private static class UnpaddedNumberField implements NumberRule {\n        private final int mField;\n\n        /**\n         * Constructs an instance of {@code UnpadedNumberField} with the specified field.\n         *\n         * @param field the field\n         */\n        UnpaddedNumberField(int field) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public int estimateLength() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public void appendTo(StringBuffer buffer, Calendar calendar) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public final void appendTo(StringBuffer buffer, int value) {\n         //The specific code has been omitted, but there is no error\n        }\n    }\n\n    /**\n     * <p>Inner class to output an unpadded month.</p>\n     */\n    private static class UnpaddedMonthField implements NumberRule {\n        static final UnpaddedMonthField INSTANCE = new UnpaddedMonthField();\n\n        /**\n         * Constructs an instance of {@code UnpaddedMonthField}.\n         *\n         */\n        UnpaddedMonthField() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public int estimateLength() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public void appendTo(StringBuffer buffer, Calendar calendar) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public final void appendTo(StringBuffer buffer, int value) {\n         //The specific code has been omitted, but there is no error\n        }\n    }\n\n    /**\n     * <p>Inner class to output a padded number.</p>\n     */\n    private static class PaddedNumberField implements NumberRule {\n        private final int mField;\n        private final int mSize;\n\n        /**\n         * Constructs an instance of {@code PaddedNumberField}.\n         *\n         * @param field the field\n         * @param size size of the output field\n         */\n        PaddedNumberField(int field, int size) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public int estimateLength() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public void appendTo(StringBuffer buffer, Calendar calendar) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public final void appendTo(StringBuffer buffer, int value) {\n         //The specific code has been omitted, but there is no error\n        }\n    }\n\n    /**\n     * <p>Inner class to output a two digit number.</p>\n     */\n    private static class TwoDigitNumberField implements NumberRule {\n        private final int mField;\n\n        /**\n         * Constructs an instance of {@code TwoDigitNumberField} with the specified field.\n         *\n         * @param field the field\n         */\n        TwoDigitNumberField(int field) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public int estimateLength() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public void appendTo(StringBuffer buffer, Calendar calendar) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public final void appendTo(StringBuffer buffer, int value) {\n         //The specific code has been omitted, but there is no error\n        }\n    }\n\n    /**\n     * <p>Inner class to output a two digit year.</p>\n     */\n    private static class TwoDigitYearField implements NumberRule {\n        static final TwoDigitYearField INSTANCE = new TwoDigitYearField();\n\n        /**\n         * Constructs an instance of {@code TwoDigitYearField}.\n         */\n        TwoDigitYearField() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public int estimateLength() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public void appendTo(StringBuffer buffer, Calendar calendar) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public final void appendTo(StringBuffer buffer, int value) {\n         //The specific code has been omitted, but there is no error\n        }\n    }\n\n    /**\n     * <p>Inner class to output a two digit month.</p>\n     */\n    private static class TwoDigitMonthField implements NumberRule {\n        static final TwoDigitMonthField INSTANCE = new TwoDigitMonthField();\n\n        /**\n         * Constructs an instance of {@code TwoDigitMonthField}.\n         */\n        TwoDigitMonthField() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public int estimateLength() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public void appendTo(StringBuffer buffer, Calendar calendar) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public final void appendTo(StringBuffer buffer, int value) {\n         //The specific code has been omitted, but there is no error\n        }\n    }\n\n    /**\n     * <p>Inner class to output the twelve hour field.</p>\n     */\n    private static class TwelveHourField implements NumberRule {\n        private final NumberRule mRule;\n\n        /**\n         * Constructs an instance of {@code TwelveHourField} with the specified\n         * {@code NumberRule}.\n         *\n         * @param rule the rule\n         */\n        TwelveHourField(NumberRule rule) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public int estimateLength() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public void appendTo(StringBuffer buffer, Calendar calendar) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public void appendTo(StringBuffer buffer, int value) {\n         //The specific code has been omitted, but there is no error\n        }\n    }\n\n    /**\n     * <p>Inner class to output the twenty four hour field.</p>\n     */\n    private static class TwentyFourHourField implements NumberRule {\n        private final NumberRule mRule;\n\n        /**\n         * Constructs an instance of {@code TwentyFourHourField} with the specified\n         * {@code NumberRule}.\n         *\n         * @param rule the rule\n         */\n        TwentyFourHourField(NumberRule rule) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public int estimateLength() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public void appendTo(StringBuffer buffer, Calendar calendar) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public void appendTo(StringBuffer buffer, int value) {\n         //The specific code has been omitted, but there is no error\n        }\n    }\n\n    /**\n     * <p>Inner class to output a time zone name.</p>\n     */\n    private static class TimeZoneNameRule implements Rule {\n        private final TimeZone mTimeZone;\n        private final String mStandard;\n        private final String mDaylight;\n\n        /**\n         * Constructs an instance of {@code TimeZoneNameRule} with the specified properties.\n         *\n         * @param timeZone the time zone\n         * @param locale the locale\n         * @param style the style\n         */\n        TimeZoneNameRule(TimeZone timeZone, Locale locale, int style) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public int estimateLength() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public void appendTo(StringBuffer buffer, Calendar calendar) {\n         //The specific code has been omitted, but there is no error\n        }\n    }\n\n    /**\n     * <p>Inner class to output a time zone as a number {@code +/-HHMM}\n     * or {@code +/-HH:MM}.</p>\n     */\n    private static class TimeZoneNumberRule implements Rule {\n        static final TimeZoneNumberRule INSTANCE_COLON = new TimeZoneNumberRule(true);\n        static final TimeZoneNumberRule INSTANCE_NO_COLON = new TimeZoneNumberRule(false);\n\n        final boolean mColon;\n\n        /**\n         * Constructs an instance of {@code TimeZoneNumberRule} with the specified properties.\n         *\n         * @param colon add colon between HH and MM in the output if {@code true}\n         */\n        TimeZoneNumberRule(boolean colon) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public int estimateLength() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public void appendTo(StringBuffer buffer, Calendar calendar) {\n         //The specific code has been omitted, but there is no error\n        }\n    }\n\n    // ----------------------------------------------------------------------\n    /**\n     * <p>Inner class that acts as a compound key for time zone names.</p>\n     */\n    private static class TimeZoneDisplayKey {\n         //The specific code has been omitted, but there is no error\n        }\n}", "CharacterLiteral": "    private static class CharacterLiteral implements Rule {\n        private final char mValue;\n\n        /**\n         * Constructs a new instance of {@code CharacterLiteral}\n         * to hold the specified value.\n         *\n         * @param value the character literal\n         */\n        CharacterLiteral(char value) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public int estimateLength() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public void appendTo(StringBuffer buffer, Calendar calendar) {\n         //The specific code has been omitted, but there is no error\n        }\n    }", "StringLiteral": "    private static class StringLiteral implements Rule {\n        private final String mValue;\n\n        /**\n         * Constructs a new instance of {@code StringLiteral}\n         * to hold the specified value.\n         *\n         * @param value the string literal\n         */\n        StringLiteral(String value) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public int estimateLength() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public void appendTo(StringBuffer buffer, Calendar calendar) {\n         //The specific code has been omitted, but there is no error\n        }\n    }", "TextField": "    private static class TextField implements Rule {\n        private final int mField;\n        private final String[] mValues;\n\n        /**\n         * Constructs an instance of {@code TextField}\n         * with the specified field and values.\n         *\n         * @param field the field\n         * @param values the field values\n         */\n        TextField(int field, String[] values) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public int estimateLength() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public void appendTo(StringBuffer buffer, Calendar calendar) {\n         //The specific code has been omitted, but there is no error\n        }\n    }", "UnpaddedNumberField": "    private static class UnpaddedNumberField implements NumberRule {\n        private final int mField;\n\n        /**\n         * Constructs an instance of {@code UnpadedNumberField} with the specified field.\n         *\n         * @param field the field\n         */\n        UnpaddedNumberField(int field) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public int estimateLength() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public void appendTo(StringBuffer buffer, Calendar calendar) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public final void appendTo(StringBuffer buffer, int value) {\n         //The specific code has been omitted, but there is no error\n        }\n    }", "UnpaddedMonthField": "    private static class UnpaddedMonthField implements NumberRule {\n        static final UnpaddedMonthField INSTANCE = new UnpaddedMonthField();\n\n        /**\n         * Constructs an instance of {@code UnpaddedMonthField}.\n         *\n         */\n        UnpaddedMonthField() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public int estimateLength() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public void appendTo(StringBuffer buffer, Calendar calendar) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public final void appendTo(StringBuffer buffer, int value) {\n         //The specific code has been omitted, but there is no error\n        }\n    }", "PaddedNumberField": "    private static class PaddedNumberField implements NumberRule {\n        private final int mField;\n        private final int mSize;\n\n        /**\n         * Constructs an instance of {@code PaddedNumberField}.\n         *\n         * @param field the field\n         * @param size size of the output field\n         */\n        PaddedNumberField(int field, int size) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public int estimateLength() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public void appendTo(StringBuffer buffer, Calendar calendar) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public final void appendTo(StringBuffer buffer, int value) {\n         //The specific code has been omitted, but there is no error\n        }\n    }", "TwoDigitNumberField": "    private static class TwoDigitNumberField implements NumberRule {\n        private final int mField;\n\n        /**\n         * Constructs an instance of {@code TwoDigitNumberField} with the specified field.\n         *\n         * @param field the field\n         */\n        TwoDigitNumberField(int field) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public int estimateLength() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public void appendTo(StringBuffer buffer, Calendar calendar) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public final void appendTo(StringBuffer buffer, int value) {\n         //The specific code has been omitted, but there is no error\n        }\n    }", "TwoDigitYearField": "    private static class TwoDigitYearField implements NumberRule {\n        static final TwoDigitYearField INSTANCE = new TwoDigitYearField();\n\n        /**\n         * Constructs an instance of {@code TwoDigitYearField}.\n         */\n        TwoDigitYearField() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public int estimateLength() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public void appendTo(StringBuffer buffer, Calendar calendar) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public final void appendTo(StringBuffer buffer, int value) {\n         //The specific code has been omitted, but there is no error\n        }\n    }", "TwoDigitMonthField": "    private static class TwoDigitMonthField implements NumberRule {\n        static final TwoDigitMonthField INSTANCE = new TwoDigitMonthField();\n\n        /**\n         * Constructs an instance of {@code TwoDigitMonthField}.\n         */\n        TwoDigitMonthField() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public int estimateLength() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public void appendTo(StringBuffer buffer, Calendar calendar) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public final void appendTo(StringBuffer buffer, int value) {\n         //The specific code has been omitted, but there is no error\n        }\n    }", "TwelveHourField": "    private static class TwelveHourField implements NumberRule {\n        private final NumberRule mRule;\n\n        /**\n         * Constructs an instance of {@code TwelveHourField} with the specified\n         * {@code NumberRule}.\n         *\n         * @param rule the rule\n         */\n        TwelveHourField(NumberRule rule) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public int estimateLength() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public void appendTo(StringBuffer buffer, Calendar calendar) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public void appendTo(StringBuffer buffer, int value) {\n         //The specific code has been omitted, but there is no error\n        }\n    }", "TwentyFourHourField": "    private static class TwentyFourHourField implements NumberRule {\n        private final NumberRule mRule;\n\n        /**\n         * Constructs an instance of {@code TwentyFourHourField} with the specified\n         * {@code NumberRule}.\n         *\n         * @param rule the rule\n         */\n        TwentyFourHourField(NumberRule rule) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public int estimateLength() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public void appendTo(StringBuffer buffer, Calendar calendar) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public void appendTo(StringBuffer buffer, int value) {\n         //The specific code has been omitted, but there is no error\n        }\n    }", "TimeZoneNameRule": "    private static class TimeZoneNameRule implements Rule {\n        private final TimeZone mTimeZone;\n        private final String mStandard;\n        private final String mDaylight;\n\n        /**\n         * Constructs an instance of {@code TimeZoneNameRule} with the specified properties.\n         *\n         * @param timeZone the time zone\n         * @param locale the locale\n         * @param style the style\n         */\n        TimeZoneNameRule(TimeZone timeZone, Locale locale, int style) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public int estimateLength() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public void appendTo(StringBuffer buffer, Calendar calendar) {\n         //The specific code has been omitted, but there is no error\n        }\n    }", "TimeZoneNumberRule": "    private static class TimeZoneNumberRule implements Rule {\n        static final TimeZoneNumberRule INSTANCE_COLON = new TimeZoneNumberRule(true);\n        static final TimeZoneNumberRule INSTANCE_NO_COLON = new TimeZoneNumberRule(false);\n\n        final boolean mColon;\n\n        /**\n         * Constructs an instance of {@code TimeZoneNumberRule} with the specified properties.\n         *\n         * @param colon add colon between HH and MM in the output if {@code true}\n         */\n        TimeZoneNumberRule(boolean colon) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public int estimateLength() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        public void appendTo(StringBuffer buffer, Calendar calendar) {\n         //The specific code has been omitted, but there is no error\n        }\n    }", "TimeZoneDisplayKey": "    private static class TimeZoneDisplayKey {\n         //The specific code has been omitted, but there is no error\n        }"}