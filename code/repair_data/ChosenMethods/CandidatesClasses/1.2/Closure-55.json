{"FunctionRewriter": "class FunctionRewriter implements CompilerPass {\n  private final AbstractCompiler compiler;\n  // Safety margin used to avoid growing simple programs by a few bytes.\n  // Selected arbitrarily.\n  private static final int SAVINGS_THRESHOLD = 16;\n\n  FunctionRewriter(AbstractCompiler compiler) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  @Override\n  public void process(Node externs, Node root) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /**\n   * Parse helper code needed by a reducer.\n   *\n   * @return Helper code root.  If parse fails, return null.\n   */\n  public Node parseHelperCode(Reducer reducer) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  private static boolean isReduceableFunctionExpression(Node n) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /**\n   * Information needed to apply a reduction.\n   */\n  private class Reduction {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /**\n   * Gathers a list of reductions to apply later by doing an in-order\n   * AST traversal.  If a suitable reduction is found, stop traversal\n   * in that branch.\n   */\n  private class ReductionGatherer implements Callback {\n    private final List<Reducer> reducers;\n    private final Multimap<Reducer, Reduction> reductions;\n\n    /**\n     * @param reducers List of reducers to apply during traversal.\n     * @param reductions Reducer -> Reduction multimap,\n     *                   populated during traversal.\n     */\n    ReductionGatherer(List<Reducer> reducers,\n                      Multimap<Reducer, Reduction> reductions) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    public boolean shouldTraverse(NodeTraversal raversal,\n                                  Node node,\n                                  Node parent) {\n         //The specific code has been omitted, but there is no error\n        }\n\n\n    @Override\n    public void visit(NodeTraversal traversal, Node node, Node parent) {\n         //The specific code has been omitted, but there is no error\n        }\n  }\n\n  /**\n   * Interface implemented by the strength-reduction optimizers below.\n   */\n  abstract static class Reducer {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /**\n   * Reduces return immutable constant literal methods declarations\n   * with calls to a constant return method factory.\n   *\n   * Example:\n   *   a.prototype.b = function() {\n         //The specific code has been omitted, but there is no error\n        }\n   * is reduced to:\n   *   a.prototype.b = emptyFn();\n   */\n  private static class EmptyFunctionReducer extends Reducer {\n    static final String FACTORY_METHOD_NAME = \"JSCompiler_emptyFn\";\n    static final String HELPER_SOURCE =\n        \"function \" + FACTORY_METHOD_NAME + \"() {\" +\n        \"  return function() {\n         //The specific code has been omitted, but there is no error\n        }\" +\n        \"}\";\n\n    @Override\n    public String getHelperSource() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    public Node reduce(Node node) {\n         //The specific code has been omitted, but there is no error\n        }\n  }\n\n  /**\n   * Base class for reducers that match functions that contain a\n   * single return statement.\n   */\n  abstract static class SingleReturnStatementReducer extends Reducer {\n\n    /**\n     * @return function return value node if function body contains a\n     * single return statement.  Otherwise, null.\n     */\n    protected final Node maybeGetSingleReturnRValue(Node functionNode) {\n         //The specific code has been omitted, but there is no error\n        }\n  }\n\n  /**\n   * Reduces property getter method declarations with calls to a\n   * getter method factory.\n   *\n   * Example:\n   *   a.prototype.b = function(a) {\n         //The specific code has been omitted, but there is no error\n        }\n   * is reduced to:\n   *   a.prototype.b = getter(a);\n   */\n  private static class IdentityReducer extends SingleReturnStatementReducer {\n    static final String FACTORY_METHOD_NAME = \"JSCompiler_identityFn\";\n    static final String HELPER_SOURCE =\n        \"function \" + FACTORY_METHOD_NAME + \"() {\" +\n        \"  return function(\" + FACTORY_METHOD_NAME + \"_value) {\n         //The specific code has been omitted, but there is no error\n        }\" +\n        \"}\";\n\n    @Override\n    public String getHelperSource() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    public Node reduce(Node node) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Checks if the function matches the pattern:\n     *   function(<value>, <rest>) {\n         //The specific code has been omitted, but there is no error\n        }\n     *\n     * @return Whether the function matches the pattern.\n     */\n    private boolean isIdentityFunction(Node functionNode) {\n         //The specific code has been omitted, but there is no error\n        }\n  }\n\n  /**\n   * Reduces return immutable constant literal methods declarations\n   * with calls to a constant return method factory.\n   *\n   * Example:\n   *   a.prototype.b = function() {\n         //The specific code has been omitted, but there is no error\n        }\n   * is reduced to:\n   *   a.prototype.b = returnconst(10);\n   */\n  private static class ReturnConstantReducer\n      extends SingleReturnStatementReducer {\n    static final String FACTORY_METHOD_NAME = \"JSCompiler_returnArg\";\n    static final String HELPER_SOURCE =\n        \"function \" + FACTORY_METHOD_NAME +\n        \"(\" + FACTORY_METHOD_NAME + \"_value) {\" +\n        \"  return function() {\n         //The specific code has been omitted, but there is no error\n        }\" +\n        \"}\";\n\n    @Override\n    public String getHelperSource() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    public Node reduce(Node node) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Checks if the function matches the pattern:\n     *   function(<args>) {\n         //The specific code has been omitted, but there is no error\n        }\n     * and returns <immutable value> if a match is found.\n     *\n     * @return the immutable value node; or null.\n     */\n    private Node getValueNode(Node functionNode) {\n         //The specific code has been omitted, but there is no error\n        }\n  }\n\n  /**\n   * Reduces property getter method declarations with calls to a\n   * getter method factory.\n   *\n   * Example:\n   *   a.prototype.b = function() {\n         //The specific code has been omitted, but there is no error\n        }\n   * is reduced to:\n   *   a.prototype.b = getter(\"b_\");\n   */\n  private static class GetterReducer extends SingleReturnStatementReducer {\n    static final String FACTORY_METHOD_NAME = \"JSCompiler_get\";\n    static final String HELPER_SOURCE =\n        \"function \" + FACTORY_METHOD_NAME + \"(\" +\n        FACTORY_METHOD_NAME + \"_name) {\" +\n        \"  return function() {\n         //The specific code has been omitted, but there is no error\n        }\" +\n        \"}\";\n\n    @Override\n    public String getHelperSource() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    public Node reduce(Node node) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Checks if the function matches the pattern:\n     *   function(<args>) {\n         //The specific code has been omitted, but there is no error\n        }\n     * and returns <name> if a match is found.\n     *\n     * @return STRING node that is the rhs of a this property get; or null.\n     */\n    private Node getGetPropertyName(Node functionNode) {\n         //The specific code has been omitted, but there is no error\n        }\n  }\n\n  /**\n   * Reduces property setter method declarations with calls to a\n   * setter method factory.\n   *\n   * Example:\n   *   a.prototype.setB = function(value) {\n         //The specific code has been omitted, but there is no error\n        }\n   * reduces to:\n   *   a.prototype.setB = getter(\"b_\");\n   */\n  private static class SetterReducer extends Reducer {\n    static final String FACTORY_METHOD_NAME = \"JSCompiler_set\";\n    static final String HELPER_SOURCE =\n        \"function \" + FACTORY_METHOD_NAME + \"(\" +\n        FACTORY_METHOD_NAME + \"_name) {\" +\n        \"  return function(\" + FACTORY_METHOD_NAME + \"_value) {\n         //The specific code has been omitted, but there is no error\n        }\" +\n        \"}\";\n\n    @Override\n    public String getHelperSource() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    public Node reduce(Node node) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Checks if the function matches the pattern:\n     *   function(<value>, <rest>) {\n         //The specific code has been omitted, but there is no error\n        }\n     * and returns <name> if a match is found.\n     *\n     * @return STRING node that is the rhs of a this property get; or null.\n     */\n    private Node getSetPropertyName(Node functionNode) {\n         //The specific code has been omitted, but there is no error\n        }\n  }\n}", "Reduction": "  private class Reduction {\n         //The specific code has been omitted, but there is no error\n        }", "ReductionGatherer": "  private class ReductionGatherer implements Callback {\n    private final List<Reducer> reducers;\n    private final Multimap<Reducer, Reduction> reductions;\n\n    /**\n     * @param reducers List of reducers to apply during traversal.\n     * @param reductions Reducer -> Reduction multimap,\n     *                   populated during traversal.\n     */\n    ReductionGatherer(List<Reducer> reducers,\n                      Multimap<Reducer, Reduction> reductions) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    public boolean shouldTraverse(NodeTraversal raversal,\n                                  Node node,\n                                  Node parent) {\n         //The specific code has been omitted, but there is no error\n        }\n\n\n    @Override\n    public void visit(NodeTraversal traversal, Node node, Node parent) {\n         //The specific code has been omitted, but there is no error\n        }\n  }", "Reducer": "  abstract static class Reducer {\n         //The specific code has been omitted, but there is no error\n        }", "EmptyFunctionReducer": "  private static class EmptyFunctionReducer extends Reducer {\n    static final String FACTORY_METHOD_NAME = \"JSCompiler_emptyFn\";\n    static final String HELPER_SOURCE =\n        \"function \" + FACTORY_METHOD_NAME + \"() {\" +\n        \"  return function() {\n         //The specific code has been omitted, but there is no error\n        }\" +\n        \"}\";\n\n    @Override\n    public String getHelperSource() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    public Node reduce(Node node) {\n         //The specific code has been omitted, but there is no error\n        }\n  }", "SingleReturnStatementReducer": "  abstract static class SingleReturnStatementReducer extends Reducer {\n\n    /**\n     * @return function return value node if function body contains a\n     * single return statement.  Otherwise, null.\n     */\n    protected final Node maybeGetSingleReturnRValue(Node functionNode) {\n         //The specific code has been omitted, but there is no error\n        }\n  }", "IdentityReducer": "  private static class IdentityReducer extends SingleReturnStatementReducer {\n    static final String FACTORY_METHOD_NAME = \"JSCompiler_identityFn\";\n    static final String HELPER_SOURCE =\n        \"function \" + FACTORY_METHOD_NAME + \"() {\" +\n        \"  return function(\" + FACTORY_METHOD_NAME + \"_value) {\n         //The specific code has been omitted, but there is no error\n        }\" +\n        \"}\";\n\n    @Override\n    public String getHelperSource() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    public Node reduce(Node node) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Checks if the function matches the pattern:\n     *   function(<value>, <rest>) {\n         //The specific code has been omitted, but there is no error\n        }\n     *\n     * @return Whether the function matches the pattern.\n     */\n    private boolean isIdentityFunction(Node functionNode) {\n         //The specific code has been omitted, but there is no error\n        }\n  }", "ReturnConstantReducer": "  private static class ReturnConstantReducer\n      extends SingleReturnStatementReducer {\n    static final String FACTORY_METHOD_NAME = \"JSCompiler_returnArg\";\n    static final String HELPER_SOURCE =\n        \"function \" + FACTORY_METHOD_NAME +\n        \"(\" + FACTORY_METHOD_NAME + \"_value) {\" +\n        \"  return function() {\n         //The specific code has been omitted, but there is no error\n        }\" +\n        \"}\";\n\n    @Override\n    public String getHelperSource() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    public Node reduce(Node node) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Checks if the function matches the pattern:\n     *   function(<args>) {\n         //The specific code has been omitted, but there is no error\n        }\n     * and returns <immutable value> if a match is found.\n     *\n     * @return the immutable value node; or null.\n     */\n    private Node getValueNode(Node functionNode) {\n         //The specific code has been omitted, but there is no error\n        }\n  }", "GetterReducer": "  private static class GetterReducer extends SingleReturnStatementReducer {\n    static final String FACTORY_METHOD_NAME = \"JSCompiler_get\";\n    static final String HELPER_SOURCE =\n        \"function \" + FACTORY_METHOD_NAME + \"(\" +\n        FACTORY_METHOD_NAME + \"_name) {\" +\n        \"  return function() {\n         //The specific code has been omitted, but there is no error\n        }\" +\n        \"}\";\n\n    @Override\n    public String getHelperSource() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    public Node reduce(Node node) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Checks if the function matches the pattern:\n     *   function(<args>) {\n         //The specific code has been omitted, but there is no error\n        }\n     * and returns <name> if a match is found.\n     *\n     * @return STRING node that is the rhs of a this property get; or null.\n     */\n    private Node getGetPropertyName(Node functionNode) {\n         //The specific code has been omitted, but there is no error\n        }\n  }", "SetterReducer": "  private static class SetterReducer extends Reducer {\n    static final String FACTORY_METHOD_NAME = \"JSCompiler_set\";\n    static final String HELPER_SOURCE =\n        \"function \" + FACTORY_METHOD_NAME + \"(\" +\n        FACTORY_METHOD_NAME + \"_name) {\" +\n        \"  return function(\" + FACTORY_METHOD_NAME + \"_value) {\n         //The specific code has been omitted, but there is no error\n        }\" +\n        \"}\";\n\n    @Override\n    public String getHelperSource() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    public Node reduce(Node node) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Checks if the function matches the pattern:\n     *   function(<value>, <rest>) {\n         //The specific code has been omitted, but there is no error\n        }\n     * and returns <name> if a match is found.\n     *\n     * @return STRING node that is the rhs of a this property get; or null.\n     */\n    private Node getSetPropertyName(Node functionNode) {\n         //The specific code has been omitted, but there is no error\n        }\n  }"}