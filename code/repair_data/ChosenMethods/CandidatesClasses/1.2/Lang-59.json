{"StrBuilder": "public class StrBuilder implements Cloneable {\n\n    /**\n     * The extra capacity for new builders.\n     */\n    static final int CAPACITY = 32;\n\n    /**\n     * Required for serialization support.\n     * \n     * @see java.io.Serializable\n     */\n    private static final long serialVersionUID = 7628716375283629643L;\n\n    /** Internal data storage. */\n    protected char[] buffer;\n    /** Current size of the buffer. */\n    protected int size;\n    /** The new line. */\n    private String newLine;\n    /** The null text. */\n    private String nullText;\n\n    //-----------------------------------------------------------------------\n    /**\n     * Constructor that creates an empty builder initial capacity 32 characters.\n     */\n    public StrBuilder() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Constructor that creates an empty builder the specified initial capacity.\n     *\n     * @param initialCapacity  the initial capacity, zero or less will be converted to 32\n     */\n    public StrBuilder(int initialCapacity) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Constructor that creates a builder from the string, allocating\n     * 32 extra characters for growth.\n     *\n     * @param str  the string to copy, null treated as blank string\n     */\n    public StrBuilder(String str) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the text to be appended when a new line is added.\n     *\n     * @return the new line text, null means use system default\n     */\n    public String getNewLineText() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the text to be appended when a new line is added.\n     *\n     * @param newLine  the new line text, null means use system default\n     * @return this, to enable chaining\n     */\n    public StrBuilder setNewLineText(String newLine) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the text to be appended when null is added.\n     *\n     * @return the null text, null means no append\n     */\n    public String getNullText() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the text to be appended when null is added.\n     *\n     * @param nullText  the null text, null means no append\n     * @return this, to enable chaining\n     */\n    public StrBuilder setNullText(String nullText) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the length of the string builder.\n     *\n     * @return the length\n     */\n    public int length() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Updates the length of the builder by either dropping the last characters\n     * or adding filler of unicode zero.\n     *\n     * @param length  the length to set to, must be zero or positive\n     * @return this, to enable chaining\n     * @throws IndexOutOfBoundsException if the length is negative\n     */\n    public StrBuilder setLength(int length) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the current size of the internal character array buffer.\n     *\n     * @return the capacity\n     */\n    public int capacity() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Checks the capacity and ensures that it is at least the size specified.\n     *\n     * @param capacity  the capacity to ensure\n     * @return this, to enable chaining\n     */\n    public StrBuilder ensureCapacity(int capacity) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Minimizes the capacity to the actual length of the string.\n     *\n     * @return this, to enable chaining\n     */\n    public StrBuilder minimizeCapacity() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the length of the string builder.\n     * <p>\n     * This method is the same as {@link #length()} and is provided to match the\n     * API of Collections.\n     *\n     * @return the length\n     */\n    public int size() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Checks is the string builder is empty (convenience Collections API style method).\n     * <p>\n     * This method is the same as checking {@link #length()} and is provided to match the\n     * API of Collections.\n     *\n     * @return <code>true</code> if the size is <code>0</code>.\n     */\n    public boolean isEmpty() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Clears the string builder (convenience Collections API style method).\n     * <p>\n     * This method does not reduce the size of the internal character buffer.\n     * To do that, call <code>clear()</code> followed by {@link #minimizeCapacity()}.\n     * <p>\n     * This method is the same as {@link #setLength(int)} called with zero\n     * and is provided to match the API of Collections.\n     *\n     * @return this, to enable chaining\n     */\n    public StrBuilder clear() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the character at the specified index.\n     *\n     * @see #setCharAt(int, char)\n     * @see #deleteCharAt(int)\n     * @param index  the index to retrieve, must be valid\n     * @return the character at the index\n     * @throws IndexOutOfBoundsException if the index is invalid\n     */\n    public char charAt(int index) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the character at the specified index.\n     *\n     * @see #charAt(int)\n     * @see #deleteCharAt(int)\n     * @param index  the index to set\n     * @param ch  the new character\n     * @return this, to enable chaining\n     * @throws IndexOutOfBoundsException if the index is invalid\n     */\n    public StrBuilder setCharAt(int index, char ch) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Deletes the character at the specified index.\n     *\n     * @see #charAt(int)\n     * @see #setCharAt(int, char)\n     * @param index  the index to delete\n     * @return this, to enable chaining\n     * @throws IndexOutOfBoundsException if the index is invalid\n     */\n    public StrBuilder deleteCharAt(int index) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Copies the builder's character array into a new character array.\n     * \n     * @return a new array that represents the contents of the builder\n     */\n    public char[] toCharArray() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Copies part of the builder's character array into a new character array.\n     * \n     * @param startIndex  the start index, inclusive, must be valid\n     * @param endIndex  the end index, exclusive, must be valid except that\n     *  if too large it is treated as end of string\n     * @return a new array that holds part of the contents of the builder\n     * @throws IndexOutOfBoundsException if startIndex is invalid,\n     *  or if endIndex is invalid (but endIndex greater than size is valid)\n     */\n    public char[] toCharArray(int startIndex, int endIndex) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Copies the character array into the specified array.\n     * \n     * @param destination  the destination array, null will cause an array to be created\n     * @return the input array, unless that was null or too small\n     */\n    public char[] getChars(char[] destination) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Copies the character array into the specified array.\n     *\n     * @param startIndex  first index to copy, inclusive, must be valid\n     * @param endIndex  last index, exclusive, must be valid\n     * @param destination  the destination array, must not be null or too small\n     * @param destinationIndex  the index to start copying in destination\n     * @throws NullPointerException if the array is null\n     * @throws IndexOutOfBoundsException if any index is invalid\n     */\n    public void getChars(int startIndex, int endIndex, char destination[], int destinationIndex) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Appends the new line string to this string builder.\n     * <p>\n     * The new line string can be altered using {@link #setNewLineText(String)}.\n     * This might be used to force the output to always use Unix line endings\n     * even when on Windows.\n     *\n     * @return this, to enable chaining\n     */\n    public StrBuilder appendNewLine() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Appends the text representing <code>null</code> to this string builder.\n     *\n     * @return this, to enable chaining\n     */\n    public StrBuilder appendNull() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Appends an object to this string builder.\n     * Appending null will call {@link #appendNull()}.\n     *\n     * @param obj  the object to append\n     * @return this, to enable chaining\n     */\n    public StrBuilder append(Object obj) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Appends a string to this string builder.\n     * Appending null will call {@link #appendNull()}.\n     *\n     * @param str  the string to append\n     * @return this, to enable chaining\n     */\n    public StrBuilder append(String str) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Appends part of a string to this string builder.\n     * Appending null will call {@link #appendNull()}.\n     *\n     * @param str  the string to append\n     * @param startIndex  the start index, inclusive, must be valid\n     * @param length  the length to append, must be valid\n     * @return this, to enable chaining\n     */\n    public StrBuilder append(String str, int startIndex, int length) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Appends a string buffer to this string builder.\n     * Appending null will call {@link #appendNull()}.\n     *\n     * @param str  the string buffer to append\n     * @return this, to enable chaining\n     */\n    public StrBuilder append(StringBuffer str) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Appends part of a string buffer to this string builder.\n     * Appending null will call {@link #appendNull()}.\n     *\n     * @param str  the string to append\n     * @param startIndex  the start index, inclusive, must be valid\n     * @param length  the length to append, must be valid\n     * @return this, to enable chaining\n     */\n    public StrBuilder append(StringBuffer str, int startIndex, int length) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Appends another string builder to this string builder.\n     * Appending null will call {@link #appendNull()}.\n     *\n     * @param str  the string builder to append\n     * @return this, to enable chaining\n     */\n    public StrBuilder append(StrBuilder str) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Appends part of a string builder to this string builder.\n     * Appending null will call {@link #appendNull()}.\n     *\n     * @param str  the string to append\n     * @param startIndex  the start index, inclusive, must be valid\n     * @param length  the length to append, must be valid\n     * @return this, to enable chaining\n     */\n    public StrBuilder append(StrBuilder str, int startIndex, int length) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Appends a char array to the string builder.\n     * Appending null will call {@link #appendNull()}.\n     *\n     * @param chars  the char array to append\n     * @return this, to enable chaining\n     */\n    public StrBuilder append(char[] chars) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Appends a char array to the string builder.\n     * Appending null will call {@link #appendNull()}.\n     *\n     * @param chars  the char array to append\n     * @param startIndex  the start index, inclusive, must be valid\n     * @param length  the length to append, must be valid\n     * @return this, to enable chaining\n     */\n    public StrBuilder append(char[] chars, int startIndex, int length) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Appends a boolean value to the string builder.\n     *\n     * @param value  the value to append\n     * @return this, to enable chaining\n     */\n    public StrBuilder append(boolean value) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Appends a char value to the string builder.\n     *\n     * @param ch  the value to append\n     * @return this, to enable chaining\n     */\n    public StrBuilder append(char ch) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Appends an int value to the string builder using <code>String.valueOf</code>.\n     *\n     * @param value  the value to append\n     * @return this, to enable chaining\n     */\n    public StrBuilder append(int value) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Appends a long value to the string builder using <code>String.valueOf</code>.\n     *\n     * @param value  the value to append\n     * @return this, to enable chaining\n     */\n    public StrBuilder append(long value) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Appends a float value to the string builder using <code>String.valueOf</code>.\n     *\n     * @param value  the value to append\n     * @return this, to enable chaining\n     */\n    public StrBuilder append(float value) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Appends a double value to the string builder using <code>String.valueOf</code>.\n     *\n     * @param value  the value to append\n     * @return this, to enable chaining\n     */\n    public StrBuilder append(double value) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Appends an array placing separators between each value, but\n     * not before the first or after the last.\n     * Appending a null array will have no effect.\n     * Each object is appended using {@link #append(Object)}.\n     *\n     * @param array  the array to append\n     * @param separator  the separator to use, null means no separator\n     * @return this, to enable chaining\n     */\n    public StrBuilder appendWithSeparators(Object[] array, String separator) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Appends a collection placing separators between each value, but\n     * not before the first or after the last.\n     * Appending a null collection will have no effect.\n     * Each object is appended using {@link #append(Object)}.\n     *\n     * @param coll  the collection to append\n     * @param separator  the separator to use, null means no separator\n     * @return this, to enable chaining\n     */\n    public StrBuilder appendWithSeparators(Collection coll, String separator) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Appends an iterator placing separators between each value, but\n     * not before the first or after the last.\n     * Appending a null iterator will have no effect.\n     * Each object is appended using {@link #append(Object)}.\n     *\n     * @param it  the iterator to append\n     * @param separator  the separator to use, null means no separator\n     * @return this, to enable chaining\n     */\n    public StrBuilder appendWithSeparators(Iterator it, String separator) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Appends the pad character to the builder the specified number of times.\n     * \n     * @param length  the length to append, negative means no append\n     * @param padChar  the character to append\n     * @return this, to enable chaining\n     */\n    public StrBuilder appendPadding(int length, char padChar) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Appends an object to the builder padding on the left to a fixed width.\n     * The <code>toString</code> of the object is used.\n     * If the object is larger than the length, the left hand side is lost.\n     * If the object is null, the null text value is used.\n     * \n     * @param obj  the object to append, null uses null text\n     * @param width  the fixed field width, zero or negative has no effect\n     * @param padChar  the pad character to use\n     * @return this, to enable chaining\n     */\n    public StrBuilder appendFixedWidthPadLeft(Object obj, int width, char padChar) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Appends an object to the builder padding on the left to a fixed width.\n     * The <code>String.valueOf</code> of the <code>int</code> value is used.\n     * If the formatted value is larger than the length, the left hand side is lost.\n     * \n     * @param value  the value to append\n     * @param width  the fixed field width, zero or negative has no effect\n     * @param padChar  the pad character to use\n     * @return this, to enable chaining\n     */\n    public StrBuilder appendFixedWidthPadLeft(int value, int width, char padChar) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Appends an object to the builder padding on the right to a fixed length.\n     * The <code>toString</code> of the object is used.\n     * If the object is larger than the length, the right hand side is lost.\n     * If the object is null, null text value is used.\n     * \n     * @param obj  the object to append, null uses null text\n     * @param width  the fixed field width, zero or negative has no effect\n     * @param padChar  the pad character to use\n     * @return this, to enable chaining\n     */\n    public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Appends an object to the builder padding on the right to a fixed length.\n     * The <code>String.valueOf</code> of the <code>int</code> value is used.\n     * If the object is larger than the length, the right hand side is lost.\n     * \n     * @param value  the value to append\n     * @param width  the fixed field width, zero or negative has no effect\n     * @param padChar  the pad character to use\n     * @return this, to enable chaining\n     */\n    public StrBuilder appendFixedWidthPadRight(int value, int width, char padChar) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Inserts the string representation of an object into this builder.\n     * Inserting null will use the stored null text value.\n     *\n     * @param index  the index to add at, must be valid\n     * @param obj  the object to insert\n     * @return this, to enable chaining\n     * @throws IndexOutOfBoundsException if the index is invalid\n     */\n    public StrBuilder insert(int index, Object obj) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Inserts the string into this builder.\n     * Inserting null will use the stored null text value.\n     *\n     * @param index  the index to add at, must be valid\n     * @param str  the string to insert\n     * @return this, to enable chaining\n     * @throws IndexOutOfBoundsException if the index is invalid\n     */\n    public StrBuilder insert(int index, String str) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Inserts the character array into this builder.\n     * Inserting null will use the stored null text value.\n     *\n     * @param index  the index to add at, must be valid\n     * @param chars  the char array to insert\n     * @return this, to enable chaining\n     * @throws IndexOutOfBoundsException if the index is invalid\n     */\n    public StrBuilder insert(int index, char chars[]) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Inserts part of the character array into this builder.\n     * Inserting null will use the stored null text value.\n     *\n     * @param index  the index to add at, must be valid\n     * @param chars  the char array to insert\n     * @param offset  the offset into the character array to start at, must be valid\n     * @param length  the length of the character array part to copy, must be positive\n     * @return this, to enable chaining\n     * @throws IndexOutOfBoundsException if any index is invalid\n     */\n    public StrBuilder insert(int index, char chars[], int offset, int length) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Inserts the value into this builder.\n     *\n     * @param index  the index to add at, must be valid\n     * @param value  the value to insert\n     * @return this, to enable chaining\n     * @throws IndexOutOfBoundsException if the index is invalid\n     */\n    public StrBuilder insert(int index, boolean value) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Inserts the value into this builder.\n     *\n     * @param index  the index to add at, must be valid\n     * @param value  the value to insert\n     * @return this, to enable chaining\n     * @throws IndexOutOfBoundsException if the index is invalid\n     */\n    public StrBuilder insert(int index, char value) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Inserts the value into this builder.\n     *\n     * @param index  the index to add at, must be valid\n     * @param value  the value to insert\n     * @return this, to enable chaining\n     * @throws IndexOutOfBoundsException if the index is invalid\n     */\n    public StrBuilder insert(int index, int value) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Inserts the value into this builder.\n     *\n     * @param index  the index to add at, must be valid\n     * @param value  the value to insert\n     * @return this, to enable chaining\n     * @throws IndexOutOfBoundsException if the index is invalid\n     */\n    public StrBuilder insert(int index, long value) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Inserts the value into this builder.\n     *\n     * @param index  the index to add at, must be valid\n     * @param value  the value to insert\n     * @return this, to enable chaining\n     * @throws IndexOutOfBoundsException if the index is invalid\n     */\n    public StrBuilder insert(int index, float value) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Inserts the value into this builder.\n     *\n     * @param index  the index to add at, must be valid\n     * @param value  the value to insert\n     * @return this, to enable chaining\n     * @throws IndexOutOfBoundsException if the index is invalid\n     */\n    public StrBuilder insert(int index, double value) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Internal method to delete a range without validation.\n     *\n     * @param startIndex  the start index, must be valid\n     * @param endIndex  the end index (exclusive), must be valid\n     * @param len  the length, must be valid\n     * @throws IndexOutOfBoundsException if any index is invalid\n     */\n    private void deleteImpl(int startIndex, int endIndex, int len) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Deletes the characters between the two specified indices.\n     *\n     * @param startIndex  the start index, inclusive, must be valid\n     * @param endIndex  the end index, exclusive, must be valid except\n     *  that if too large it is treated as end of string\n     * @return this, to enable chaining\n     * @throws IndexOutOfBoundsException if the index is invalid\n     */\n    public StrBuilder delete(int startIndex, int endIndex) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Deletes the character wherever it occurs in the builder.\n     *\n     * @param ch  the character to delete\n     * @return this, to enable chaining\n     */\n    public StrBuilder deleteAll(char ch) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Deletes the character wherever it occurs in the builder.\n     *\n     * @param ch  the character to delete\n     * @return this, to enable chaining\n     */\n    public StrBuilder deleteFirst(char ch) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Deletes the string wherever it occurs in the builder.\n     *\n     * @param str  the string to delete, null causes no action\n     * @return this, to enable chaining\n     */\n    public StrBuilder deleteAll(String str) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Deletes the string wherever it occurs in the builder.\n     *\n     * @param str  the string to delete, null causes no action\n     * @return this, to enable chaining\n     */\n    public StrBuilder deleteFirst(String str) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Deletes all parts of the builder that the matcher matches.\n     * <p>\n     * Matchers can be used to perform advanced deletion behaviour.\n     * For example you could write a matcher to delete all occurances\n     * where the character 'a' is followed by a number.\n     *\n     * @param matcher  the matcher to use to find the deletion, null causes no action\n     * @return this, to enable chaining\n     */\n    public StrBuilder deleteAll(StrMatcher matcher) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Deletes the first match within the builder using the specified matcher.\n     * <p>\n     * Matchers can be used to perform advanced deletion behaviour.\n     * For example you could write a matcher to delete\n     * where the character 'a' is followed by a number.\n     *\n     * @param matcher  the matcher to use to find the deletion, null causes no action\n     * @return this, to enable chaining\n     */\n    public StrBuilder deleteFirst(StrMatcher matcher) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Internal method to delete a range without validation.\n     *\n     * @param startIndex  the start index, must be valid\n     * @param endIndex  the end index (exclusive), must be valid\n     * @param removeLen  the length to remove (endIndex - startIndex), must be valid\n     * @param insertStr  the string to replace with, null means delete range\n     * @param insertLen  the length of the insert string, must be valid\n     * @throws IndexOutOfBoundsException if any index is invalid\n     */\n    private void replaceImpl(int startIndex, int endIndex, int removeLen, String insertStr, int insertLen) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Replaces a portion of the string builder with another string.\n     * The length of the inserted string does not have to match the removed length.\n     *\n     * @param startIndex  the start index, inclusive, must be valid\n     * @param endIndex  the end index, exclusive, must be valid except\n     *  that if too large it is treated as end of string\n     * @param replaceStr  the string to replace with, null means delete range\n     * @return this, to enable chaining\n     * @throws IndexOutOfBoundsException if the index is invalid\n     */\n    public StrBuilder replace(int startIndex, int endIndex, String replaceStr) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Replaces the search character with the replace character\n     * throughout the builder.\n     *\n     * @param search  the search character\n     * @param replace  the replace character\n     * @return this, to enable chaining\n     */\n    public StrBuilder replaceAll(char search, char replace) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Replaces the first instance of the search character with the\n     * replace character in the builder.\n     *\n     * @param search  the search character\n     * @param replace  the replace character\n     * @return this, to enable chaining\n     */\n    public StrBuilder replaceFirst(char search, char replace) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Replaces the search string with the replace string throughout the builder.\n     *\n     * @param searchStr  the search string, null causes no action to occur\n     * @param replaceStr  the replace string, null is equivalent to an empty string\n     * @return this, to enable chaining\n     */\n    public StrBuilder replaceAll(String searchStr, String replaceStr) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Replaces the first instance of the search string with the replace string.\n     *\n     * @param searchStr  the search string, null causes no action to occur\n     * @param replaceStr  the replace string, null is equivalent to an empty string\n     * @return this, to enable chaining\n     */\n    public StrBuilder replaceFirst(String searchStr, String replaceStr) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Replaces all matches within the builder with the replace string.\n     * <p>\n     * Matchers can be used to perform advanced replace behaviour.\n     * For example you could write a matcher to replace all occurances\n     * where the character 'a' is followed by a number.\n     *\n     * @param matcher  the matcher to use to find the deletion, null causes no action\n     * @param replaceStr  the replace string, null is equivalent to an empty string\n     * @return this, to enable chaining\n     */\n    public StrBuilder replaceAll(StrMatcher matcher, String replaceStr) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Replaces the first match within the builder with the replace string.\n     * <p>\n     * Matchers can be used to perform advanced replace behaviour.\n     * For example you could write a matcher to replace\n     * where the character 'a' is followed by a number.\n     *\n     * @param matcher  the matcher to use to find the deletion, null causes no action\n     * @param replaceStr  the replace string, null is equivalent to an empty string\n     * @return this, to enable chaining\n     */\n    public StrBuilder replaceFirst(StrMatcher matcher, String replaceStr) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    // -----------------------------------------------------------------------\n    /**\n     * Advanced search and replaces within the builder using a matcher.\n     * <p>\n     * Matchers can be used to perform advanced behaviour.\n     * For example you could write a matcher to delete all occurances\n     * where the character 'a' is followed by a number.\n     *\n     * @param matcher  the matcher to use to find the deletion, null causes no action\n     * @param replaceStr  the string to replace the match with, null is a delete\n     * @param startIndex  the start index, inclusive, must be valid\n     * @param endIndex  the end index, exclusive, must be valid except\n     *  that if too large it is treated as end of string\n     * @param replaceCount  the number of times to replace, -1 for replace all\n     * @return this, to enable chaining\n     * @throws IndexOutOfBoundsException if start index is invalid\n     */\n    public StrBuilder replace(\n            StrMatcher matcher, String replaceStr,\n            int startIndex, int endIndex, int replaceCount) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Replaces within the builder using a matcher.\n     * <p>\n     * Matchers can be used to perform advanced behaviour.\n     * For example you could write a matcher to delete all occurances\n     * where the character 'a' is followed by a number.\n     *\n     * @param matcher  the matcher to use to find the deletion, null causes no action\n     * @param replaceStr  the string to replace the match with, null is a delete\n     * @param from  the start index, must be valid\n     * @param to  the end index (exclusive), must be valid\n     * @param replaceCount  the number of times to replace, -1 for replace all\n     * @return this, to enable chaining\n     * @throws IndexOutOfBoundsException if any index is invalid\n     */\n    private StrBuilder replaceImpl(\n            StrMatcher matcher, String replaceStr,\n            int from, int to, int replaceCount) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Reverses the string builder placing each character in the opposite index.\n     * \n     * @return this, to enable chaining\n     */\n    public StrBuilder reverse() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Trims the builder by removing characters less than or equal to a space\n     * from the beginning and end.\n     *\n     * @return this, to enable chaining\n     */\n    public StrBuilder trim() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Checks whether this builder starts with the specified string.\n     * <p>\n     * Note that this method handles null input quietly, unlike String.\n     * \n     * @param str  the string to search for, null returns false\n     * @return true if the builder starts with the string\n     */\n    public boolean startsWith(String str) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Checks whether this builder ends with the specified string.\n     * <p>\n     * Note that this method handles null input quietly, unlike String.\n     * \n     * @param str  the string to search for, null returns false\n     * @return true if the builder ends with the string\n     */\n    public boolean endsWith(String str) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Extracts a portion of this string builder as a string.\n     * \n     * @param start  the start index, inclusive, must be valid\n     * @return the new string\n     * @throws IndexOutOfBoundsException if the index is invalid\n     */\n    public String substring(int start) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Extracts a portion of this string builder as a string.\n     * <p>\n     * Note: This method treats an endIndex greater than the length of the\n     * builder as equal to the length of the builder, and continues\n     * without error, unlike StringBuffer or String.\n     * \n     * @param startIndex  the start index, inclusive, must be valid\n     * @param endIndex  the end index, exclusive, must be valid except\n     *  that if too large it is treated as end of string\n     * @return the new string\n     * @throws IndexOutOfBoundsException if the index is invalid\n     */\n    public String substring(int startIndex, int endIndex) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Extracts the leftmost characters from the string builder without\n     * throwing an exception.\n     * <p>\n     * This method extracts the left <code>length</code> characters from\n     * the builder. If this many characters are not available, the whole\n     * builder is returned. Thus the returned string may be shorter than the\n     * length requested.\n     * \n     * @param length  the number of characters to extract, negative returns empty string\n     * @return the new string\n     */\n    public String leftString(int length) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Extracts the rightmost characters from the string builder without\n     * throwing an exception.\n     * <p>\n     * This method extracts the right <code>length</code> characters from\n     * the builder. If this many characters are not available, the whole\n     * builder is returned. Thus the returned string may be shorter than the\n     * length requested.\n     * \n     * @param length  the number of characters to extract, negative returns empty string\n     * @return the new string\n     */\n    public String rightString(int length) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Extracts some characters from the middle of the string builder without\n     * throwing an exception.\n     * <p>\n     * This method extracts <code>length</code> characters from the builder\n     * at the specified index.\n     * If the index is negative it is treated as zero.\n     * If the index is greater than the builder size, it is treated as the builder size.\n     * If the length is negative, the empty string is returned.\n     * If insufficient characters are available in the builder, as much as possible is returned.\n     * Thus the returned string may be shorter than the length requested.\n     * \n     * @param index  the index to start at, negative means zero\n     * @param length  the number of characters to extract, negative returns empty string\n     * @return the new string\n     */\n    public String midString(int index, int length) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Checks if the string builder contains the specified char.\n     *\n     * @param ch  the character to find\n     * @return true if the builder contains the character\n     */\n    public boolean contains(char ch) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Checks if the string builder contains the specified string.\n     *\n     * @param str  the string to find\n     * @return true if the builder contains the string\n     */\n    public boolean contains(String str) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Checks if the string builder contains a string matched using the\n     * specified matcher.\n     * <p>\n     * Matchers can be used to perform advanced searching behaviour.\n     * For example you could write a matcher to search for the character\n     * 'a' followed by a number.\n     *\n     * @param matcher  the matcher to use, null returns -1\n     * @return true if the matcher finds a match in the builder\n     */\n    public boolean contains(StrMatcher matcher) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Searches the string builder to find the first reference to the specified char.\n     * \n     * @param ch  the character to find\n     * @return the first index of the character, or -1 if not found\n     */\n    public int indexOf(char ch) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Searches the string builder to find the first reference to the specified char.\n     * \n     * @param ch  the character to find\n     * @param startIndex  the index to start at, invalid index rounded to edge\n     * @return the first index of the character, or -1 if not found\n     */\n    public int indexOf(char ch, int startIndex) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Searches the string builder to find the first reference to the specified string.\n     * <p>\n     * Note that a null input string will return -1, whereas the JDK throws an exception.\n     * \n     * @param str  the string to find, null returns -1\n     * @return the first index of the string, or -1 if not found\n     */\n    public int indexOf(String str) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Searches the string builder to find the first reference to the specified\n     * string starting searching from the given index.\n     * <p>\n     * Note that a null input string will return -1, whereas the JDK throws an exception.\n     * \n     * @param str  the string to find, null returns -1\n     * @param startIndex  the index to start at, invalid index rounded to edge\n     * @return the first index of the string, or -1 if not found\n     */\n    public int indexOf(String str, int startIndex) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Searches the string builder using the matcher to find the first match.\n     * <p>\n     * Matchers can be used to perform advanced searching behaviour.\n     * For example you could write a matcher to find the character 'a'\n     * followed by a number.\n     *\n     * @param matcher  the matcher to use, null returns -1\n     * @return the first index matched, or -1 if not found\n     */\n    public int indexOf(StrMatcher matcher) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Searches the string builder using the matcher to find the first\n     * match searching from the given index.\n     * <p>\n     * Matchers can be used to perform advanced searching behaviour.\n     * For example you could write a matcher to find the character 'a'\n     * followed by a number.\n     *\n     * @param matcher  the matcher to use, null returns -1\n     * @param startIndex  the index to start at, invalid index rounded to edge\n     * @return the first index matched, or -1 if not found\n     */\n    public int indexOf(StrMatcher matcher, int startIndex) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Searches the string builder to find the last reference to the specified char.\n     * \n     * @param ch  the character to find\n     * @return the last index of the character, or -1 if not found\n     */\n    public int lastIndexOf(char ch) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Searches the string builder to find the last reference to the specified char.\n     * \n     * @param ch  the character to find\n     * @param startIndex  the index to start at, invalid index rounded to edge\n     * @return the last index of the character, or -1 if not found\n     */\n    public int lastIndexOf(char ch, int startIndex) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Searches the string builder to find the last reference to the specified string.\n     * <p>\n     * Note that a null input string will return -1, whereas the JDK throws an exception.\n     * \n     * @param str  the string to find, null returns -1\n     * @return the last index of the string, or -1 if not found\n     */\n    public int lastIndexOf(String str) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Searches the string builder to find the last reference to the specified\n     * string starting searching from the given index.\n     * <p>\n     * Note that a null input string will return -1, whereas the JDK throws an exception.\n     * \n     * @param str  the string to find, null returns -1\n     * @param startIndex  the index to start at, invalid index rounded to edge\n     * @return the last index of the string, or -1 if not found\n     */\n    public int lastIndexOf(String str, int startIndex) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Searches the string builder using the matcher to find the last match.\n     * <p>\n     * Matchers can be used to perform advanced searching behaviour.\n     * For example you could write a matcher to find the character 'a'\n     * followed by a number.\n     *\n     * @param matcher  the matcher to use, null returns -1\n     * @return the last index matched, or -1 if not found\n     */\n    public int lastIndexOf(StrMatcher matcher) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Searches the string builder using the matcher to find the last\n     * match searching from the given index.\n     * <p>\n     * Matchers can be used to perform advanced searching behaviour.\n     * For example you could write a matcher to find the character 'a'\n     * followed by a number.\n     *\n     * @param matcher  the matcher to use, null returns -1\n     * @param startIndex  the index to start at, invalid index rounded to edge\n     * @return the last index matched, or -1 if not found\n     */\n    public int lastIndexOf(StrMatcher matcher, int startIndex) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Creates a tokenizer that can tokenize the contents of this builder.\n     * <p>\n     * This method allows the contents of this builder to be tokenized.\n     * The tokenizer will be setup by default to tokenize on space, tab,\n     * newline and formfeed (as per StringTokenizer). These values can be\n     * changed on the tokenizer class, before retrieving the tokens.\n     * <p>\n     * The returned tokenizer is linked to this builder. You may intermix\n     * calls to the buider and tokenizer within certain limits, however\n     * there is no synchronization. Once the tokenizer has been used once,\n     * it must be {@link StrTokenizer#reset() reset} to pickup the latest\n     * changes in the builder. For example:\n     * <pre>\n     * StrBuilder b = new StrBuilder();\n     * b.append(\"a b \");\n     * StrTokenizer t = b.asTokenizer();\n     * String[] tokens1 = t.getTokenArray();  // returns a,b\n     * b.append(\"c d \");\n     * String[] tokens2 = t.getTokenArray();  // returns a,b (c and d ignored)\n     * t.reset();              // reset causes builder changes to be picked up\n     * String[] tokens3 = t.getTokenArray();  // returns a,b,c,d\n     * </pre>\n     * In addition to simply intermixing appends and tokenization, you can also\n     * call the set methods on the tokenizer to alter how it tokenizes. Just\n     * remember to call reset when you want to pickup builder changes.\n     * <p>\n     * Calling {@link StrTokenizer#reset(String)} or {@link StrTokenizer#reset(char[])}\n     * with a non-null value will break the link with the builder.\n     *\n     * @return a tokenizer that is linked to this builder\n     */\n    public StrTokenizer asTokenizer() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the contents of this builder as a Reader.\n     * <p>\n     * This method allows the contents of the builder to be read\n     * using any standard method that expects a Reader.\n     * <p>\n     * To use, simply create a <code>StrBuilder</code>, populate it with\n     * data, call <code>asReader</code>, and then read away.\n     * <p>\n     * The internal character array is shared between the builder and the reader.\n     * This allows you to append to the builder after creating the reader,\n     * and the changes will be picked up.\n     * Note however, that no synchronization occurs, so you must perform\n     * all operations with the builder and the reader in one thread.\n     * <p>\n     * The returned reader supports marking, and ignores the flush method.\n     *\n     * @return a reader that reads from this builder\n     */\n    public Reader asReader() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets this builder as a Writer that can be written to.\n     * <p>\n     * This method allows you to populate the contents of the builder\n     * using any standard method that takes a Writer.\n     * <p>\n     * To use, simply create a <code>StrBuilder</code>,\n     * call <code>asWriter</code>, and populate away. The data is available\n     * at any time using the methods of the <code>StrBuilder</code>.\n     * <p>\n     * The internal character array is shared between the builder and the writer.\n     * This allows you to intermix calls that append to the builder and\n     * write using the writer and the changes will be occur correctly.\n     * Note however, that no synchronization occurs, so you must perform\n     * all operations with the builder and the writer in one thread.\n     * <p>\n     * The returned writer ignores the close and flush methods.\n     *\n     * @return a writer that populates this builder\n     */\n    public Writer asWriter() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n//    /**\n//     * Gets a String version of the string builder by calling the internal\n//     * constructor of String by reflection.\n//     * <p>\n//     * WARNING: You must not use the StrBuilder after calling this method\n//     * as the buffer is now shared with the String object. To ensure this,\n//     * the internal character array is set to null, so you will get\n//     * NullPointerExceptions on all method calls.\n//     *\n//     * @return the builder as a String\n//     */\n//    public String toSharedString() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Checks the contents of this builder against another to see if they\n     * contain the same character content ignoring case.\n     *\n     * @param other  the object to check, null returns false\n     * @return true if the builders contain the same characters in the same order\n     */\n    public boolean equalsIgnoreCase(StrBuilder other) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Checks the contents of this builder against another to see if they\n     * contain the same character content.\n     *\n     * @param other  the object to check, null returns false\n     * @return true if the builders contain the same characters in the same order\n     */\n    public boolean equals(StrBuilder other) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Checks the contents of this builder against another to see if they\n     * contain the same character content.\n     *\n     * @param obj  the object to check, null returns false\n     * @return true if the builders contain the same characters in the same order\n     */\n    public boolean equals(Object obj) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Gets a suitable hash code for this builder.\n     *\n     * @return a hash code\n     */\n    public int hashCode() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets a String version of the string builder, creating a new instance\n     * each time the method is called.\n     * <p>\n     * Note that unlike StringBuffer, the string version returned is\n     * independent of the string builder.\n     *\n     * @return the builder as a String\n     */\n    public String toString() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Gets a StringBuffer version of the string builder, creating a\n     * new instance each time the method is called.\n     *\n     * @return the builder as a StringBuffer\n     */\n    public StringBuffer toStringBuffer() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Validates parameters defining a range of the builder.\n     * \n     * @param startIndex  the start index, inclusive, must be valid\n     * @param endIndex  the end index, exclusive, must be valid except\n     *  that if too large it is treated as end of string\n     * @return the new string\n     * @throws IndexOutOfBoundsException if the index is invalid\n     */\n    protected int validateRange(int startIndex, int endIndex) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Validates parameters defining a single index in the builder.\n     * \n     * @param index  the index, must be valid\n     * @throws IndexOutOfBoundsException if the index is invalid\n     */\n    protected void validateIndex(int index) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Inner class to allow StrBuilder to operate as a tokenizer.\n     */\n    class StrBuilderTokenizer extends StrTokenizer {\n\n        /** {@inheritDoc} */\n        StrBuilderTokenizer() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /** {@inheritDoc} */\n        protected List tokenize(char[] chars, int offset, int count) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /** {@inheritDoc} */\n        public String getContent() {\n         //The specific code has been omitted, but there is no error\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Inner class to allow StrBuilder to operate as a writer.\n     */\n    class StrBuilderReader extends Reader {\n        /** The current stream position. */\n        private int pos;\n        /** The last mark position. */\n        private int mark;\n\n        /** {@inheritDoc} */\n        StrBuilderReader() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /** {@inheritDoc} */\n        public void close() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /** {@inheritDoc} */\n        public int read() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /** {@inheritDoc} */\n        public int read(char b[], int off, int len) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /** {@inheritDoc} */\n        public long skip(long n) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /** {@inheritDoc} */\n        public boolean ready() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /** {@inheritDoc} */\n        public boolean markSupported() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /** {@inheritDoc} */\n        public void mark(int readAheadLimit) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /** {@inheritDoc} */\n        public void reset() {\n         //The specific code has been omitted, but there is no error\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Inner class to allow StrBuilder to operate as a writer.\n     */\n    class StrBuilderWriter extends Writer {\n\n        /** {@inheritDoc} */\n        StrBuilderWriter() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /** {@inheritDoc} */\n        public void close() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /** {@inheritDoc} */\n        public void flush() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /** {@inheritDoc} */\n        public void write(int c) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /** {@inheritDoc} */\n        public void write(char[] cbuf) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /** {@inheritDoc} */\n        public void write(char[] cbuf, int off, int len) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /** {@inheritDoc} */\n        public void write(String str) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /** {@inheritDoc} */\n        public void write(String str, int off, int len) {\n         //The specific code has been omitted, but there is no error\n        }\n    }\n\n}", "StrBuilderTokenizer": "    class StrBuilderTokenizer extends StrTokenizer {\n\n        /** {@inheritDoc} */\n        StrBuilderTokenizer() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /** {@inheritDoc} */\n        protected List tokenize(char[] chars, int offset, int count) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /** {@inheritDoc} */\n        public String getContent() {\n         //The specific code has been omitted, but there is no error\n        }\n    }", "StrBuilderReader": "    class StrBuilderReader extends Reader {\n        /** The current stream position. */\n        private int pos;\n        /** The last mark position. */\n        private int mark;\n\n        /** {@inheritDoc} */\n        StrBuilderReader() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /** {@inheritDoc} */\n        public void close() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /** {@inheritDoc} */\n        public int read() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /** {@inheritDoc} */\n        public int read(char b[], int off, int len) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /** {@inheritDoc} */\n        public long skip(long n) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /** {@inheritDoc} */\n        public boolean ready() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /** {@inheritDoc} */\n        public boolean markSupported() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /** {@inheritDoc} */\n        public void mark(int readAheadLimit) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /** {@inheritDoc} */\n        public void reset() {\n         //The specific code has been omitted, but there is no error\n        }\n    }", "StrBuilderWriter": "    class StrBuilderWriter extends Writer {\n\n        /** {@inheritDoc} */\n        StrBuilderWriter() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /** {@inheritDoc} */\n        public void close() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /** {@inheritDoc} */\n        public void flush() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /** {@inheritDoc} */\n        public void write(int c) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /** {@inheritDoc} */\n        public void write(char[] cbuf) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /** {@inheritDoc} */\n        public void write(char[] cbuf, int off, int len) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /** {@inheritDoc} */\n        public void write(String str) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /** {@inheritDoc} */\n        public void write(String str, int off, int len) {\n         //The specific code has been omitted, but there is no error\n        }\n    }"}