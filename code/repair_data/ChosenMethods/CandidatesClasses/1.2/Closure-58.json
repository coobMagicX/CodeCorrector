{"LiveVariablesAnalysis": "class LiveVariablesAnalysis extends\n    DataFlowAnalysis<Node, LiveVariablesAnalysis.LiveVariableLattice> {\n\n  public static final String ARGUMENT_ARRAY_ALIAS = \"arguments\";\n\n  private static class LiveVariableJoinOp\n      implements JoinOp<LiveVariableLattice> {\n    @Override\n    public LiveVariableLattice apply(List<LiveVariableLattice> in) {\n         //The specific code has been omitted, but there is no error\n        }\n  }\n\n  /**\n   * The lattice that stores the liveness of all local variables at a given\n   * point in the program. The whole lattice is the power set of all local\n   * variables and a variable is live if it is in the set.\n   */\n  static class LiveVariableLattice implements LatticeElement {\n    private final BitSet liveSet;\n\n    /**\n     * @param numVars Number of all local variables.\n     */\n    private LiveVariableLattice(int numVars) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    private LiveVariableLattice(LiveVariableLattice other) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    public boolean equals(Object other) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    public boolean isLive(Var v) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    public boolean isLive(int index) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    public String toString() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    public int hashCode() {\n         //The specific code has been omitted, but there is no error\n        }\n  }\n\n  // The scope of the function that we are analyzing.\n  private final Scope jsScope;\n  private final Set<Var> escaped;\n\n  LiveVariablesAnalysis(ControlFlowGraph<Node> cfg, Scope jsScope,\n      AbstractCompiler compiler) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  public Set<Var> getEscapedLocals() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  public int getVarIndex(String var) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  @Override\n  boolean isForward() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  @Override\n  LiveVariableLattice createEntryLattice() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  @Override\n  LiveVariableLattice createInitialEstimateLattice() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  @Override\n  LiveVariableLattice flowThrough(Node node, LiveVariableLattice input) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /**\n   * Computes the GEN and KILL set.\n   *\n   * @param n Root node.\n   * @param gen Local variables that are live because of the instruction at\n   *        {@code n} will be added to this set.\n   * @param kill Local variables that are killed because of the instruction at\n   *        {@code n} will be added to this set.\n   * @param conditional {@code true} if any assignments encountered are\n   *        conditionally executed. These assignments might not kill a variable.\n   */\n  private void computeGenKill(Node n, BitSet gen, BitSet kill,\n      boolean conditional) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  private void addToSetIfLocal(Node node, BitSet set) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /**\n   * Give up computing liveness of formal parameter by putting all the parameter\n   * names in the escaped set.\n   */\n  void markAllParametersEscaped() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  private boolean isArgumentsName(Node n) {\n         //The specific code has been omitted, but there is no error\n        }\n}", "LiveVariableJoinOp": "  private static class LiveVariableJoinOp\n      implements JoinOp<LiveVariableLattice> {\n    @Override\n    public LiveVariableLattice apply(List<LiveVariableLattice> in) {\n         //The specific code has been omitted, but there is no error\n        }\n  }", "LiveVariableLattice": "  static class LiveVariableLattice implements LatticeElement {\n    private final BitSet liveSet;\n\n    /**\n     * @param numVars Number of all local variables.\n     */\n    private LiveVariableLattice(int numVars) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    private LiveVariableLattice(LiveVariableLattice other) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    public boolean equals(Object other) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    public boolean isLive(Var v) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    public boolean isLive(int index) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    public String toString() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    public int hashCode() {\n         //The specific code has been omitted, but there is no error\n        }\n  }"}