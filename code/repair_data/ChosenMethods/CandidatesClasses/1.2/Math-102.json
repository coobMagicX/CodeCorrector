{"ChiSquareTestImpl": "public class ChiSquareTestImpl implements UnknownDistributionChiSquareTest {\n\n    /** Distribution used to compute inference statistics. */\n    private ChiSquaredDistribution distribution;\n  \n    /**\n     * Construct a ChiSquareTestImpl \n     */\n    public ChiSquareTestImpl() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Create a test instance using the given distribution for computing\n     * inference statistics.\n     * @param x distribution used to compute inference statistics.\n     * @since 1.2\n     */\n    public ChiSquareTestImpl(ChiSquaredDistribution x) {\n         //The specific code has been omitted, but there is no error\n        }\n     /**\n     * {@inheritDoc}\n     * <p><strong>Note: </strong>This implementation rescales the \n     * <code>expected</code> array if necessary to ensure that the sum of the\n     * expected and observed counts are equal.</p>\n     * \n     * @param observed array of observed frequency counts\n     * @param expected array of expected frequency counts\n     * @return chi-square test statistic\n     * @throws IllegalArgumentException if preconditions are not met\n     * or length is less than 2\n     */\n    public double chiSquare(double[] expected, long[] observed)\n        throws IllegalArgumentException {\n        if ((expected.length < 2) || (expected.length != observed.length)) {\n            throw new IllegalArgumentException(\n                    \"observed, expected array lengths incorrect\");\n        }\n        if (!isPositive(expected) || !isNonNegative(observed)) {\n            throw new IllegalArgumentException(\n                \"observed counts must be non-negative and expected counts must be postive\");\n        }\n        double sumSq = 0.0d;\n        double dev = 0.0d;\n        for (int i = 0; i < observed.length; i++) {\n         //The specific code has been omitted, but there is no error\n        }\n        return sumSq;\n    }\n\n    /**\n     * {@inheritDoc}\n     * <p><strong>Note: </strong>This implementation rescales the \n     * <code>expected</code> array if necessary to ensure that the sum of the\n     * expected and observed counts are equal.</p>\n     * \n     * @param observed array of observed frequency counts\n     * @param expected array of exptected frequency counts\n     * @return p-value\n     * @throws IllegalArgumentException if preconditions are not met\n     * @throws MathException if an error occurs computing the p-value\n     */\n    public double chiSquareTest(double[] expected, long[] observed)\n        throws IllegalArgumentException, MathException {\n        distribution.setDegreesOfFreedom(expected.length - 1.0);\n        return 1.0 - distribution.cumulativeProbability(\n            chiSquare(expected, observed));\n    }\n\n    /**\n     * {@inheritDoc}\n     * <p><strong>Note: </strong>This implementation rescales the \n     * <code>expected</code> array if necessary to ensure that the sum of the\n     * expected and observed counts are equal.</p>\n     * \n     * @param observed array of observed frequency counts\n     * @param expected array of exptected frequency counts\n     * @param alpha significance level of the test\n     * @return true iff null hypothesis can be rejected with confidence\n     * 1 - alpha\n     * @throws IllegalArgumentException if preconditions are not met\n     * @throws MathException if an error occurs performing the test\n     */\n    public boolean chiSquareTest(double[] expected, long[] observed, \n            double alpha) throws IllegalArgumentException, MathException {\n        if ((alpha <= 0) || (alpha > 0.5)) {\n            throw new IllegalArgumentException(\n                    \"bad significance level: \" + alpha);\n        }\n        return (chiSquareTest(expected, observed) < alpha);\n    }\n    \n    /**\n     * @param counts array representation of 2-way table\n     * @return chi-square test statistic\n     * @throws IllegalArgumentException if preconditions are not met\n     */\n    public double chiSquare(long[][] counts) throws IllegalArgumentException {\n        \n        checkArray(counts);\n        int nRows = counts.length;\n        int nCols = counts[0].length;\n        \n        // compute row, column and total sums\n        double[] rowSum = new double[nRows];\n        double[] colSum = new double[nCols];\n        double total = 0.0d;\n        for (int row = 0; row < nRows; row++) {\n         //The specific code has been omitted, but there is no error\n        }\n        \n        // compute expected counts and chi-square\n        double sumSq = 0.0d;\n        double expected = 0.0d;\n        for (int row = 0; row < nRows; row++) {\n         //The specific code has been omitted, but there is no error\n        } \n        return sumSq;\n    }\n\n    /**\n     * @param counts array representation of 2-way table\n     * @return p-value\n     * @throws IllegalArgumentException if preconditions are not met\n     * @throws MathException if an error occurs computing the p-value\n     */\n    public double chiSquareTest(long[][] counts)\n    throws IllegalArgumentException, MathException {\n        checkArray(counts);\n        double df = ((double) counts.length -1) * ((double) counts[0].length - 1);\n        distribution.setDegreesOfFreedom(df);\n        return 1 - distribution.cumulativeProbability(chiSquare(counts));\n    }\n\n    /**\n     * @param counts array representation of 2-way table\n     * @param alpha significance level of the test\n     * @return true iff null hypothesis can be rejected with confidence\n     * 1 - alpha\n     * @throws IllegalArgumentException if preconditions are not met\n     * @throws MathException if an error occurs performing the test\n     */\n    public boolean chiSquareTest(long[][] counts, double alpha)\n    throws IllegalArgumentException, MathException {\n        if ((alpha <= 0) || (alpha > 0.5)) {\n            throw new IllegalArgumentException(\"bad significance level: \" + alpha);\n        }\n        return (chiSquareTest(counts) < alpha);\n    }\n    \n    /**\n     * @param observed1 array of observed frequency counts of the first data set\n     * @param observed2 array of observed frequency counts of the second data set\n     * @return chi-square test statistic\n     * @throws IllegalArgumentException if preconditions are not met\n     */\n    public double chiSquareDataSetsComparison(long[] observed1, long[] observed2)\n        throws IllegalArgumentException {\n        \n        // Make sure lengths are same\n        if ((observed1.length < 2) || (observed1.length != observed2.length)) {\n            throw new IllegalArgumentException(\n                    \"oberved1, observed2 array lengths incorrect\");\n        }\n        // Ensure non-negative counts\n        if (!isNonNegative(observed1) || !isNonNegative(observed2)) {\n            throw new IllegalArgumentException(\n                \"observed counts must be non-negative\");\n        }\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n        boolean unequalCounts = false;\n        double weight = 0.0;\n        for (int i = 0; i < observed1.length; i++) {\n         //The specific code has been omitted, but there is no error\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 * countSum2 == 0) {\n         //The specific code has been omitted, but there is no error\n        }\n        // Compare and compute weight only if different\n        unequalCounts = (countSum1 != countSum2);\n        if (unequalCounts) {\n         //The specific code has been omitted, but there is no error\n        }\n        // Compute ChiSquare statistic\n        double sumSq = 0.0d;\n        double dev = 0.0d;\n        double obs1 = 0.0d;\n        double obs2 = 0.0d;\n        for (int i = 0; i < observed1.length; i++) {\n         //The specific code has been omitted, but there is no error\n        }\n        return sumSq;\n    }\n\n    /**\n     * @param observed1 array of observed frequency counts of the first data set\n     * @param observed2 array of observed frequency counts of the second data set\n     * @return p-value\n     * @throws IllegalArgumentException if preconditions are not met\n     * @throws MathException if an error occurs computing the p-value\n     */\n    public double chiSquareTestDataSetsComparison(long[] observed1, long[] observed2)\n        throws IllegalArgumentException, MathException {\n        distribution.setDegreesOfFreedom((double) observed1.length - 1);\n        return 1 - distribution.cumulativeProbability(\n                chiSquareDataSetsComparison(observed1, observed2));\n    }\n\n    /**\n     * @param observed1 array of observed frequency counts of the first data set\n     * @param observed2 array of observed frequency counts of the second data set\n     * @param alpha significance level of the test\n     * @return true iff null hypothesis can be rejected with confidence\n     * 1 - alpha\n     * @throws IllegalArgumentException if preconditions are not met\n     * @throws MathException if an error occurs performing the test\n     */\n    public boolean chiSquareTestDataSetsComparison(long[] observed1, long[] observed2,\n            double alpha) throws IllegalArgumentException, MathException {\n        if ((alpha <= 0) || (alpha > 0.5)) {\n            throw new IllegalArgumentException(\n                    \"bad significance level: \" + alpha);\n        }\n        return (chiSquareTestDataSetsComparison(observed1, observed2) < alpha);\n    }\n\n    /**\n     * Checks to make sure that the input long[][] array is rectangular,\n     * has at least 2 rows and 2 columns, and has all non-negative entries,\n     * throwing IllegalArgumentException if any of these checks fail.\n     * \n     * @param in input 2-way table to check\n     * @throws IllegalArgumentException if the array is not valid\n     */\n    private void checkArray(long[][] in) throws IllegalArgumentException {\n        \n        if (in.length < 2) {\n         //The specific code has been omitted, but there is no error\n        }\n        \n        if (in[0].length < 2) {\n         //The specific code has been omitted, but there is no error\n        }    \n        \n        if (!isRectangular(in)) {\n            throw new IllegalArgumentException(\"Input table must be rectangular\");\n        }\n        \n        if (!isNonNegative(in)) {\n            throw new IllegalArgumentException(\"All entries in input 2-way table must be non-negative\");\n        }\n        \n    }\n    \n    //---------------------  Protected methods ---------------------------------\n    /**\n     * Gets a DistributionFactory to use in creating ChiSquaredDistribution instances.\n     * @deprecated inject ChiSquaredDistribution instances directly instead of\n     *             using a factory.\n     */\n    protected DistributionFactory getDistributionFactory() {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    //---------------------  Private array methods -- should find a utility home for these\n    \n    /**\n     * Returns true iff input array is rectangular.\n     * \n     * @param in array to be tested\n     * @return true if the array is rectangular\n     * @throws NullPointerException if input array is null\n     * @throws ArrayIndexOutOfBoundsException if input array is empty\n     */\n    private boolean isRectangular(long[][] in) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Returns true iff all entries of the input array are > 0.\n     * Returns true if the array is non-null, but empty\n     * \n     * @param in array to be tested\n     * @return true if all entries of the array are positive\n     * @throws NullPointerException if input array is null\n     */\n    private boolean isPositive(double[] in) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Returns true iff all entries of the input array are >= 0.\n     * Returns true if the array is non-null, but empty\n     * \n     * @param in array to be tested\n     * @return true if all entries of the array are non-negative\n     * @throws NullPointerException if input array is null\n     */\n    private boolean isNonNegative(long[] in) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Returns true iff all entries of (all subarrays of) the input array are >= 0.\n     * Returns true if the array is non-null, but empty\n     * \n     * @param in array to be tested\n     * @return true if all entries of the array are non-negative\n     * @throws NullPointerException if input array is null\n     */\n    private boolean isNonNegative(long[][] in) {\n         //The specific code has been omitted, but there is no error\n        }\n \n    /**\n     * Modify the distribution used to compute inference statistics.\n     * \n     * @param value\n     *            the new distribution\n     * @since 1.2\n     */\n    public void setDistribution(ChiSquaredDistribution value) {\n         //The specific code has been omitted, but there is no error\n        }\n}"}