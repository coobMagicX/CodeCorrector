{"HypergeometricDistribution": "public class HypergeometricDistribution extends AbstractIntegerDistribution {\n    /** Serializable version identifier. */\n    private static final long serialVersionUID = -436928820673516179L;\n    /** The number of successes in the population. */\n    private final int numberOfSuccesses;\n    /** The population size. */\n    private final int populationSize;\n    /** The sample size. */\n    private final int sampleSize;\n    /** Cached numerical variance */\n    private double numericalVariance = Double.NaN;\n    /** Whether or not the numerical variance has been calculated */\n    private boolean numericalVarianceIsCalculated = false;\n\n    /**\n     * Construct a new hypergeometric distribution with the specified population\n     * size, number of successes in the population, and sample size.\n     *\n     * @param populationSize Population size.\n     * @param numberOfSuccesses Number of successes in the population.\n     * @param sampleSize Sample size.\n     * @throws NotPositiveException if {@code numberOfSuccesses < 0}.\n     * @throws NotStrictlyPositiveException if {@code populationSize <= 0}.\n     * @throws NumberIsTooLargeException if {@code numberOfSuccesses > populationSize},\n     * or {@code sampleSize > populationSize}.\n     */\n    public HypergeometricDistribution(int populationSize, int numberOfSuccesses, int sampleSize)\n    throws NotPositiveException, NotStrictlyPositiveException, NumberIsTooLargeException {\n        this(new Well19937c(), populationSize, numberOfSuccesses, sampleSize);\n    }\n\n    /**\n     * Creates a new hypergeometric distribution.\n     *\n     * @param rng Random number generator.\n     * @param populationSize Population size.\n     * @param numberOfSuccesses Number of successes in the population.\n     * @param sampleSize Sample size.\n     * @throws NotPositiveException if {@code numberOfSuccesses < 0}.\n     * @throws NotStrictlyPositiveException if {@code populationSize <= 0}.\n     * @throws NumberIsTooLargeException if {@code numberOfSuccesses > populationSize},\n     * or {@code sampleSize > populationSize}.\n     * @since 3.1\n     */\n    public HypergeometricDistribution(RandomGenerator rng,\n                                      int populationSize,\n                                      int numberOfSuccesses,\n                                      int sampleSize)\n    throws NotPositiveException, NotStrictlyPositiveException, NumberIsTooLargeException {\n        super(rng);\n\n        if (populationSize <= 0) {\n         //The specific code has been omitted, but there is no error\n        }\n        if (numberOfSuccesses < 0) {\n         //The specific code has been omitted, but there is no error\n        }\n        if (sampleSize < 0) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        if (numberOfSuccesses > populationSize) {\n         //The specific code has been omitted, but there is no error\n        }\n        if (sampleSize > populationSize) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        this.numberOfSuccesses = numberOfSuccesses;\n        this.populationSize = populationSize;\n        this.sampleSize = sampleSize;\n    }\n\n    /** {@inheritDoc} */\n    public double cumulativeProbability(int x) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Return the domain for the given hypergeometric distribution parameters.\n     *\n     * @param n Population size.\n     * @param m Number of successes in the population.\n     * @param k Sample size.\n     * @return a two element array containing the lower and upper bounds of the\n     * hypergeometric distribution.\n     */\n    private int[] getDomain(int n, int m, int k) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Return the lowest domain value for the given hypergeometric distribution\n     * parameters.\n     *\n     * @param n Population size.\n     * @param m Number of successes in the population.\n     * @param k Sample size.\n     * @return the lowest domain value of the hypergeometric distribution.\n     */\n    private int getLowerDomain(int n, int m, int k) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Access the number of successes.\n     *\n     * @return the number of successes.\n     */\n    public int getNumberOfSuccesses() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Access the population size.\n     *\n     * @return the population size.\n     */\n    public int getPopulationSize() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Access the sample size.\n     *\n     * @return the sample size.\n     */\n    public int getSampleSize() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Return the highest domain value for the given hypergeometric distribution\n     * parameters.\n     *\n     * @param m Number of successes in the population.\n     * @param k Sample size.\n     * @return the highest domain value of the hypergeometric distribution.\n     */\n    private int getUpperDomain(int m, int k) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /** {@inheritDoc} */\n    public double probability(int x) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * For this distribution, {@code X}, this method returns {@code P(X >= x)}.\n     *\n     * @param x Value at which the CDF is evaluated.\n     * @return the upper tail CDF for this distribution.\n     * @since 1.1\n     */\n    public double upperCumulativeProbability(int x) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * For this distribution, {@code X}, this method returns\n     * {@code P(x0 <= X <= x1)}.\n     * This probability is computed by summing the point probabilities for the\n     * values {@code x0, x0 + 1, x0 + 2, ..., x1}, in the order directed by\n     * {@code dx}.\n     *\n     * @param x0 Inclusive lower bound.\n     * @param x1 Inclusive upper bound.\n     * @param dx Direction of summation (1 indicates summing from x0 to x1, and\n     * 0 indicates summing from x1 to x0).\n     * @return {@code P(x0 <= X <= x1)}.\n     */\n    private double innerCumulativeProbability(int x0, int x1, int dx) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * {@inheritDoc}\n     *\n     * For population size {@code N}, number of successes {@code m}, and sample\n     * size {@code n}, the mean is {@code n * m / N}.\n     */\n    public double getNumericalMean() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * {@inheritDoc}\n     *\n     * For population size {@code N}, number of successes {@code m}, and sample\n     * size {@code n}, the variance is\n     * {@code [n * m * (N - n) * (N - m)] / [N^2 * (N - 1)]}.\n     */\n    public double getNumericalVariance() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Used by {@link #getNumericalVariance()}.\n     *\n     * @return the variance of this distribution\n     */\n    protected double calculateNumericalVariance() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * {@inheritDoc}\n     *\n     * For population size {@code N}, number of successes {@code m}, and sample\n     * size {@code n}, the lower bound of the support is\n     * {@code max(0, n + m - N)}.\n     *\n     * @return lower bound of the support\n     */\n    public int getSupportLowerBound() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * {@inheritDoc}\n     *\n     * For number of successes {@code m} and sample size {@code n}, the upper\n     * bound of the support is {@code min(m, n)}.\n     *\n     * @return upper bound of the support\n     */\n    public int getSupportUpperBound() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * {@inheritDoc}\n     *\n     * The support of this distribution is connected.\n     *\n     * @return {@code true}\n     */\n    public boolean isSupportConnected() {\n         //The specific code has been omitted, but there is no error\n        }\n}"}