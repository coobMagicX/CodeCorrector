{"CheckSideEffects": "final class CheckSideEffects extends AbstractPostOrderCallback\n    implements HotSwapCompilerPass {\n\n  static final DiagnosticType USELESS_CODE_ERROR = DiagnosticType.warning(\n      \"JSC_USELESS_CODE\",\n      \"Suspicious code. {0}\");\n\n  static final String PROTECTOR_FN = \"JSCOMPILER_PRESERVE\";\n\n  private final CheckLevel level;\n\n  private final List<Node> problemNodes = Lists.newArrayList();\n\n  private final AbstractCompiler compiler;\n\n  private final boolean protectSideEffectFreeCode;\n\n  CheckSideEffects(AbstractCompiler compiler, CheckLevel level,\n      boolean protectSideEffectFreeCode) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  @Override\n  public void process(Node externs, Node root) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  @Override\n  public void hotSwapScript(Node scriptRoot, Node originalRoot) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /**\n   * Protect side-effect free nodes by making them parameters\n   * to a extern function call.  This call will be removed\n   * after all the optimizations passes have run.\n   */\n  private void protectSideEffects() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  private void addExtern() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /**\n   * Remove side-effect sync functions.\n   */\n  static class StripProtection extends AbstractPostOrderCallback implements CompilerPass {\n\n    private final AbstractCompiler compiler;\n\n    StripProtection(AbstractCompiler compiler) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    public void process(Node externs, Node root) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n         //The specific code has been omitted, but there is no error\n        }\n  }\n}", "StripProtection": "  static class StripProtection extends AbstractPostOrderCallback implements CompilerPass {\n\n    private final AbstractCompiler compiler;\n\n    StripProtection(AbstractCompiler compiler) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    public void process(Node externs, Node root) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n         //The specific code has been omitted, but there is no error\n        }\n  }"}