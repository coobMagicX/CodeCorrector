{"EmbeddedRungeKuttaIntegrator": "public abstract class EmbeddedRungeKuttaIntegrator\n  extends AdaptiveStepsizeIntegrator {\n\n    /** Indicator for <i>fsal</i> methods. */\n    private final boolean fsal;\n\n    /** Time steps from Butcher array (without the first zero). */\n    private final double[] c;\n\n    /** Internal weights from Butcher array (without the first empty row). */\n    private final double[][] a;\n\n    /** External weights for the high order method from Butcher array. */\n    private final double[] b;\n\n    /** Prototype of the step interpolator. */\n    private final RungeKuttaStepInterpolator prototype;\n\n    /** Stepsize control exponent. */\n    private final double exp;\n\n    /** Safety factor for stepsize control. */\n    private double safety;\n\n    /** Minimal reduction factor for stepsize control. */\n    private double minReduction;\n\n    /** Maximal growth factor for stepsize control. */\n    private double maxGrowth;\n\n  /** Build a Runge-Kutta integrator with the given Butcher array.\n   * @param name name of the method\n   * @param fsal indicate that the method is an <i>fsal</i>\n   * @param c time steps from Butcher array (without the first zero)\n   * @param a internal weights from Butcher array (without the first empty row)\n   * @param b propagation weights for the high order method from Butcher array\n   * @param prototype prototype of the step interpolator to use\n   * @param minStep minimal step (sign is irrelevant, regardless of\n   * integration direction, forward or backward), the last step can\n   * be smaller than this\n   * @param maxStep maximal step (sign is irrelevant, regardless of\n   * integration direction, forward or backward), the last step can\n   * be smaller than this\n   * @param scalAbsoluteTolerance allowed absolute error\n   * @param scalRelativeTolerance allowed relative error\n   */\n  protected EmbeddedRungeKuttaIntegrator(final String name, final boolean fsal,\n                                         final double[] c, final double[][] a, final double[] b,\n                                         final RungeKuttaStepInterpolator prototype,\n                                         final double minStep, final double maxStep,\n                                         final double scalAbsoluteTolerance,\n                                         final double scalRelativeTolerance) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /** Build a Runge-Kutta integrator with the given Butcher array.\n   * @param name name of the method\n   * @param fsal indicate that the method is an <i>fsal</i>\n   * @param c time steps from Butcher array (without the first zero)\n   * @param a internal weights from Butcher array (without the first empty row)\n   * @param b propagation weights for the high order method from Butcher array\n   * @param prototype prototype of the step interpolator to use\n   * @param minStep minimal step (must be positive even for backward\n   * integration), the last step can be smaller than this\n   * @param maxStep maximal step (must be positive even for backward\n   * integration)\n   * @param vecAbsoluteTolerance allowed absolute error\n   * @param vecRelativeTolerance allowed relative error\n   */\n  protected EmbeddedRungeKuttaIntegrator(final String name, final boolean fsal,\n                                         final double[] c, final double[][] a, final double[] b,\n                                         final RungeKuttaStepInterpolator prototype,\n                                         final double   minStep, final double maxStep,\n                                         final double[] vecAbsoluteTolerance,\n                                         final double[] vecRelativeTolerance) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /** Get the order of the method.\n   * @return order of the method\n   */\n  public abstract int getOrder();\n\n  /** Get the safety factor for stepsize control.\n   * @return safety factor\n   */\n  public double getSafety() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /** Set the safety factor for stepsize control.\n   * @param safety safety factor\n   */\n  public void setSafety(final double safety) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /** {@inheritDoc} */\n  @Override\n  public void integrate(final ExpandableStatefulODE equations, final double t)\n      throws MathIllegalStateException, MathIllegalArgumentException {\n\n    sanityChecks(equations, t);\n    setEquations(equations);\n    final boolean forward = t > equations.getTime();\n\n    // create some internal working arrays\n    final double[] y0  = equations.getCompleteState();\n    final double[] y = y0.clone();\n    final int stages = c.length + 1;\n    final double[][] yDotK = new double[stages][y.length];\n    final double[] yTmp    = y0.clone();\n    final double[] yDotTmp = new double[y.length];\n\n    // set up an interpolator sharing the integrator arrays\n    final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy();\n    interpolator.reinitialize(this, yTmp, yDotK, forward,\n                              equations.getPrimaryMapper(), equations.getSecondaryMappers());\n    interpolator.storeTime(equations.getTime());\n\n    // set up integration control objects\n    stepStart         = equations.getTime();\n    double  hNew      = 0;\n    boolean firstTime = true;\n    initIntegration(equations.getTime(), y0, t);\n\n    // main integration loop\n    isLastStep = false;\n    do {\n\n      interpolator.shift();\n\n      // iterate over step size, ensuring local normalized error is smaller than 1\n      double error = 10;\n      while (error >= 1.0) {\n         //The specific code has been omitted, but there is no error\n        }\n\n      // local error is small enough: accept the step, trigger events and step handlers\n      interpolator.storeTime(stepStart + stepSize);\n      System.arraycopy(yTmp, 0, y, 0, y0.length);\n      System.arraycopy(yDotK[stages - 1], 0, yDotTmp, 0, y0.length);\n      stepStart = acceptStep(interpolator, y, yDotTmp, t);\n      System.arraycopy(y, 0, yTmp, 0, y.length);\n\n      if (!isLastStep) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    } while (!isLastStep);\n\n    // dispatch results\n    equations.setTime(stepStart);\n    equations.setCompleteState(y);\n\n    resetInternalState();\n\n  }\n\n  /** Get the minimal reduction factor for stepsize control.\n   * @return minimal reduction factor\n   */\n  public double getMinReduction() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /** Set the minimal reduction factor for stepsize control.\n   * @param minReduction minimal reduction factor\n   */\n  public void setMinReduction(final double minReduction) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /** Get the maximal growth factor for stepsize control.\n   * @return maximal growth factor\n   */\n  public double getMaxGrowth() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /** Set the maximal growth factor for stepsize control.\n   * @param maxGrowth maximal growth factor\n   */\n  public void setMaxGrowth(final double maxGrowth) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /** Compute the error ratio.\n   * @param yDotK derivatives computed during the first stages\n   * @param y0 estimate of the step at the start of the step\n   * @param y1 estimate of the step at the end of the step\n   * @param h  current step\n   * @return error ratio, greater than 1 if step should be rejected\n   */\n  protected abstract double estimateError(double[][] yDotK,\n                                          double[] y0, double[] y1,\n                                          double h);\n\n}"}