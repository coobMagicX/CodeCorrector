{"TimeSeries": "public class TimeSeries extends Series implements Cloneable, Serializable {\n\n    /** For serialization. */\n    private static final long serialVersionUID = -5032960206869675528L;\n    \n    /** Default value for the domain description. */\n    protected static final String DEFAULT_DOMAIN_DESCRIPTION = \"Time\";\n\n    /** Default value for the range description. */\n    protected static final String DEFAULT_RANGE_DESCRIPTION = \"Value\";\n\n    /** A description of the domain. */\n    private String domain;\n\n    /** A description of the range. */\n    private String range;\n\n    /** The type of period for the data. */\n    protected Class timePeriodClass;\n\n    /** The list of data items in the series. */\n    protected List data;\n\n    /** The maximum number of items for the series. */\n    private int maximumItemCount;\n\n    /** \n     * The maximum age of items for the series, specified as a number of\n     * time periods. \n     */\n    private long maximumItemAge;\n    \n    /**\n     * Creates a new (empty) time series.  By default, a daily time series is \n     * created.  Use one of the other constructors if you require a different \n     * time period.\n     *\n     * @param name  the series name (<code>null</code> not permitted).\n     */\n    public TimeSeries(Comparable name) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Creates a new (empty) time series with the specified name and class\n     * of {@link RegularTimePeriod}.\n     *\n     * @param name  the series name (<code>null</code> not permitted).\n     * @param timePeriodClass  the type of time period (<code>null</code> not \n     *                         permitted).\n     */\n    public TimeSeries(Comparable name, Class timePeriodClass) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Creates a new time series that contains no data.\n     * <P>\n     * Descriptions can be specified for the domain and range.  One situation\n     * where this is helpful is when generating a chart for the time series -\n     * axis labels can be taken from the domain and range description.\n     *\n     * @param name  the name of the series (<code>null</code> not permitted).\n     * @param domain  the domain description (<code>null</code> permitted).\n     * @param range  the range description (<code>null</code> permitted).\n     * @param timePeriodClass  the type of time period (<code>null</code> not \n     *                         permitted).\n     */\n    public TimeSeries(Comparable name, String domain, String range, \n                      Class timePeriodClass) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the domain description.\n     *\n     * @return The domain description (possibly <code>null</code>).\n     * \n     * @see #setDomainDescription(String)\n     */\n    public String getDomainDescription() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the domain description and sends a <code>PropertyChangeEvent</code> \n     * (with the property name <code>Domain</code>) to all registered\n     * property change listeners.\n     *\n     * @param description  the description (<code>null</code> permitted).\n     * \n     * @see #getDomainDescription()\n     */\n    public void setDomainDescription(String description) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the range description.\n     *\n     * @return The range description (possibly <code>null</code>).\n     * \n     * @see #setRangeDescription(String)\n     */\n    public String getRangeDescription() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the range description and sends a <code>PropertyChangeEvent</code> \n     * (with the property name <code>Range</code>) to all registered listeners.\n     *\n     * @param description  the description (<code>null</code> permitted).\n     * \n     * @see #getRangeDescription()\n     */\n    public void setRangeDescription(String description) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the number of items in the series.\n     *\n     * @return The item count.\n     */\n    public int getItemCount() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the list of data items for the series (the list contains \n     * {@link TimeSeriesDataItem} objects and is unmodifiable).\n     *\n     * @return The list of data items.\n     */\n    public List getItems() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the maximum number of items that will be retained in the series.\n     * The default value is <code>Integer.MAX_VALUE</code>.\n     *\n     * @return The maximum item count.\n     * \n     * @see #setMaximumItemCount(int)\n     */\n    public int getMaximumItemCount() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the maximum number of items that will be retained in the series.  \n     * If you add a new item to the series such that the number of items will \n     * exceed the maximum item count, then the FIRST element in the series is \n     * automatically removed, ensuring that the maximum item count is not \n     * exceeded.\n     *\n     * @param maximum  the maximum (requires >= 0).\n     * \n     * @see #getMaximumItemCount()\n     */\n    public void setMaximumItemCount(int maximum) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the maximum item age (in time periods) for the series.\n     *\n     * @return The maximum item age.\n     * \n     * @see #setMaximumItemAge(long)\n     */\n    public long getMaximumItemAge() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the number of time units in the 'history' for the series.  This \n     * provides one mechanism for automatically dropping old data from the\n     * time series. For example, if a series contains daily data, you might set\n     * the history count to 30.  Then, when you add a new data item, all data\n     * items more than 30 days older than the latest value are automatically \n     * dropped from the series.\n     *\n     * @param periods  the number of time periods.\n     * \n     * @see #getMaximumItemAge()\n     */\n    public void setMaximumItemAge(long periods) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the time period class for this series.\n     * <p>\n     * Only one time period class can be used within a single series (enforced).\n     * If you add a data item with a {@link Year} for the time period, then all\n     * subsequent data items must also have a {@link Year} for the time period.\n     *\n     * @return The time period class (never <code>null</code>).\n     */\n    public Class getTimePeriodClass() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns a data item for the series.\n     *\n     * @param index  the item index (zero-based).\n     *\n     * @return The data item.\n     * \n     * @see #getDataItem(RegularTimePeriod)\n     */\n    public TimeSeriesDataItem getDataItem(int index) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the data item for a specific period.\n     *\n     * @param period  the period of interest (<code>null</code> not allowed).\n     *\n     * @return The data item matching the specified period (or \n     *         <code>null</code> if there is no match).\n     *\n     * @see #getDataItem(int)\n     */\n    public TimeSeriesDataItem getDataItem(RegularTimePeriod period) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the time period at the specified index.\n     *\n     * @param index  the index of the data item.\n     *\n     * @return The time period.\n     */\n    public RegularTimePeriod getTimePeriod(int index) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns a time period that would be the next in sequence on the end of\n     * the time series.\n     *\n     * @return The next time period.\n     */\n    public RegularTimePeriod getNextTimePeriod() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns a collection of all the time periods in the time series.\n     *\n     * @return A collection of all the time periods.\n     */\n    public Collection getTimePeriods() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns a collection of time periods in the specified series, but not in\n     * this series, and therefore unique to the specified series.\n     *\n     * @param series  the series to check against this one.\n     *\n     * @return The unique time periods.\n     */\n    public Collection getTimePeriodsUniqueToOtherSeries(TimeSeries series) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the index for the item (if any) that corresponds to a time \n     * period.\n     *\n     * @param period  the time period (<code>null</code> not permitted).\n     *\n     * @return The index.\n     */\n    public int getIndex(RegularTimePeriod period) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the value at the specified index.\n     *\n     * @param index  index of a value.\n     *\n     * @return The value (possibly <code>null</code>).\n     */\n    public Number getValue(int index) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the value for a time period.  If there is no data item with the \n     * specified period, this method will return <code>null</code>.\n     *\n     * @param period  time period (<code>null</code> not permitted).\n     *\n     * @return The value (possibly <code>null</code>).\n     */\n    public Number getValue(RegularTimePeriod period) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Adds a data item to the series and sends a \n     * {@link org.jfree.data.general.SeriesChangeEvent} to all registered \n     * listeners.\n     *\n     * @param item  the (timeperiod, value) pair (<code>null</code> not \n     *              permitted).\n     */\n    public void add(TimeSeriesDataItem item) {\n         //The specific code has been omitted, but there is no error\n        }\n        \n    /**\n     * Adds a data item to the series and sends a \n     * {@link org.jfree.data.general.SeriesChangeEvent} to all registered \n     * listeners.\n     *\n     * @param item  the (timeperiod, value) pair (<code>null</code> not \n     *              permitted).\n     * @param notify  notify listeners?\n     */\n    public void add(TimeSeriesDataItem item, boolean notify) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Adds a new data item to the series and sends a {@link SeriesChangeEvent}\n     * to all registered listeners.\n     *\n     * @param period  the time period (<code>null</code> not permitted).\n     * @param value  the value.\n     */\n    public void add(RegularTimePeriod period, double value) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Adds a new data item to the series and sends a {@link SeriesChangeEvent}\n     * to all registered listeners.\n     *\n     * @param period  the time period (<code>null</code> not permitted).\n     * @param value  the value.\n     * @param notify  notify listeners?\n     */\n    public void add(RegularTimePeriod period, double value, boolean notify) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Adds a new data item to the series and sends \n     * a {@link org.jfree.data.general.SeriesChangeEvent} to all registered \n     * listeners.\n     *\n     * @param period  the time period (<code>null</code> not permitted).\n     * @param value  the value (<code>null</code> permitted).\n     */\n    public void add(RegularTimePeriod period, Number value) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Adds a new data item to the series and sends \n     * a {@link org.jfree.data.general.SeriesChangeEvent} to all registered \n     * listeners.\n     *\n     * @param period  the time period (<code>null</code> not permitted).\n     * @param value  the value (<code>null</code> permitted).\n     * @param notify  notify listeners?\n     */\n    public void add(RegularTimePeriod period, Number value, boolean notify) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Updates (changes) the value for a time period.  Throws a \n     * {@link SeriesException} if the period does not exist.\n     *\n     * @param period  the period (<code>null</code> not permitted).\n     * @param value  the value (<code>null</code> permitted).\n     */\n    public void update(RegularTimePeriod period, Number value) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Updates (changes) the value of a data item.\n     *\n     * @param index  the index of the data item.\n     * @param value  the new value (<code>null</code> permitted).\n     */\n    public void update(int index, Number value) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Adds or updates data from one series to another.  Returns another series\n     * containing the values that were overwritten.\n     *\n     * @param series  the series to merge with this.\n     *\n     * @return A series containing the values that were overwritten.\n     */\n    public TimeSeries addAndOrUpdate(TimeSeries series) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Adds or updates an item in the times series and sends a \n     * {@link org.jfree.data.general.SeriesChangeEvent} to all registered \n     * listeners.\n     *\n     * @param period  the time period to add/update (<code>null</code> not \n     *                permitted).\n     * @param value  the new value.\n     *\n     * @return A copy of the overwritten data item, or <code>null</code> if no \n     *         item was overwritten.\n     */\n    public TimeSeriesDataItem addOrUpdate(RegularTimePeriod period, \n                                          double value) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Adds or updates an item in the times series and sends a \n     * {@link org.jfree.data.general.SeriesChangeEvent} to all registered \n     * listeners.\n     *\n     * @param period  the time period to add/update (<code>null</code> not \n     *                permitted).\n     * @param value  the new value (<code>null</code> permitted).\n     *\n     * @return A copy of the overwritten data item, or <code>null</code> if no \n     *         item was overwritten.\n     */\n    public TimeSeriesDataItem addOrUpdate(RegularTimePeriod period, \n                                          Number value) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Age items in the series.  Ensure that the timespan from the youngest to \n     * the oldest record in the series does not exceed maximumItemAge time \n     * periods.  Oldest items will be removed if required.\n     * \n     * @param notify  controls whether or not a {@link SeriesChangeEvent} is \n     *                sent to registered listeners IF any items are removed.\n     */\n    public void removeAgedItems(boolean notify) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Age items in the series.  Ensure that the timespan from the supplied \n     * time to the oldest record in the series does not exceed history count.  \n     * oldest items will be removed if required.\n     *\n     * @param latest  the time to be compared against when aging data \n     *     (specified in milliseconds).\n     * @param notify  controls whether or not a {@link SeriesChangeEvent} is \n     *                sent to registered listeners IF any items are removed.\n     */\n    public void removeAgedItems(long latest, boolean notify) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Removes all data items from the series and sends a \n     * {@link SeriesChangeEvent} to all registered listeners.\n     */\n    public void clear() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Deletes the data item for the given time period and sends a \n     * {@link SeriesChangeEvent} to all registered listeners.  If there is no\n     * item with the specified time period, this method does nothing.\n     *\n     * @param period  the period of the item to delete (<code>null</code> not \n     *                permitted).\n     */\n    public void delete(RegularTimePeriod period) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Deletes data from start until end index (end inclusive).\n     *\n     * @param start  the index of the first period to delete.\n     * @param end  the index of the last period to delete.\n     */\n    public void delete(int start, int end) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns a clone of the time series.\n     * <P>\n     * Notes:\n     * <ul>\n     *   <li>no need to clone the domain and range descriptions, since String \n     *     object is immutable;</li>\n     *   <li>we pass over to the more general method clone(start, end).</li>\n     * </ul>\n     *\n     * @return A clone of the time series.\n     * \n     * @throws CloneNotSupportedException not thrown by this class, but \n     *         subclasses may differ.\n     */\n    public Object clone() throws CloneNotSupportedException {\n        Object clone = createCopy(0, getItemCount() - 1);\n        return clone;\n    }\n\n    /**\n     * Creates a new timeseries by copying a subset of the data in this time\n     * series.\n     *\n     * @param start  the index of the first time period to copy.\n     * @param end  the index of the last time period to copy.\n     *\n     * @return A series containing a copy of this times series from start until\n     *         end.\n     * \n     * @throws CloneNotSupportedException if there is a cloning problem.\n     */\n    public TimeSeries createCopy(int start, int end) \n        throws CloneNotSupportedException {\n\n        if (start < 0) {\n         //The specific code has been omitted, but there is no error\n        }\n        if (end < start) {\n         //The specific code has been omitted, but there is no error\n        }\n        TimeSeries copy = (TimeSeries) super.clone();\n\n        copy.data = new java.util.ArrayList();\n        if (this.data.size() > 0) {\n            for (int index = start; index <= end; index++) {\n         //The specific code has been omitted, but there is no error\n        }\n        }\n        return copy;\n    }\n\n    /**\n     * Creates a new timeseries by copying a subset of the data in this time \n     * series.\n     *\n     * @param start  the first time period to copy.\n     * @param end  the last time period to copy.\n     *\n     * @return A time series containing a copy of this time series from start \n     *         until end.\n     * \n     * @throws CloneNotSupportedException if there is a cloning problem.\n     */\n    public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)\n        throws CloneNotSupportedException {\n\n        if (start == null) {\n         //The specific code has been omitted, but there is no error\n        }\n        if (end == null) {\n         //The specific code has been omitted, but there is no error\n        }\n        if (start.compareTo(end) > 0) {\n            throw new IllegalArgumentException(\n                    \"Requires start on or before end.\");\n        }\n        boolean emptyRange = false;\n        int startIndex = getIndex(start);\n        if (startIndex < 0) {\n         //The specific code has been omitted, but there is no error\n        }\n        int endIndex = getIndex(end);\n        if (endIndex < 0) {\n         //The specific code has been omitted, but there is no error\n        }\n        if (endIndex < 0) {\n         //The specific code has been omitted, but there is no error\n        }\n        if (emptyRange) {\n         //The specific code has been omitted, but there is no error\n        }\n        else {\n            return createCopy(startIndex, endIndex);\n        }\n\n    }\n\n    /**\n     * Tests the series for equality with an arbitrary object.\n     *\n     * @param object  the object to test against (<code>null</code> permitted).\n     *\n     * @return A boolean.\n     */\n    public boolean equals(Object object) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns a hash code value for the object.\n     *\n     * @return The hashcode\n     */\n    public int hashCode() {\n         //The specific code has been omitted, but there is no error\n        }\n\n}"}