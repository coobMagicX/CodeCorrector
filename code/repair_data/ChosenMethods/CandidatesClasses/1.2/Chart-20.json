{"ValueMarker": "public class ValueMarker extends Marker {\n    \n    /** The value. */\n    private double value;\n\n    /**\n     * Creates a new marker.\n     * \n     * @param value  the value.\n     */\n    public ValueMarker(double value) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Creates a new marker.\n     * \n     * @param value  the value.\n     * @param paint  the paint (<code>null</code> not permitted).\n     * @param stroke  the stroke (<code>null</code> not permitted).\n     */\n    public ValueMarker(double value, Paint paint, Stroke stroke) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Creates a new value marker.\n     * \n     * @param value  the value.\n     * @param paint  the paint (<code>null</code> not permitted).\n     * @param stroke  the stroke (<code>null</code> not permitted).\n     * @param outlinePaint  the outline paint (<code>null</code> permitted).\n     * @param outlineStroke  the outline stroke (<code>null</code> permitted).\n     * @param alpha  the alpha transparency (in the range 0.0f to 1.0f).\n     */\n    public ValueMarker(double value, Paint paint, Stroke stroke, \n                       Paint outlinePaint, Stroke outlineStroke, float alpha) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Returns the value.\n     *\n     * @return The value.\n     * \n     * @see #setValue(double)\n     */\n    public double getValue() {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Sets the value for the marker and sends a {@link MarkerChangeEvent} to \n     * all registered listeners.\n     * \n     * @param value  the value.\n     * \n     * @see #getValue()\n     * \n     * @since 1.0.3\n     */\n    public void setValue(double value) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Tests this marker for equality with an arbitrary object.  This method\n     * returns <code>true</code> if:\n     * \n     * <ul>\n     * <li><code>obj</code> is not <code>null</code>;</li>\n     * <li><code>obj</code> is an instance of <code>ValueMarker</code>;</li>\n     * <li><code>obj</code> has the same value as this marker;</li>\n     * <li><code>super.equals(obj)</code> returns <code>true</code>.</li>\n     * </ul>\n     * \n     * @param obj  the object (<code>null</code> permitted).\n     * \n     * @return A boolean.\n     */\n    public boolean equals(Object obj) {\n         //The specific code has been omitted, but there is no error\n        }\n}"}