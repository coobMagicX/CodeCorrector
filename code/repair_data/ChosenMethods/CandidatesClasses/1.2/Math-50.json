{"BaseSecantSolver": "public abstract class BaseSecantSolver\n    extends AbstractUnivariateRealSolver\n    implements BracketedUnivariateRealSolver<UnivariateRealFunction> {\n\n    /** Default absolute accuracy. */\n    protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;\n\n    /** The kinds of solutions that the algorithm may accept. */\n    private AllowedSolution allowed;\n\n    /** The <em>Secant</em>-based root-finding method to use. */\n    private final Method method;\n\n    /**\n     * Construct a solver.\n     *\n     * @param absoluteAccuracy absolute accuracy\n     * @param method <em>Secant</em>-based root-finding method to use\n     */\n    protected BaseSecantSolver(final double absoluteAccuracy, final Method method) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Construct a solver.\n     *\n     * @param relativeAccuracy relative accuracy\n     * @param absoluteAccuracy absolute accuracy\n     * @param method <em>Secant</em>-based root-finding method to use\n     */\n    protected BaseSecantSolver(final double relativeAccuracy,\n                               final double absoluteAccuracy,\n                               final Method method) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Construct a solver.\n     *\n     * @param relativeAccuracy Maximum relative error.\n     * @param absoluteAccuracy Maximum absolute error.\n     * @param functionValueAccuracy Maximum function value error.\n     * @param method <em>Secant</em>-based root-finding method to use\n     */\n    protected BaseSecantSolver(final double relativeAccuracy,\n                               final double absoluteAccuracy,\n                               final double functionValueAccuracy,\n                               final Method method) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /** {@inheritDoc} */\n    public double solve(final int maxEval, final UnivariateRealFunction f,\n                        final double min, final double max,\n                        final AllowedSolution allowedSolution) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /** {@inheritDoc} */\n    public double solve(final int maxEval, final UnivariateRealFunction f,\n                        final double min, final double max, final double startValue,\n                        final AllowedSolution allowedSolution) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /** {@inheritDoc} */\n    @Override\n    public double solve(final int maxEval, final UnivariateRealFunction f,\n                        final double min, final double max, final double startValue) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /** {@inheritDoc} */\n    protected final double doSolve() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /** <em>Secant</em>-based root-finding methods. */\n    protected enum Method {\n\n        /**\n         * The {@link RegulaFalsiSolver <em>Regula Falsi</em>} or\n         * <em>False Position</em> method.\n         */\n        REGULA_FALSI,\n\n        /** The {@link IllinoisSolver <em>Illinois</em>} method. */\n        ILLINOIS,\n\n        /** The {@link PegasusSolver <em>Pegasus</em>} method. */\n        PEGASUS;\n\n    }\n}"}