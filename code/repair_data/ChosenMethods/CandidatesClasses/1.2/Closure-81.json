{"IRFactory": "public class IRFactory {\n         //The specific code has been omitted, but there is no error\n        }", "TransformDispatcher": "  private class TransformDispatcher extends TypeSafeDispatcher<Node> {\n    private Node processGeneric(\n        com.google.javascript.jscomp.mozilla.rhino.Node n) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Transforms the given node and then sets its type to Token.STRING if it\n     * was Token.NAME. If its type was already Token.STRING, then quotes it.\n     * Used for properties, as the old AST uses String tokens, while the new one\n     * uses Name tokens for unquoted strings. For example, in\n     * var o = {'a' : 1, b: 2};\n     * the string 'a' is quoted, while the name b is turned into a string, but\n     * unquoted.\n     */\n    private Node transformAsString(AstNode n) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    Node processArrayLiteral(ArrayLiteral literalNode) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    Node processAssignment(Assignment assignmentNode) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    Node processAstRoot(AstRoot rootNode) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Parse the directives, encode them in the AST, and remove their nodes.\n     *\n     * For information on ES5 directives, see section 14.1 of\n     * Ecma-262, Edition 5.\n     *\n     * It would be nice if Rhino would eventually take care of this for\n     * us, but right now their directive-processing is a one-off.\n     */\n    private void parseDirectives(Node node) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    private boolean isDirective(Node n) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    Node processBlock(Block blockNode) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    Node processBreakStatement(BreakStatement statementNode) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    Node processCatchClause(CatchClause clauseNode) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    Node processConditionalExpression(ConditionalExpression exprNode) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    Node processContinueStatement(ContinueStatement statementNode) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    Node processDoLoop(DoLoop loopNode) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    Node processElementGet(ElementGet getNode) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    Node processEmptyExpression(EmptyExpression exprNode) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    Node processExpressionStatement(ExpressionStatement statementNode) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    Node processForInLoop(ForInLoop loopNode) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    Node processForLoop(ForLoop loopNode) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    Node processFunctionCall(FunctionCall callNode) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    Node processFunctionNode(FunctionNode functionNode) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    Node processIfStatement(IfStatement statementNode) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    Node processInfixExpression(InfixExpression exprNode) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    Node processKeywordLiteral(KeywordLiteral literalNode) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    Node processLabel(Label labelNode) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    Node processLabeledStatement(LabeledStatement statementNode) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    Node processName(Name nameNode) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    Node processNewExpression(NewExpression exprNode) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    Node processNumberLiteral(NumberLiteral literalNode) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    Node processObjectLiteral(ObjectLiteral literalNode) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * @param fnNode The function.\n     * @return The Node containing the Function parameters.\n     */\n   Node getFnParamNode(Node fnNode) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    Node processObjectProperty(ObjectProperty propertyNode) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    Node processParenthesizedExpression(ParenthesizedExpression exprNode) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    Node processPropertyGet(PropertyGet getNode) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    Node processRegExpLiteral(RegExpLiteral literalNode) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    Node processReturnStatement(ReturnStatement statementNode) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    Node processScope(Scope scopeNode) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    Node processStringLiteral(StringLiteral literalNode) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    Node processSwitchCase(SwitchCase caseNode) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    Node processSwitchStatement(SwitchStatement statementNode) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    Node processThrowStatement(ThrowStatement statementNode) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    Node processTryStatement(TryStatement statementNode) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    Node processUnaryExpression(UnaryExpression exprNode) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    private boolean validAssignmentTarget(Node target) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    Node processVariableDeclaration(VariableDeclaration declarationNode) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    Node processVariableInitializer(VariableInitializer initializerNode) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    Node processWhileLoop(WhileLoop loopNode) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    Node processWithStatement(WithStatement statementNode) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    Node processIllegalToken(AstNode node) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    void reportDestructuringAssign(AstNode node) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    void reportGetter(AstNode node) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    void reportSetter(AstNode node) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    void reportGetterParam(AstNode node) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    void reportSetterParam(AstNode node) {\n         //The specific code has been omitted, but there is no error\n        }\n  }"}