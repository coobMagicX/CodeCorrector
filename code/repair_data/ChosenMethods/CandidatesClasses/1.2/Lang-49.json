{"Fraction": "public final class Fraction extends Number implements Comparable {\n\n    /**\n     * Required for serialization support. Lang version 2.0.\n     * \n     * @see java.io.Serializable\n     */\n    private static final long serialVersionUID = 65382027393090L;\n\n    /**\n     * <code>Fraction</code> representation of 0.\n     */\n    public static final Fraction ZERO = new Fraction(0, 1);\n    /**\n     * <code>Fraction</code> representation of 1.\n     */\n    public static final Fraction ONE = new Fraction(1, 1);\n    /**\n     * <code>Fraction</code> representation of 1/2.\n     */\n    public static final Fraction ONE_HALF = new Fraction(1, 2);\n    /**\n     * <code>Fraction</code> representation of 1/3.\n     */\n    public static final Fraction ONE_THIRD = new Fraction(1, 3);\n    /**\n     * <code>Fraction</code> representation of 2/3.\n     */\n    public static final Fraction TWO_THIRDS = new Fraction(2, 3);\n    /**\n     * <code>Fraction</code> representation of 1/4.\n     */\n    public static final Fraction ONE_QUARTER = new Fraction(1, 4);\n    /**\n     * <code>Fraction</code> representation of 2/4.\n     */\n    public static final Fraction TWO_QUARTERS = new Fraction(2, 4);\n    /**\n     * <code>Fraction</code> representation of 3/4.\n     */\n    public static final Fraction THREE_QUARTERS = new Fraction(3, 4);\n    /**\n     * <code>Fraction</code> representation of 1/5.\n     */\n    public static final Fraction ONE_FIFTH = new Fraction(1, 5);\n    /**\n     * <code>Fraction</code> representation of 2/5.\n     */\n    public static final Fraction TWO_FIFTHS = new Fraction(2, 5);\n    /**\n     * <code>Fraction</code> representation of 3/5.\n     */\n    public static final Fraction THREE_FIFTHS = new Fraction(3, 5);\n    /**\n     * <code>Fraction</code> representation of 4/5.\n     */\n    public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);\n\n\n    /**\n     * The numerator number part of the fraction (the three in three sevenths).\n     */\n    private final int numerator;\n    /**\n     * The denominator number part of the fraction (the seven in three sevenths).\n     */\n    private final int denominator;\n\n    /**\n     * Cached output hashCode (class is immutable).\n     */\n    private transient int hashCode = 0;\n    /**\n     * Cached output toString (class is immutable).\n     */\n    private transient String toString = null;\n    /**\n     * Cached output toProperString (class is immutable).\n     */\n    private transient String toProperString = null;\n\n    /**\n     * <p>Constructs a <code>Fraction</code> instance with the 2 parts\n     * of a fraction Y/Z.</p>\n     *\n     * @param numerator  the numerator, for example the three in 'three sevenths'\n     * @param denominator  the denominator, for example the seven in 'three sevenths'\n     */\n    private Fraction(int numerator, int denominator) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>Creates a <code>Fraction</code> instance with the 2 parts\n     * of a fraction Y/Z.</p>\n     *\n     * <p>Any negative signs are resolved to be on the numerator.</p>\n     *\n     * @param numerator  the numerator, for example the three in 'three sevenths'\n     * @param denominator  the denominator, for example the seven in 'three sevenths'\n     * @return a new fraction instance\n     * @throws ArithmeticException if the denomiator is <code>zero</code>\n     */\n    public static Fraction getFraction(int numerator, int denominator) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>Creates a <code>Fraction</code> instance with the 3 parts\n     * of a fraction X Y/Z.</p>\n     *\n     * <p>The negative sign must be passed in on the whole number part.</p>\n     *\n     * @param whole  the whole number, for example the one in 'one and three sevenths'\n     * @param numerator  the numerator, for example the three in 'one and three sevenths'\n     * @param denominator  the denominator, for example the seven in 'one and three sevenths'\n     * @return a new fraction instance\n     * @throws ArithmeticException if the denomiator is <code>zero</code>\n     * @throws ArithmeticException if the denominator is negative\n     * @throws ArithmeticException if the numerator is negative\n     * @throws ArithmeticException if the resulting numerator exceeds \n     *  <code>Integer.MAX_VALUE</code>\n     */\n    public static Fraction getFraction(int whole, int numerator, int denominator) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>Creates a reduced <code>Fraction</code> instance with the 2 parts\n     * of a fraction Y/Z.</p>\n     *\n     * <p>For example, if the input parameters represent 2/4, then the created\n     * fraction will be 1/2.</p>\n     *\n     * <p>Any negative signs are resolved to be on the numerator.</p>\n     *\n     * @param numerator  the numerator, for example the three in 'three sevenths'\n     * @param denominator  the denominator, for example the seven in 'three sevenths'\n     * @return a new fraction instance, with the numerator and denominator reduced\n     * @throws ArithmeticException if the denominator is <code>zero</code>\n     */\n    public static Fraction getReducedFraction(int numerator, int denominator) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>Creates a <code>Fraction</code> instance from a <code>double</code> value.</p>\n     *\n     * <p>This method uses the <a href=\"http://archives.math.utk.edu/articles/atuyl/confrac/\">\n     *  continued fraction algorithm</a>, computing a maximum of\n     *  25 convergents and bounding the denominator by 10,000.</p>\n     *\n     * @param value  the double value to convert\n     * @return a new fraction instance that is close to the value\n     * @throws ArithmeticException if <code>|value| > Integer.MAX_VALUE</code> \n     *  or <code>value = NaN</code>\n     * @throws ArithmeticException if the calculated denominator is <code>zero</code>\n     * @throws ArithmeticException if the the algorithm does not converge\n     */\n    public static Fraction getFraction(double value) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>Creates a Fraction from a <code>String</code>.</p>\n     *\n     * <p>The formats accepted are:</p>\n     *\n     * <ol>\n     *  <li><code>double</code> String containing a dot</li>\n     *  <li>'X Y/Z'</li>\n     *  <li>'Y/Z'</li>\n     *  <li>'X' (a simple whole number)</li>\n     * </ol>\n     * and a .</p>\n     *\n     * @param str  the string to parse, must not be <code>null</code>\n     * @return the new <code>Fraction</code> instance\n     * @throws IllegalArgumentException if the string is <code>null</code>\n     * @throws NumberFormatException if the number format is invalid\n     */\n    public static Fraction getFraction(String str) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    // Accessors\n    //-------------------------------------------------------------------\n\n    /**\n     * <p>Gets the numerator part of the fraction.</p>\n     *\n     * <p>This method may return a value greater than the denominator, an\n     * improper fraction, such as the seven in 7/4.</p>\n     *\n     * @return the numerator fraction part\n     */\n    public int getNumerator() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>Gets the denominator part of the fraction.</p>\n     *\n     * @return the denominator fraction part\n     */\n    public int getDenominator() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>Gets the proper numerator, always positive.</p>\n     *\n     * <p>An improper fraction 7/4 can be resolved into a proper one, 1 3/4.\n     * This method returns the 3 from the proper fraction.</p>\n     *\n     * <p>If the fraction is negative such as -7/4, it can be resolved into\n     * -1 3/4, so this method returns the positive proper numerator, 3.</p>\n     *\n     * @return the numerator fraction part of a proper fraction, always positive\n     */\n    public int getProperNumerator() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>Gets the proper whole part of the fraction.</p>\n     *\n     * <p>An improper fraction 7/4 can be resolved into a proper one, 1 3/4.\n     * This method returns the 1 from the proper fraction.</p>\n     *\n     * <p>If the fraction is negative such as -7/4, it can be resolved into\n     * -1 3/4, so this method returns the positive whole part -1.</p>\n     *\n     * @return the whole fraction part of a proper fraction, that includes the sign\n     */\n    public int getProperWhole() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    // Number methods\n    //-------------------------------------------------------------------\n\n    /**\n     * <p>Gets the fraction as an <code>int</code>. This returns the whole number\n     * part of the fraction.</p>\n     *\n     * @return the whole number fraction part\n     */\n    public int intValue() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>Gets the fraction as a <code>long</code>. This returns the whole number\n     * part of the fraction.</p>\n     *\n     * @return the whole number fraction part\n     */\n    public long longValue() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>Gets the fraction as a <code>float</code>. This calculates the fraction\n     * as the numerator divided by denominator.</p>\n     *\n     * @return the fraction as a <code>float</code>\n     */\n    public float floatValue() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>Gets the fraction as a <code>double</code>. This calculates the fraction\n     * as the numerator divided by denominator.</p>\n     *\n     * @return the fraction as a <code>double</code>\n     */\n    public double doubleValue() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    // Calculations\n    //-------------------------------------------------------------------\n\n    /**\n     * <p>Reduce the fraction to the smallest values for the numerator and\n     * denominator, returning the result.</p>\n     * \n     * <p>For example, if this fraction represents 2/4, then the result\n     * will be 1/2.</p>\n     *\n     * @return a new reduced fraction instance, or this if no simplification possible\n     */\n    public Fraction reduce() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>Gets a fraction that is the inverse (1/fraction) of this one.</p>\n     * \n     * <p>The returned fraction is not reduced.</p>\n     *\n     * @return a new fraction instance with the numerator and denominator\n     *         inverted.\n     * @throws ArithmeticException if the fraction represents zero.\n     */\n    public Fraction invert() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>Gets a fraction that is the negative (-fraction) of this one.</p>\n     *\n     * <p>The returned fraction is not reduced.</p>\n     *\n     * @return a new fraction instance with the opposite signed numerator\n     */\n    public Fraction negate() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>Gets a fraction that is the positive equivalent of this one.</p>\n     * <p>More precisely: <code>(fraction >= 0 ? this : -fraction)</code></p>\n     *\n     * <p>The returned fraction is not reduced.</p>\n     *\n     * @return <code>this</code> if it is positive, or a new positive fraction\n     *  instance with the opposite signed numerator\n     */\n    public Fraction abs() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>Gets a fraction that is raised to the passed in power.</p>\n     *\n     * <p>The returned fraction is in reduced form.</p>\n     *\n     * @param power  the power to raise the fraction to\n     * @return <code>this</code> if the power is one, <code>ONE</code> if the power\n     * is zero (even if the fraction equals ZERO) or a new fraction instance \n     * raised to the appropriate power\n     * @throws ArithmeticException if the resulting numerator or denominator exceeds\n     *  <code>Integer.MAX_VALUE</code>\n     */\n    public Fraction pow(int power) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>Gets the greatest common divisor of the absolute value of\n     * two numbers, using the \"binary gcd\" method which avoids\n     * division and modulo operations.  See Knuth 4.5.2 algorithm B.\n     * This algorithm is due to Josef Stein (1961).</p>\n     *\n     * @param u  a non-zero number\n     * @param v  a non-zero number\n     * @return the greatest common divisor, never zero\n     */\n    private static int greatestCommonDivisor(int u, int v) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    // Arithmetic\n    //-------------------------------------------------------------------\n\n    /** \n     * Multiply two integers, checking for overflow.\n     * \n     * @param x a factor\n     * @param y a factor\n     * @return the product <code>x*y</code>\n     * @throws ArithmeticException if the result can not be represented as\n     *                             an int\n     */\n    private static int mulAndCheck(int x, int y) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     *  Multiply two non-negative integers, checking for overflow.\n     * \n     * @param x a non-negative factor\n     * @param y a non-negative factor\n     * @return the product <code>x*y</code>\n     * @throws ArithmeticException if the result can not be represented as\n     * an int\n     */\n    private static int mulPosAndCheck(int x, int y) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /** \n     * Add two integers, checking for overflow.\n     * \n     * @param x an addend\n     * @param y an addend\n     * @return the sum <code>x+y</code>\n     * @throws ArithmeticException if the result can not be represented as\n     * an int\n     */\n    private static int addAndCheck(int x, int y) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /** \n     * Subtract two integers, checking for overflow.\n     * \n     * @param x the minuend\n     * @param y the subtrahend\n     * @return the difference <code>x-y</code>\n     * @throws ArithmeticException if the result can not be represented as\n     * an int\n     */\n    private static int subAndCheck(int x, int y) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * <p>Adds the value of this fraction to another, returning the result in reduced form.\n     * The algorithm follows Knuth, 4.5.1.</p>\n     *\n     * @param fraction  the fraction to add, must not be <code>null</code>\n     * @return a <code>Fraction</code> instance with the resulting values\n     * @throws IllegalArgumentException if the fraction is <code>null</code>\n     * @throws ArithmeticException if the resulting numerator or denominator exceeds\n     *  <code>Integer.MAX_VALUE</code>\n     */\n    public Fraction add(Fraction fraction) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>Subtracts the value of another fraction from the value of this one, \n     * returning the result in reduced form.</p>\n     *\n     * @param fraction  the fraction to subtract, must not be <code>null</code>\n     * @return a <code>Fraction</code> instance with the resulting values\n     * @throws IllegalArgumentException if the fraction is <code>null</code>\n     * @throws ArithmeticException if the resulting numerator or denominator\n     *   cannot be represented in an <code>int</code>.\n     */\n    public Fraction subtract(Fraction fraction) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /** \n     * Implement add and subtract using algorithm described in Knuth 4.5.1.\n     * \n     * @param fraction the fraction to subtract, must not be <code>null</code>\n     * @param isAdd true to add, false to subtract\n     * @return a <code>Fraction</code> instance with the resulting values\n     * @throws IllegalArgumentException if the fraction is <code>null</code>\n     * @throws ArithmeticException if the resulting numerator or denominator\n     *   cannot be represented in an <code>int</code>.\n     */\n    private Fraction addSub(Fraction fraction, boolean isAdd) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>Multiplies the value of this fraction by another, returning the \n     * result in reduced form.</p>\n     *\n     * @param fraction  the fraction to multiply by, must not be <code>null</code>\n     * @return a <code>Fraction</code> instance with the resulting values\n     * @throws IllegalArgumentException if the fraction is <code>null</code>\n     * @throws ArithmeticException if the resulting numerator or denominator exceeds\n     *  <code>Integer.MAX_VALUE</code>\n     */\n    public Fraction multiplyBy(Fraction fraction) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>Divide the value of this fraction by another.</p>\n     *\n     * @param fraction  the fraction to divide by, must not be <code>null</code>\n     * @return a <code>Fraction</code> instance with the resulting values\n     * @throws IllegalArgumentException if the fraction is <code>null</code>\n     * @throws ArithmeticException if the fraction to divide by is zero\n     * @throws ArithmeticException if the resulting numerator or denominator exceeds\n     *  <code>Integer.MAX_VALUE</code>\n     */\n    public Fraction divideBy(Fraction fraction) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    // Basics\n    //-------------------------------------------------------------------\n\n    /**\n     * <p>Compares this fraction to another object to test if they are equal.</p>.\n     *\n     * <p>To be equal, both values must be equal. Thus 2/4 is not equal to 1/2.</p>\n     *\n     * @param obj the reference object with which to compare\n     * @return <code>true</code> if this object is equal\n     */\n    public boolean equals(Object obj) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>Gets a hashCode for the fraction.</p>\n     *\n     * @return a hash code value for this object\n     */\n    public int hashCode() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>Compares this object to another based on size.</p>\n     *\n     * <p>Note: this class has a natural ordering that is inconsistent\n     * with equals, because, for example, equals treats 1/2 and 2/4 as\n     * different, whereas compareTo treats them as equal.\n     *\n     * @param object  the object to compare to\n     * @return -1 if this is less, 0 if equal, +1 if greater\n     * @throws ClassCastException if the object is not a <code>Fraction</code>\n     * @throws NullPointerException if the object is <code>null</code>\n     */\n    public int compareTo(Object object) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>Gets the fraction as a <code>String</code>.</p>\n     *\n     * <p>The format used is '<i>numerator</i>/<i>denominator</i>' always.\n     *\n     * @return a <code>String</code> form of the fraction\n     */\n    public String toString() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>Gets the fraction as a proper <code>String</code> in the format X Y/Z.</p>\n     *\n     * <p>The format used in '<i>wholeNumber</i> <i>numerator</i>/<i>denominator</i>'.\n     * If the whole number is zero it will be ommitted. If the numerator is zero,\n     * only the whole number is returned.</p>\n     *\n     * @return a <code>String</code> form of the fraction\n     */\n    public String toProperString() {\n         //The specific code has been omitted, but there is no error\n        }\n}"}