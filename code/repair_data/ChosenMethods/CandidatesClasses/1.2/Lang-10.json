{"FastDateParser": "public class FastDateParser implements DateParser, Serializable {\n    /**\n     * Required for serialization support.\n     *\n     * @see java.io.Serializable\n     */\n    private static final long serialVersionUID = 1L;\n\n    private static final ConcurrentMap<Locale,TimeZoneStrategy> tzsCache=\n        new ConcurrentHashMap<Locale,TimeZoneStrategy>(3);\n\n    static final Locale JAPANESE_IMPERIAL = new Locale(\"ja\",\"JP\",\"JP\");\n\n    // defining fields\n    private final String pattern;\n    private final TimeZone timeZone;\n    private final Locale locale;\n\n    // derived fields\n    private transient Pattern parsePattern;\n    private transient Strategy[] strategies;\n    private transient int thisYear;\n    private transient ConcurrentMap<Integer, KeyValue[]> nameValues;\n\n    // dynamic fields to communicate with Strategy\n    private transient String currentFormatField;\n    private transient Strategy nextStrategy;\n\n    /**\n     * <p>Constructs a new FastDateParser.</p>\n     *\n     * @param pattern non-null {@link java.text.SimpleDateFormat} compatible\n     *  pattern\n     * @param timeZone non-null time zone to use\n     * @param locale non-null locale\n     */\n    protected FastDateParser(String pattern, TimeZone timeZone, Locale locale) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Initialize derived fields from defining fields.\n     * This is called from constructor and from readObject (de-serialization)\n     */\n    private void init() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    // Accessors\n    //-----------------------------------------------------------------------\n    /* (non-Javadoc)\n     * @see org.apache.commons.lang3.time.DateParser#getPattern()\n     */\n    @Override\n    public String getPattern() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /* (non-Javadoc)\n     * @see org.apache.commons.lang3.time.DateParser#getTimeZone()\n     */\n    @Override\n    public TimeZone getTimeZone() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /* (non-Javadoc)\n     * @see org.apache.commons.lang3.time.DateParser#getLocale()\n     */\n    @Override\n    public Locale getLocale() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    // Give access to generated pattern for test code\n    Pattern getParsePattern() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    // Basics\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Compare another object for equality with this object.</p>\n     *\n     * @param obj  the object to compare to\n     * @return <code>true</code>if equal to this instance\n     */\n    @Override\n    public boolean equals(Object obj) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>Return a hashcode compatible with equals.</p>\n     *\n     * @return a hashcode compatible with equals\n     */\n    @Override\n    public int hashCode() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>Get a string version of this formatter.</p>\n     *\n     * @return a debugging string\n     */\n    @Override\n    public String toString() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    // Serializing\n    //-----------------------------------------------------------------------\n    /**\n     * Create the object after serialization. This implementation reinitializes the\n     * transient properties.\n     *\n     * @param in ObjectInputStream from which the object is being deserialized.\n     * @throws IOException if there is an IO issue.\n     * @throws ClassNotFoundException if a class cannot be found.\n     */\n    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n        in.defaultReadObject();\n        init();\n    }\n\n    /* (non-Javadoc)\n     * @see org.apache.commons.lang3.time.DateParser#parseObject(java.lang.String)\n     */\n    @Override\n    public Object parseObject(String source) throws ParseException {\n        return parse(source);\n    }\n\n    /* (non-Javadoc)\n     * @see org.apache.commons.lang3.time.DateParser#parse(java.lang.String)\n     */\n    @Override\n    public Date parse(String source) throws ParseException {\n        Date date= parse(source, new ParsePosition(0));\n        if(date==null) {\n         //The specific code has been omitted, but there is no error\n        }\n        return date;\n    }\n\n    /* (non-Javadoc)\n     * @see org.apache.commons.lang3.time.DateParser#parseObject(java.lang.String, java.text.ParsePosition)\n     */\n    @Override\n    public Object parseObject(String source, ParsePosition pos) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /* (non-Javadoc)\n     * @see org.apache.commons.lang3.time.DateParser#parse(java.lang.String, java.text.ParsePosition)\n     */\n    @Override\n    public Date parse(String source, ParsePosition pos) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    // Support for strategies\n    //-----------------------------------------------------------------------\n\n    /**\n     * Escape constant fields into regular expression\n     * @param regex The destination regex\n     * @param value The source field\n     * @param unquote If true, replace two success quotes ('') with single quote (')\n     * @return The <code>StringBuilder</code>\n     */\n    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * A class to store Key / Value pairs\n     */\n    private static class KeyValue {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * ignore case comparison of keys\n     */\n    private static final Comparator<KeyValue> IGNORE_CASE_COMPARATOR = new Comparator<KeyValue> () {\n        @Override\n        public int compare(KeyValue left, KeyValue right) {\n         //The specific code has been omitted, but there is no error\n        }\n    };\n\n    /**\n     * Get the short and long values displayed for a field\n     * @param field The field of interest\n     * @return A sorted array of the field key / value pairs\n     */\n    KeyValue[] getDisplayNames(int field) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    private String[] toArray(Map<String, Integer> era) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Create key / value pairs from keys\n     * @param longValues The allowable long names for a field\n     * @param shortValues The optional allowable short names for a field\n     * @return The sorted name / value pairs for the field\n     */\n    private static KeyValue[] createKeyValues(String[] longValues, String[] shortValues) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Get a count of valid values in array.  A valid value is of non-zero length.\n     * @param values The values to check.  This parameter may be null\n     * @return The number of valid values\n     */\n    private static int count(String[] values) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Create key / value pairs from values\n     * @param fieldKeyValues The destination array\n     * @param offset The offset into the destination array\n     * @param values The values to use to create key / value pairs.  This parameter may be null.\n     * @return The offset into the destination array\n     */\n    private static int copy(KeyValue[] fieldKeyValues, int offset, String[] values) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Adjust dates to be within 80 years before and 20 years after instantiation\n     * @param twoDigitYear The year to adjust\n     * @return A value within -80 and +20 years from instantiation of this instance\n     */\n    int adjustYear(int twoDigitYear) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Is the next field a number?\n     * @return true, if next field will be a number\n     */\n    boolean isNextNumber() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * What is the width of the current field?\n     * @return The number of characters in the current format field\n     */\n    int getFieldWidth() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * A strategy to parse a single field from the parsing pattern\n     */\n    private interface Strategy {\n        /**\n         * Is this field a number?\n         * @return true, if field is a number\n         */\n        boolean isNumber();\n        /**\n         * Set the Calendar with the parsed field\n         * @param parser The parser calling this strategy\n         * @param cal The <code>Calendar</code> to set\n         * @param value The parsed field to translate and set in cal\n         */\n        void setCalendar(FastDateParser parser, Calendar cal, String value);\n        /**\n         * Generate a <code>Pattern</code> regular expression to the <code>StringBuilder</code>\n         * which will accept this field\n         * @param parser The parser calling this strategy\n         * @param regex The <code>StringBuilder</code> to append to\n         * @return true, if this field will set the calendar;\n         * false, if this field is a constant value\n         */\n        boolean addRegex(FastDateParser parser, StringBuilder regex);\n    }\n\n    /**\n     * A <code>Pattern</code> to parse the user supplied SimpleDateFormat pattern\n     */\n    private static final Pattern formatPattern= Pattern.compile(\n            \"D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++\");\n\n    /**\n     * Obtain a Strategy given a field from a SimpleDateFormat pattern\n     * @param formatField A sub-sequence of the SimpleDateFormat pattern\n     * @return The Strategy that will handle parsing for the field\n     */\n    private Strategy getStrategy(String formatField) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * A strategy that copies the static or quoted field in the parsing pattern\n     */\n    private static class CopyQuotedStrategy implements Strategy {\n        private final String formatField;\n\n        /**\n         * Construct a Strategy that ensures the formatField has literal text\n         * @param formatField The literal text to match\n         */\n        CopyQuotedStrategy(String formatField) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        @Override\n        public boolean isNumber() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        @Override\n        public boolean addRegex(FastDateParser parser, StringBuilder regex) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        @Override\n        public void setCalendar(FastDateParser parser, Calendar cal, String value) {\n         //The specific code has been omitted, but there is no error\n        }\n    }\n\n    /**\n     * A strategy that handles a text field in the parsing pattern\n     */\n    private static class TextStrategy implements Strategy {\n        private final int field;\n\n        /**\n         * Construct a Strategy that parses a Text field\n         * @param field The Calendar field\n         */\n        TextStrategy(int field) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        @Override\n        public boolean isNumber() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        @Override\n        public boolean addRegex(FastDateParser parser, StringBuilder regex) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        @Override\n        public void setCalendar(FastDateParser parser, Calendar cal, String value) {\n         //The specific code has been omitted, but there is no error\n        }\n    }\n\n    /**\n     * A strategy that handles a number field in the parsing pattern\n     */\n    private static class NumberStrategy implements Strategy {\n        protected final int field;\n\n        /**\n         * Construct a Strategy that parses a Number field\n         * @param field The Calendar field\n         */\n        NumberStrategy(int field) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        @Override\n        public boolean isNumber() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        @Override\n        public boolean addRegex(FastDateParser parser, StringBuilder regex) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        @Override\n        public void setCalendar(FastDateParser parser, Calendar cal, String value) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * Make any modifications to parsed integer\n         * @param iValue The parsed integer\n         * @return The modified value\n         */\n        public int modify(int iValue) {\n         //The specific code has been omitted, but there is no error\n        }\n    }\n\n    private static final Strategy ABBREVIATED_YEAR_STRATEGY = new NumberStrategy(Calendar.YEAR) {\n         //The specific code has been omitted, but there is no error\n        };\n\n    /**\n     * A strategy that handles a timezone field in the parsing pattern\n     */\n    private static class TimeZoneStrategy implements Strategy {\n\n        final String validTimeZoneChars;\n        final SortedMap<String, TimeZone> tzNames= new TreeMap<String, TimeZone>(String.CASE_INSENSITIVE_ORDER);\n\n        /**\n         * Construct a Strategy that parses a TimeZone\n         * @param locale The Locale\n         */\n        TimeZoneStrategy(Locale locale) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        @Override\n        public boolean isNumber() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        @Override\n        public boolean addRegex(FastDateParser parser, StringBuilder regex) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        @Override\n        public void setCalendar(FastDateParser parser, Calendar cal, String value) {\n         //The specific code has been omitted, but there is no error\n        }\n    }\n\n\n    private static final Strategy ERA_STRATEGY = new TextStrategy(Calendar.ERA);\n    private static final Strategy DAY_OF_WEEK_STRATEGY = new TextStrategy(Calendar.DAY_OF_WEEK);\n    private static final Strategy AM_PM_STRATEGY = new TextStrategy(Calendar.AM_PM);\n    private static final Strategy TEXT_MONTH_STRATEGY = new TextStrategy(Calendar.MONTH);\n\n    private static final Strategy NUMBER_MONTH_STRATEGY = new NumberStrategy(Calendar.MONTH) {\n         //The specific code has been omitted, but there is no error\n        };\n    private static final Strategy LITERAL_YEAR_STRATEGY = new NumberStrategy(Calendar.YEAR);\n    private static final Strategy WEEK_OF_YEAR_STRATEGY = new NumberStrategy(Calendar.WEEK_OF_YEAR);\n    private static final Strategy WEEK_OF_MONTH_STRATEGY = new NumberStrategy(Calendar.WEEK_OF_MONTH);\n    private static final Strategy DAY_OF_YEAR_STRATEGY = new NumberStrategy(Calendar.DAY_OF_YEAR);\n    private static final Strategy DAY_OF_MONTH_STRATEGY = new NumberStrategy(Calendar.DAY_OF_MONTH);\n    private static final Strategy DAY_OF_WEEK_IN_MONTH_STRATEGY = new NumberStrategy(Calendar.DAY_OF_WEEK_IN_MONTH);\n    private static final Strategy HOUR_OF_DAY_STRATEGY = new NumberStrategy(Calendar.HOUR_OF_DAY);\n    private static final Strategy MODULO_HOUR_OF_DAY_STRATEGY = new NumberStrategy(Calendar.HOUR_OF_DAY) {\n         //The specific code has been omitted, but there is no error\n        };\n    private static final Strategy MODULO_HOUR_STRATEGY = new NumberStrategy(Calendar.HOUR) {\n         //The specific code has been omitted, but there is no error\n        };\n    private static final Strategy HOUR_STRATEGY = new NumberStrategy(Calendar.HOUR);\n    private static final Strategy MINUTE_STRATEGY = new NumberStrategy(Calendar.MINUTE);\n    private static final Strategy SECOND_STRATEGY = new NumberStrategy(Calendar.SECOND);\n    private static final Strategy MILLISECOND_STRATEGY = new NumberStrategy(Calendar.MILLISECOND);\n}", "KeyValue": "    private static class KeyValue {\n         //The specific code has been omitted, but there is no error\n        }", "CopyQuotedStrategy": "    private static class CopyQuotedStrategy implements Strategy {\n        private final String formatField;\n\n        /**\n         * Construct a Strategy that ensures the formatField has literal text\n         * @param formatField The literal text to match\n         */\n        CopyQuotedStrategy(String formatField) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        @Override\n        public boolean isNumber() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        @Override\n        public boolean addRegex(FastDateParser parser, StringBuilder regex) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        @Override\n        public void setCalendar(FastDateParser parser, Calendar cal, String value) {\n         //The specific code has been omitted, but there is no error\n        }\n    }", "TextStrategy": "    private static class TextStrategy implements Strategy {\n        private final int field;\n\n        /**\n         * Construct a Strategy that parses a Text field\n         * @param field The Calendar field\n         */\n        TextStrategy(int field) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        @Override\n        public boolean isNumber() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        @Override\n        public boolean addRegex(FastDateParser parser, StringBuilder regex) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        @Override\n        public void setCalendar(FastDateParser parser, Calendar cal, String value) {\n         //The specific code has been omitted, but there is no error\n        }\n    }", "NumberStrategy": "    private static class NumberStrategy implements Strategy {\n        protected final int field;\n\n        /**\n         * Construct a Strategy that parses a Number field\n         * @param field The Calendar field\n         */\n        NumberStrategy(int field) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        @Override\n        public boolean isNumber() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        @Override\n        public boolean addRegex(FastDateParser parser, StringBuilder regex) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        @Override\n        public void setCalendar(FastDateParser parser, Calendar cal, String value) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * Make any modifications to parsed integer\n         * @param iValue The parsed integer\n         * @return The modified value\n         */\n        public int modify(int iValue) {\n         //The specific code has been omitted, but there is no error\n        }\n    }", "TimeZoneStrategy": "    private static class TimeZoneStrategy implements Strategy {\n\n        final String validTimeZoneChars;\n        final SortedMap<String, TimeZone> tzNames= new TreeMap<String, TimeZone>(String.CASE_INSENSITIVE_ORDER);\n\n        /**\n         * Construct a Strategy that parses a TimeZone\n         * @param locale The Locale\n         */\n        TimeZoneStrategy(Locale locale) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        @Override\n        public boolean isNumber() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        @Override\n        public boolean addRegex(FastDateParser parser, StringBuilder regex) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        @Override\n        public void setCalendar(FastDateParser parser, Calendar cal, String value) {\n         //The specific code has been omitted, but there is no error\n        }\n    }"}