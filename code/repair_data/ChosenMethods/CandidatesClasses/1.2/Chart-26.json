{"Axis": "public abstract class Axis implements Cloneable, Serializable {\n\n    /** For serialization. */\n    private static final long serialVersionUID = 7719289504573298271L;\n    \n    /** The default axis visibility. */\n    public static final boolean DEFAULT_AXIS_VISIBLE = true;\n\n    /** The default axis label font. */\n    public static final Font DEFAULT_AXIS_LABEL_FONT = new Font(\n            \"SansSerif\", Font.PLAIN, 12);\n\n    /** The default axis label paint. */\n    public static final Paint DEFAULT_AXIS_LABEL_PAINT = Color.black;\n\n    /** The default axis label insets. */\n    public static final RectangleInsets DEFAULT_AXIS_LABEL_INSETS \n            = new RectangleInsets(3.0, 3.0, 3.0, 3.0);\n\n    /** The default axis line paint. */\n    public static final Paint DEFAULT_AXIS_LINE_PAINT = Color.gray;\n    \n    /** The default axis line stroke. */\n    public static final Stroke DEFAULT_AXIS_LINE_STROKE = new BasicStroke(1.0f);\n\n    /** The default tick labels visibility. */\n    public static final boolean DEFAULT_TICK_LABELS_VISIBLE = true;\n\n    /** The default tick label font. */\n    public static final Font DEFAULT_TICK_LABEL_FONT = new Font(\"SansSerif\", \n            Font.PLAIN, 10);\n\n    /** The default tick label paint. */\n    public static final Paint DEFAULT_TICK_LABEL_PAINT = Color.black;\n\n    /** The default tick label insets. */\n    public static final RectangleInsets DEFAULT_TICK_LABEL_INSETS \n            = new RectangleInsets(2.0, 4.0, 2.0, 4.0);\n\n    /** The default tick marks visible. */\n    public static final boolean DEFAULT_TICK_MARKS_VISIBLE = true;\n\n    /** The default tick stroke. */\n    public static final Stroke DEFAULT_TICK_MARK_STROKE = new BasicStroke(1);\n\n    /** The default tick paint. */\n    public static final Paint DEFAULT_TICK_MARK_PAINT = Color.gray;\n\n    /** The default tick mark inside length. */\n    public static final float DEFAULT_TICK_MARK_INSIDE_LENGTH = 0.0f;\n\n    /** The default tick mark outside length. */\n    public static final float DEFAULT_TICK_MARK_OUTSIDE_LENGTH = 2.0f;\n\n    /** A flag indicating whether or not the axis is visible. */\n    private boolean visible;\n\n    /** The label for the axis. */\n    private String label;\n\n    /** The font for displaying the axis label. */\n    private Font labelFont;\n\n    /** The paint for drawing the axis label. */\n    private transient Paint labelPaint;\n\n    /** The insets for the axis label. */\n    private RectangleInsets labelInsets;\n\n    /** The label angle. */\n    private double labelAngle;\n    \n    /**\n     * The tool tip text for the label (<code>null</code> is permitted).\n     * \n     * @since 1.2.0\n     */\n    private String labelToolTip;\n\n    /**\n     * The URL for the label (<code>null</code> is permitted).\n     * \n     * @since 1.2.0.\n     */\n    private String labelURL;\n    \n    /** A flag that controls whether or not the axis line is visible. */\n    private boolean axisLineVisible;\n\n    /** The stroke used for the axis line. */\n    private transient Stroke axisLineStroke;\n    \n    /** The paint used for the axis line. */\n    private transient Paint axisLinePaint;\n    \n    /** \n     * A flag that indicates whether or not tick labels are visible for the \n     * axis. \n     */\n    private boolean tickLabelsVisible;\n\n    /** The font used to display the tick labels. */\n    private Font tickLabelFont;\n\n    /** The color used to display the tick labels. */\n    private transient Paint tickLabelPaint;\n\n    /** The blank space around each tick label. */\n    private RectangleInsets tickLabelInsets;\n\n    /** \n     * A flag that indicates whether or not tick marks are visible for the \n     * axis. \n     */\n    private boolean tickMarksVisible;\n\n    /** The length of the tick mark inside the data area (zero permitted). */\n    private float tickMarkInsideLength;\n\n    /** The length of the tick mark outside the data area (zero permitted). */\n    private float tickMarkOutsideLength;\n\n    /** The stroke used to draw tick marks. */\n    private transient Stroke tickMarkStroke;\n\n    /** The paint used to draw tick marks. */\n    private transient Paint tickMarkPaint;\n\n    /** The fixed (horizontal or vertical) dimension for the axis. */\n    private double fixedDimension;\n\n    /** \n     * A reference back to the plot that the axis is assigned to (can be \n     * <code>null</code>). \n     */\n    private transient Plot plot;\n\n    /** Storage for registered listeners. */\n    private transient EventListenerList listenerList;\n\n    /**\n     * Constructs an axis, using default values where necessary.\n     *\n     * @param label  the axis label (<code>null</code> permitted).\n     */\n    protected Axis(String label) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns <code>true</code> if the axis is visible, and \n     * <code>false</code> otherwise.\n     *\n     * @return A boolean.\n     * \n     * @see #setVisible(boolean)\n     */\n    public boolean isVisible() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets a flag that controls whether or not the axis is visible and sends \n     * an {@link AxisChangeEvent} to all registered listeners.\n     *\n     * @param flag  the flag.\n     * \n     * @see #isVisible()\n     */\n    public void setVisible(boolean flag) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the label for the axis.\n     *\n     * @return The label for the axis (<code>null</code> possible).\n     * \n     * @see #getLabelFont()\n     * @see #getLabelPaint()\n     * @see #setLabel(String)\n     */\n    public String getLabel() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the label for the axis and sends an {@link AxisChangeEvent} to all \n     * registered listeners.\n     *\n     * @param label  the new label (<code>null</code> permitted).\n     * \n     * @see #getLabel()\n     * @see #setLabelFont(Font)\n     * @see #setLabelPaint(Paint)\n     */\n    public void setLabel(String label) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the font for the axis label.\n     *\n     * @return The font (never <code>null</code>).\n     * \n     * @see #setLabelFont(Font)\n     */\n    public Font getLabelFont() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the font for the axis label and sends an {@link AxisChangeEvent} \n     * to all registered listeners.\n     *\n     * @param font  the font (<code>null</code> not permitted).\n     * \n     * @see #getLabelFont()\n     */\n    public void setLabelFont(Font font) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the color/shade used to draw the axis label.\n     *\n     * @return The paint (never <code>null</code>).\n     * \n     * @see #setLabelPaint(Paint)\n     */\n    public Paint getLabelPaint() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the paint used to draw the axis label and sends an \n     * {@link AxisChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint (<code>null</code> not permitted).\n     * \n     * @see #getLabelPaint()\n     */\n    public void setLabelPaint(Paint paint) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the insets for the label (that is, the amount of blank space\n     * that should be left around the label).\n     *\n     * @return The label insets (never <code>null</code>).\n     * \n     * @see #setLabelInsets(RectangleInsets)\n     */\n    public RectangleInsets getLabelInsets() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the insets for the axis label, and sends an {@link AxisChangeEvent}\n     * to all registered listeners.\n     *\n     * @param insets  the insets (<code>null</code> not permitted).\n     * \n     * @see #getLabelInsets()\n     */\n    public void setLabelInsets(RectangleInsets insets) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the angle of the axis label.\n     *\n     * @return The angle (in radians).\n     * \n     * @see #setLabelAngle(double)\n     */\n    public double getLabelAngle() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the angle for the label and sends an {@link AxisChangeEvent} to all \n     * registered listeners.\n     *\n     * @param angle  the angle (in radians).\n     * \n     * @see #getLabelAngle()\n     */\n    public void setLabelAngle(double angle) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the tool tip text for the axis label.\n     * \n     * @return The tool tip text (possibly <code>null</code>).\n     * \n     * @see #setLabelToolTip(String)\n     * \n     * @since 1.2.0\n     */\n    public String getLabelToolTip() {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Sets the tool tip text for the axis label and sends a .\n     * {@link AxisChangeEvent} to all registered listeners.\n     * \n     * @param text  the tool tip text (<code>null</code> permitted).\n     * \n     * @see #getLabelToolTip()\n     * \n     * @since 1.2.0\n     */\n    public void setLabelToolTip(String text) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Returns the URL text for the axis label.\n     * \n     * @return The URL (possibly <code>null</code>).\n     * \n     * @see #setLabelURL(String)\n     * \n     * @since 1.2.0\n     */\n    public String getLabelURL() {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Sets the URL for the axis label and sends an {@link AxisChangeEvent} to\n     * all registered listeners.\n     * \n     * @param url  the URL (<code>null</code> permitted).\n     * \n     * @see #getLabelURL()\n     * \n     * @since 1.2.0\n     */\n    public void setLabelURL(String url) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * A flag that controls whether or not the axis line is drawn.\n     * \n     * @return A boolean.\n     * \n     * @see #getAxisLinePaint()\n     * @see #getAxisLineStroke()\n     * @see #setAxisLineVisible(boolean)\n     */\n    public boolean isAxisLineVisible() {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Sets a flag that controls whether or not the axis line is visible and \n     * sends an {@link AxisChangeEvent} to all registered listeners.\n     * \n     * @param visible  the flag.\n     * \n     * @see #isAxisLineVisible()\n     * @see #setAxisLinePaint(Paint)\n     * @see #setAxisLineStroke(Stroke)\n     */\n    public void setAxisLineVisible(boolean visible) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Returns the paint used to draw the axis line.\n     * \n     * @return The paint (never <code>null</code>).\n     * \n     * @see #setAxisLinePaint(Paint)\n     */\n    public Paint getAxisLinePaint() {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Sets the paint used to draw the axis line and sends an \n     * {@link AxisChangeEvent} to all registered listeners.\n     * \n     * @param paint  the paint (<code>null</code> not permitted).\n     * \n     * @see #getAxisLinePaint()\n     */\n    public void setAxisLinePaint(Paint paint) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Returns the stroke used to draw the axis line.\n     * \n     * @return The stroke (never <code>null</code>).\n     * \n     * @see #setAxisLineStroke(Stroke)\n     */\n    public Stroke getAxisLineStroke() {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Sets the stroke used to draw the axis line and sends an \n     * {@link AxisChangeEvent} to all registered listeners.\n     * \n     * @param stroke  the stroke (<code>null</code> not permitted).\n     * \n     * @see #getAxisLineStroke()\n     */\n    public void setAxisLineStroke(Stroke stroke) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Returns a flag indicating whether or not the tick labels are visible.\n     *\n     * @return The flag.\n     * \n     * @see #getTickLabelFont()\n     * @see #getTickLabelPaint()\n     * @see #setTickLabelsVisible(boolean)\n     */\n    public boolean isTickLabelsVisible() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the flag that determines whether or not the tick labels are \n     * visible and sends an {@link AxisChangeEvent} to all registered \n     * listeners.\n     *\n     * @param flag  the flag.\n     * \n     * @see #isTickLabelsVisible()\n     * @see #setTickLabelFont(Font)\n     * @see #setTickLabelPaint(Paint)\n     */\n    public void setTickLabelsVisible(boolean flag) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the font used for the tick labels (if showing).\n     *\n     * @return The font (never <code>null</code>).\n     * \n     * @see #setTickLabelFont(Font)\n     */\n    public Font getTickLabelFont() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the font for the tick labels and sends an {@link AxisChangeEvent} \n     * to all registered listeners.\n     *\n     * @param font  the font (<code>null</code> not allowed).\n     * \n     * @see #getTickLabelFont()\n     */\n    public void setTickLabelFont(Font font) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the color/shade used for the tick labels.\n     *\n     * @return The paint used for the tick labels.\n     * \n     * @see #setTickLabelPaint(Paint)\n     */\n    public Paint getTickLabelPaint() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the paint used to draw tick labels (if they are showing) and \n     * sends an {@link AxisChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint (<code>null</code> not permitted).\n     * \n     * @see #getTickLabelPaint()\n     */\n    public void setTickLabelPaint(Paint paint) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the insets for the tick labels.\n     *\n     * @return The insets (never <code>null</code>).\n     * \n     * @see #setTickLabelInsets(RectangleInsets)\n     */\n    public RectangleInsets getTickLabelInsets() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the insets for the tick labels and sends an {@link AxisChangeEvent}\n     * to all registered listeners.\n     *\n     * @param insets  the insets (<code>null</code> not permitted).\n     * \n     * @see #getTickLabelInsets()\n     */\n    public void setTickLabelInsets(RectangleInsets insets) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the flag that indicates whether or not the tick marks are\n     * showing.\n     *\n     * @return The flag that indicates whether or not the tick marks are \n     *         showing.\n     *         \n     * @see #setTickMarksVisible(boolean)\n     */\n    public boolean isTickMarksVisible() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the flag that indicates whether or not the tick marks are showing\n     * and sends an {@link AxisChangeEvent} to all registered listeners.\n     *\n     * @param flag  the flag.\n     * \n     * @see #isTickMarksVisible()\n     */\n    public void setTickMarksVisible(boolean flag) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the inside length of the tick marks.\n     *\n     * @return The length.\n     * \n     * @see #getTickMarkOutsideLength()\n     * @see #setTickMarkInsideLength(float)\n     */\n    public float getTickMarkInsideLength() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the inside length of the tick marks and sends\n     * an {@link AxisChangeEvent} to all registered listeners.\n     *\n     * @param length  the new length.\n     * \n     * @see #getTickMarkInsideLength()\n     */\n    public void setTickMarkInsideLength(float length) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the outside length of the tick marks.\n     *\n     * @return The length.\n     * \n     * @see #getTickMarkInsideLength()\n     * @see #setTickMarkOutsideLength(float)\n     */\n    public float getTickMarkOutsideLength() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the outside length of the tick marks and sends\n     * an {@link AxisChangeEvent} to all registered listeners.\n     *\n     * @param length  the new length.\n     * \n     * @see #getTickMarkInsideLength()\n     */\n    public void setTickMarkOutsideLength(float length) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the stroke used to draw tick marks.\n     *\n     * @return The stroke (never <code>null</code>).\n     * \n     * @see #setTickMarkStroke(Stroke)\n     */\n    public Stroke getTickMarkStroke() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the stroke used to draw tick marks and sends\n     * an {@link AxisChangeEvent} to all registered listeners.\n     *\n     * @param stroke  the stroke (<code>null</code> not permitted).\n     * \n     * @see #getTickMarkStroke()\n     */\n    public void setTickMarkStroke(Stroke stroke) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the paint used to draw tick marks (if they are showing).\n     *\n     * @return The paint (never <code>null</code>).\n     * \n     * @see #setTickMarkPaint(Paint)\n     */\n    public Paint getTickMarkPaint() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the paint used to draw tick marks and sends an \n     * {@link AxisChangeEvent} to all registered listeners.\n     *\n     * @param paint  the paint (<code>null</code> not permitted).\n     * \n     * @see #getTickMarkPaint()\n     */\n    public void setTickMarkPaint(Paint paint) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the plot that the axis is assigned to.  This method will return \n     * <code>null</code> if the axis is not currently assigned to a plot.\n     *\n     * @return The plot that the axis is assigned to (possibly \n     *         <code>null</code>).\n     *         \n     * @see #setPlot(Plot)\n     */\n    public Plot getPlot() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets a reference to the plot that the axis is assigned to.\n     * <P>\n     * This method is used internally, you shouldn't need to call it yourself.\n     *\n     * @param plot  the plot.\n     * \n     * @see #getPlot()\n     */\n    public void setPlot(Plot plot) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the fixed dimension for the axis.\n     *\n     * @return The fixed dimension.\n     * \n     * @see #setFixedDimension(double)\n     */\n    public double getFixedDimension() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the fixed dimension for the axis.\n     * <P>\n     * This is used when combining more than one plot on a chart.  In this case,\n     * there may be several axes that need to have the same height or width so\n     * that they are aligned.  This method is used to fix a dimension for the\n     * axis (the context determines whether the dimension is horizontal or\n     * vertical).\n     *\n     * @param dimension  the fixed dimension.\n     * \n     * @see #getFixedDimension()\n     */\n    public void setFixedDimension(double dimension) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Configures the axis to work with the current plot.  Override this method\n     * to perform any special processing (such as auto-rescaling).\n     */\n    public abstract void configure();\n\n    /**\n     * Estimates the space (height or width) required to draw the axis.\n     *\n     * @param g2  the graphics device.\n     * @param plot  the plot that the axis belongs to.\n     * @param plotArea  the area within which the plot (including axes) should \n     *                  be drawn.\n     * @param edge  the axis location.\n     * @param space  space already reserved.\n     *\n     * @return The space required to draw the axis (including pre-reserved \n     *         space).\n     */\n    public abstract AxisSpace reserveSpace(Graphics2D g2, Plot plot, \n                                           Rectangle2D plotArea, \n                                           RectangleEdge edge, \n                                           AxisSpace space);\n\n    /**\n     * Draws the axis on a Java 2D graphics device (such as the screen or a \n     * printer).\n     *\n     * @param g2  the graphics device (<code>null</code> not permitted).\n     * @param cursor  the cursor location (determines where to draw the axis).\n     * @param plotArea  the area within which the axes and plot should be drawn.\n     * @param dataArea  the area within which the data should be drawn.\n     * @param edge  the axis location (<code>null</code> not permitted).\n     * @param plotState  collects information about the plot \n     *                   (<code>null</code> permitted).\n     * \n     * @return The axis state (never <code>null</code>).\n     */\n    public abstract AxisState draw(Graphics2D g2, \n                                   double cursor,\n                                   Rectangle2D plotArea, \n                                   Rectangle2D dataArea,\n                                   RectangleEdge edge,\n                                   PlotRenderingInfo plotState);\n\n    /**\n     * Calculates the positions of the ticks for the axis, storing the results\n     * in the tick list (ready for drawing).\n     *\n     * @param g2  the graphics device.\n     * @param state  the axis state.\n     * @param dataArea  the area inside the axes.\n     * @param edge  the edge on which the axis is located.\n     * \n     * @return The list of ticks.\n     */\n    public abstract List refreshTicks(Graphics2D g2, \n                                      AxisState state,\n                                      Rectangle2D dataArea,\n                                      RectangleEdge edge);\n\n    /**\n     * Registers an object for notification of changes to the axis.\n     *\n     * @param listener  the object that is being registered.\n     * \n     * @see #removeChangeListener(AxisChangeListener)\n     */\n    public void addChangeListener(AxisChangeListener listener) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Deregisters an object for notification of changes to the axis.\n     *\n     * @param listener  the object to deregister.\n     * \n     * @see #addChangeListener(AxisChangeListener)\n     */\n    public void removeChangeListener(AxisChangeListener listener) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns <code>true</code> if the specified object is registered with\n     * the dataset as a listener.  Most applications won't need to call this \n     * method, it exists mainly for use by unit testing code.\n     * \n     * @param listener  the listener.\n     * \n     * @return A boolean.\n     */\n    public boolean hasListener(EventListener listener) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Notifies all registered listeners that the axis has changed.\n     * The AxisChangeEvent provides information about the change.\n     *\n     * @param event  information about the change to the axis.\n     */\n    protected void notifyListeners(AxisChangeEvent event) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns a rectangle that encloses the axis label.  This is typically \n     * used for layout purposes (it gives the maximum dimensions of the label).\n     *\n     * @param g2  the graphics device.\n     * @param edge  the edge of the plot area along which the axis is measuring.\n     *\n     * @return The enclosing rectangle.\n     */\n    protected Rectangle2D getLabelEnclosure(Graphics2D g2, RectangleEdge edge) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Draws the axis label.\n     *\n     * @param label  the label text.\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area.\n     * @param dataArea  the area inside the axes.\n     * @param edge  the location of the axis.\n     * @param state  the axis state (<code>null</code> not permitted).\n     * @param plotState  the plot state (<code>null</code> permitted).\n     *\n     * @return Information about the axis.\n     */\n    protected AxisState drawLabel(String label, Graphics2D g2, \n            Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, \n            AxisState state, PlotRenderingInfo plotState) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Draws an axis line at the current cursor position and edge.\n     * \n     * @param g2  the graphics device.\n     * @param cursor  the cursor position.\n     * @param dataArea  the data area.\n     * @param edge  the edge.\n     */\n    protected void drawAxisLine(Graphics2D g2, double cursor,\n            Rectangle2D dataArea, RectangleEdge edge) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns a clone of the axis.\n     * \n     * @return A clone.\n     * \n     * @throws CloneNotSupportedException if some component of the axis does \n     *         not support cloning.\n     */\n    public Object clone() throws CloneNotSupportedException {\n        Axis clone = (Axis) super.clone();\n        // It's up to the plot which clones up to restore the correct references\n        clone.plot = null;        \n        clone.listenerList = new EventListenerList();\n        return clone;\n    }\n    \n    /**\n     * Tests this axis for equality with another object.\n     *\n     * @param obj  the object (<code>null</code> permitted).\n     *\n     * @return <code>true</code> or <code>false</code>.\n     */\n    public boolean equals(Object obj) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     */\n    private void writeObject(ObjectOutputStream stream) throws IOException {\n        stream.defaultWriteObject();\n        SerialUtilities.writePaint(this.labelPaint, stream);\n        SerialUtilities.writePaint(this.tickLabelPaint, stream);\n        SerialUtilities.writeStroke(this.axisLineStroke, stream);\n        SerialUtilities.writePaint(this.axisLinePaint, stream);\n        SerialUtilities.writeStroke(this.tickMarkStroke, stream);\n        SerialUtilities.writePaint(this.tickMarkPaint, stream);\n    }\n\n    /**\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     */\n    private void readObject(ObjectInputStream stream) \n        throws IOException, ClassNotFoundException {\n        stream.defaultReadObject();\n        this.labelPaint = SerialUtilities.readPaint(stream);\n        this.tickLabelPaint = SerialUtilities.readPaint(stream);\n        this.axisLineStroke = SerialUtilities.readStroke(stream);\n        this.axisLinePaint = SerialUtilities.readPaint(stream);\n        this.tickMarkStroke = SerialUtilities.readStroke(stream);\n        this.tickMarkPaint = SerialUtilities.readPaint(stream);\n        this.listenerList = new EventListenerList();\n    }\n\n}"}