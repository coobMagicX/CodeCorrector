{"Week": "public class Week extends RegularTimePeriod implements Serializable {\n\n    /** For serialization. */\n    private static final long serialVersionUID = 1856387786939865061L;\n\n    /** Constant for the first week in the year. */\n    public static final int FIRST_WEEK_IN_YEAR = 1;\n\n    /** Constant for the last week in the year. */\n    public static final int LAST_WEEK_IN_YEAR = 53;\n\n    /** The year in which the week falls. */\n    private short year;\n\n    /** The week (1-53). */\n    private byte week;\n\n    /** The first millisecond. */\n    private long firstMillisecond;\n\n    /** The last millisecond. */\n    private long lastMillisecond;\n\n    /**\n     * Creates a new time period for the week in which the current system\n     * date/time falls.\n     */\n    public Week() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Creates a time period representing the week in the specified year.\n     *\n     * @param week  the week (1 to 53).\n     * @param year  the year (1900 to 9999).\n     */\n    public Week(int week, int year) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Creates a time period representing the week in the specified year.\n     *\n     * @param week  the week (1 to 53).\n     * @param year  the year (1900 to 9999).\n     */\n    public Week(int week, Year year) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Creates a time period for the week in which the specified date/time\n     * falls.\n     *\n     * @param time  the time (<code>null</code> not permitted).\n     */\n    public Week(Date time) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Creates a time period for the week in which the specified date/time\n     * falls, calculated relative to the specified time zone.\n     *\n     * @param time  the date/time (<code>null</code> not permitted).\n     * @param zone  the time zone (<code>null</code> not permitted).\n     *\n     * @deprecated As of 1.0.7, use {@link #Week(Date, TimeZone, Locale)}.\n     */\n    public Week(Date time, TimeZone zone) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Creates a time period for the week in which the specified date/time\n     * falls, calculated relative to the specified time zone.\n     *\n     * @param time  the date/time (<code>null</code> not permitted).\n     * @param zone  the time zone (<code>null</code> not permitted).\n     * @param locale  the locale (<code>null</code> not permitted).\n     *\n     * @since 1.0.7\n     */\n    public Week(Date time, TimeZone zone, Locale locale) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the year in which the week falls.\n     *\n     * @return The year (never <code>null</code>).\n     */\n    public Year getYear() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the year in which the week falls, as an integer value.\n     *\n     * @return The year.\n     */\n    public int getYearValue() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the week.\n     *\n     * @return The week.\n     */\n    public int getWeek() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the first millisecond of the week.  This will be determined\n     * relative to the time zone specified in the constructor, or in the\n     * calendar instance passed in the most recent call to the\n     * {@link #peg(Calendar)} method.\n     *\n     * @return The first millisecond of the week.\n     *\n     * @see #getLastMillisecond()\n     */\n    public long getFirstMillisecond() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the last millisecond of the week.  This will be\n     * determined relative to the time zone specified in the constructor, or\n     * in the calendar instance passed in the most recent call to the\n     * {@link #peg(Calendar)} method.\n     *\n     * @return The last millisecond of the week.\n     *\n     * @see #getFirstMillisecond()\n     */\n    public long getLastMillisecond() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Recalculates the start date/time and end date/time for this time period\n     * relative to the supplied calendar (which incorporates a time zone).\n     *\n     * @param calendar  the calendar (<code>null</code> not permitted).\n     *\n     * @since 1.0.3\n     */\n    public void peg(Calendar calendar) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the week preceding this one.  This method will return\n     * <code>null</code> for some lower limit on the range of weeks (currently\n     * week 1, 1900).  For week 1 of any year, the previous week is always week\n     * 53, but week 53 may not contain any days (you should check for this).\n     *\n     * @return The preceding week (possibly <code>null</code>).\n     */\n    public RegularTimePeriod previous() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the week following this one.  This method will return\n     * <code>null</code> for some upper limit on the range of weeks (currently\n     * week 53, 9999).  For week 52 of any year, the following week is always\n     * week 53, but week 53 may not contain any days (you should check for\n     * this).\n     *\n     * @return The following week (possibly <code>null</code>).\n     */\n    public RegularTimePeriod next() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns a serial index number for the week.\n     *\n     * @return The serial index number.\n     */\n    public long getSerialIndex() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the first millisecond of the week, evaluated using the supplied\n     * calendar (which determines the time zone).\n     *\n     * @param calendar  the calendar (<code>null</code> not permitted).\n     *\n     * @return The first millisecond of the week.\n     *\n     * @throws NullPointerException if <code>calendar</code> is\n     *     <code>null</code>.\n     */\n    public long getFirstMillisecond(Calendar calendar) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the last millisecond of the week, evaluated using the supplied\n     * calendar (which determines the time zone).\n     *\n     * @param calendar  the calendar (<code>null</code> not permitted).\n     *\n     * @return The last millisecond of the week.\n     *\n     * @throws NullPointerException if <code>calendar</code> is\n     *     <code>null</code>.\n     */\n    public long getLastMillisecond(Calendar calendar) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns a string representing the week (e.g. \"Week 9, 2002\").\n     *\n     * TODO: look at internationalisation.\n     *\n     * @return A string representing the week.\n     */\n    public String toString() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Tests the equality of this Week object to an arbitrary object.  Returns\n     * true if the target is a Week instance representing the same week as this\n     * object.  In all other cases, returns false.\n     *\n     * @param obj  the object (<code>null</code> permitted).\n     *\n     * @return <code>true</code> if week and year of this and object are the\n     *         same.\n     */\n    public boolean equals(Object obj) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns a hash code for this object instance.  The approach described by\n     * Joshua Bloch in \"Effective Java\" has been used here:\n     * <p>\n     * <code>http://developer.java.sun.com/developer/Books/effectivejava\n     * /Chapter3.pdf</code>\n     *\n     * @return A hash code.\n     */\n    public int hashCode() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns an integer indicating the order of this Week object relative to\n     * the specified object:\n     *\n     * negative == before, zero == same, positive == after.\n     *\n     * @param o1  the object to compare.\n     *\n     * @return negative == before, zero == same, positive == after.\n     */\n    public int compareTo(Object o1) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Parses the string argument as a week.\n     * <P>\n     * This method is required to accept the format \"YYYY-Wnn\".  It will also\n     * accept \"Wnn-YYYY\". Anything else, at the moment, is a bonus.\n     *\n     * @param s  string to parse.\n     *\n     * @return <code>null</code> if the string is not parseable, the week\n     *         otherwise.\n     */\n    public static Week parseWeek(String s) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Finds the first occurrence of ' ', '-', ',' or '.'\n     *\n     * @param s  the string to parse.\n     *\n     * @return <code>-1</code> if none of the characters was found, the\n     *      index of the first occurrence otherwise.\n     */\n    private static int findSeparator(String s) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Creates a year from a string, or returns null (format exceptions\n     * suppressed).\n     *\n     * @param s  string to parse.\n     *\n     * @return <code>null</code> if the string is not parseable, the year\n     *         otherwise.\n     */\n    private static Year evaluateAsYear(String s) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Converts a string to a week.\n     *\n     * @param s  the string to parse.\n     * @return <code>-1</code> if the string does not contain a week number,\n     *         the number of the week otherwise.\n     */\n    private static int stringToWeek(String s) {\n         //The specific code has been omitted, but there is no error\n        }\n\n}"}