{"XYSeries": "public class XYSeries extends Series implements Cloneable, Serializable {\n\n    /** For serialization. */\n    static final long serialVersionUID = -5908509288197150436L;\n\n    // In version 0.9.12, in response to several developer requests, I changed\n    // the 'data' attribute from 'private' to 'protected', so that others can\n    // make subclasses that work directly with the underlying data structure.\n\n    /** Storage for the data items in the series. */\n    protected List data;\n\n    /** The maximum number of items for the series. */\n    private int maximumItemCount = Integer.MAX_VALUE;\n\n    /** A flag that controls whether the items are automatically sorted. */\n    private boolean autoSort;\n\n    /** A flag that controls whether or not duplicate x-values are allowed. */\n    private boolean allowDuplicateXValues;\n\n    /**\n     * Creates a new empty series.  By default, items added to the series will\n     * be sorted into ascending order by x-value, and duplicate x-values will\n     * be allowed (these defaults can be modified with another constructor.\n     *\n     * @param key  the series key (<code>null</code> not permitted).\n     */\n    public XYSeries(Comparable key) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Constructs a new empty series, with the auto-sort flag set as requested,\n     * and duplicate values allowed.\n     *\n     * @param key  the series key (<code>null</code> not permitted).\n     * @param autoSort  a flag that controls whether or not the items in the\n     *                  series are sorted.\n     */\n    public XYSeries(Comparable key, boolean autoSort) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Constructs a new xy-series that contains no data.  You can specify\n     * whether or not duplicate x-values are allowed for the series.\n     *\n     * @param key  the series key (<code>null</code> not permitted).\n     * @param autoSort  a flag that controls whether or not the items in the\n     *                  series are sorted.\n     * @param allowDuplicateXValues  a flag that controls whether duplicate\n     *                               x-values are allowed.\n     */\n    public XYSeries(Comparable key,\n                    boolean autoSort,\n                    boolean allowDuplicateXValues) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the flag that controls whether the items in the series are\n     * automatically sorted.  There is no setter for this flag, it must be\n     * defined in the series constructor.\n     *\n     * @return A boolean.\n     */\n    public boolean getAutoSort() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns a flag that controls whether duplicate x-values are allowed.\n     * This flag can only be set in the constructor.\n     *\n     * @return A boolean.\n     */\n    public boolean getAllowDuplicateXValues() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the number of items in the series.\n     *\n     * @return The item count.\n     */\n    public int getItemCount() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the list of data items for the series (the list contains\n     * {@link XYDataItem} objects and is unmodifiable).\n     *\n     * @return The list of data items.\n     */\n    public List getItems() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the maximum number of items that will be retained in the series.\n     * The default value is <code>Integer.MAX_VALUE</code>.\n     *\n     * @return The maximum item count.\n     * @see #setMaximumItemCount(int)\n     */\n    public int getMaximumItemCount() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the maximum number of items that will be retained in the series.\n     * If you add a new item to the series such that the number of items will\n     * exceed the maximum item count, then the first element in the series is\n     * automatically removed, ensuring that the maximum item count is not\n     * exceeded.\n     * <p>\n     * Typically this value is set before the series is populated with data,\n     * but if it is applied later, it may cause some items to be removed from\n     * the series (in which case a {@link SeriesChangeEvent} will be sent to\n     * all registered listeners.\n     *\n     * @param maximum  the maximum number of items for the series.\n     */\n    public void setMaximumItemCount(int maximum) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Adds a data item to the series and sends a {@link SeriesChangeEvent} to\n     * all registered listeners.\n     *\n     * @param item  the (x, y) item (<code>null</code> not permitted).\n     */\n    public void add(XYDataItem item) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Adds a data item to the series and sends a {@link SeriesChangeEvent} to\n     * all registered listeners.\n     *\n     * @param x  the x value.\n     * @param y  the y value.\n     */\n    public void add(double x, double y) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Adds a data item to the series and, if requested, sends a\n     * {@link SeriesChangeEvent} to all registered listeners.\n     *\n     * @param x  the x value.\n     * @param y  the y value.\n     * @param notify  a flag that controls whether or not a\n     *                {@link SeriesChangeEvent} is sent to all registered\n     *                listeners.\n     */\n    public void add(double x, double y, boolean notify) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Adds a data item to the series and sends a {@link SeriesChangeEvent} to\n     * all registered listeners.  The unusual pairing of parameter types is to\n     * make it easier to add <code>null</code> y-values.\n     *\n     * @param x  the x value.\n     * @param y  the y value (<code>null</code> permitted).\n     */\n    public void add(double x, Number y) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Adds a data item to the series and, if requested, sends a\n     * {@link SeriesChangeEvent} to all registered listeners.  The unusual\n     * pairing of parameter types is to make it easier to add null y-values.\n     *\n     * @param x  the x value.\n     * @param y  the y value (<code>null</code> permitted).\n     * @param notify  a flag that controls whether or not a\n     *                {@link SeriesChangeEvent} is sent to all registered\n     *                listeners.\n     */\n    public void add(double x, Number y, boolean notify) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Adds a new data item to the series (in the correct position if the\n     * <code>autoSort</code> flag is set for the series) and sends a\n     * {@link SeriesChangeEvent} to all registered listeners.\n     * <P>\n     * Throws an exception if the x-value is a duplicate AND the\n     * allowDuplicateXValues flag is false.\n     *\n     * @param x  the x-value (<code>null</code> not permitted).\n     * @param y  the y-value (<code>null</code> permitted).\n     *\n     * @throws SeriesException if the x-value is a duplicate and the\n     *     <code>allowDuplicateXValues</code> flag is not set for this series.\n     */\n    public void add(Number x, Number y) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Adds new data to the series and, if requested, sends a\n     * {@link SeriesChangeEvent} to all registered listeners.\n     * <P>\n     * Throws an exception if the x-value is a duplicate AND the\n     * allowDuplicateXValues flag is false.\n     *\n     * @param x  the x-value (<code>null</code> not permitted).\n     * @param y  the y-value (<code>null</code> permitted).\n     * @param notify  a flag the controls whether or not a\n     *                {@link SeriesChangeEvent} is sent to all registered\n     *                listeners.\n     */\n    public void add(Number x, Number y, boolean notify) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Adds a data item to the series and, if requested, sends a\n     * {@link SeriesChangeEvent} to all registered listeners.\n     *\n     * @param item  the (x, y) item (<code>null</code> not permitted).\n     * @param notify  a flag that controls whether or not a\n     *                {@link SeriesChangeEvent} is sent to all registered\n     *                listeners.\n     */\n    public void add(XYDataItem item, boolean notify) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Deletes a range of items from the series and sends a\n     * {@link SeriesChangeEvent} to all registered listeners.\n     *\n     * @param start  the start index (zero-based).\n     * @param end  the end index (zero-based).\n     */\n    public void delete(int start, int end) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Removes the item at the specified index and sends a\n     * {@link SeriesChangeEvent} to all registered listeners.\n     *\n     * @param index  the index.\n     *\n     * @return The item removed.\n     */\n    public XYDataItem remove(int index) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Removes the item with the specified x-value and sends a\n     * {@link SeriesChangeEvent} to all registered listeners.\n     *\n     * @param x  the x-value.\n\n     * @return The item removed.\n     */\n    public XYDataItem remove(Number x) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Removes all data items from the series.\n     */\n    public void clear() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Return the data item with the specified index.\n     *\n     * @param index  the index.\n     *\n     * @return The data item with the specified index.\n     */\n    public XYDataItem getDataItem(int index) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the x-value at the specified index.\n     *\n     * @param index  the index (zero-based).\n     *\n     * @return The x-value (never <code>null</code>).\n     */\n    public Number getX(int index) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the y-value at the specified index.\n     *\n     * @param index  the index (zero-based).\n     *\n     * @return The y-value (possibly <code>null</code>).\n     */\n    public Number getY(int index) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Updates the value of an item in the series and sends a\n     * {@link SeriesChangeEvent} to all registered listeners.\n     *\n     * @param index  the item (zero based index).\n     * @param y  the new value (<code>null</code> permitted).\n     *\n     * @since 1.0.1\n     */\n    public void updateByIndex(int index, Number y) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Updates an item in the series.\n     *\n     * @param x  the x-value (<code>null</code> not permitted).\n     * @param y  the y-value (<code>null</code> permitted).\n     *\n     * @throws SeriesException if there is no existing item with the specified\n     *         x-value.\n     */\n    public void update(Number x, Number y) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Adds or updates an item in the series and sends a\n     * {@link SeriesChangeEvent} to all registered listeners.\n     *\n     * @param x  the x-value.\n     * @param y  the y-value.\n     *\n     * @return The item that was overwritten, if any.\n     *\n     * @since 1.0.10\n     */\n    public XYDataItem addOrUpdate(double x, double y) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Adds or updates an item in the series and sends a\n     * {@link SeriesChangeEvent} to all registered listeners.\n     *\n     * @param x  the x-value (<code>null</code> not permitted).\n     * @param y  the y-value (<code>null</code> permitted).\n     *\n     * @return A copy of the overwritten data item, or <code>null</code> if no\n     *         item was overwritten.\n     */\n    public XYDataItem addOrUpdate(Number x, Number y) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the index of the item with the specified x-value, or a negative\n     * index if the series does not contain an item with that x-value.  Be\n     * aware that for an unsorted series, the index is found by iterating\n     * through all items in the series.\n     *\n     * @param x  the x-value (<code>null</code> not permitted).\n     *\n     * @return The index.\n     */\n    public int indexOf(Number x) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns a new array containing the x and y values from this series.\n     *\n     * @return A new array containing the x and y values from this series.\n     *\n     * @since 1.0.4\n     */\n    public double[][] toArray() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns a clone of the series.\n     *\n     * @return A clone of the series.\n     *\n     * @throws CloneNotSupportedException if there is a cloning problem.\n     */\n    public Object clone() throws CloneNotSupportedException {\n        XYSeries clone = (XYSeries) super.clone();\n        clone.data = (List) ObjectUtilities.deepClone(this.data);\n        return clone;\n    }\n\n    /**\n     * Creates a new series by copying a subset of the data in this time series.\n     *\n     * @param start  the index of the first item to copy.\n     * @param end  the index of the last item to copy.\n     *\n     * @return A series containing a copy of this series from start until end.\n     *\n     * @throws CloneNotSupportedException if there is a cloning problem.\n     */\n    public XYSeries createCopy(int start, int end)\n        throws CloneNotSupportedException {\n\n        XYSeries copy = (XYSeries) super.clone();\n        copy.data = new java.util.ArrayList();\n        if (this.data.size() > 0) {\n            for (int index = start; index <= end; index++) {\n         //The specific code has been omitted, but there is no error\n        }\n        }\n        return copy;\n\n    }\n\n    /**\n     * Tests this series for equality with an arbitrary object.\n     *\n     * @param obj  the object to test against for equality\n     *             (<code>null</code> permitted).\n     *\n     * @return A boolean.\n     */\n    public boolean equals(Object obj) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns a hash code.\n     *\n     * @return A hash code.\n     */\n    public int hashCode() {\n         //The specific code has been omitted, but there is no error\n        }\n\n}"}