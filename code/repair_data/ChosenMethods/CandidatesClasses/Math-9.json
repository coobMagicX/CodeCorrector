{"Line": "public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n\n    /** Line direction. */\n    private Vector3D direction;\n\n    /** Line point closest to the origin. */\n    private Vector3D zero;\n\n    /** Build a line from two points.\n     * @param p1 first point belonging to the line (this can be any point)\n     * @param p2 second point belonging to the line (this can be any point, different from p1)\n     * @exception MathIllegalArgumentException if the points are equal\n     */\n    public Line(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException {\n        reset(p1, p2);\n    }\n\n    /** Copy constructor.\n     * <p>The created instance is completely independent from the\n     * original instance, it is a deep copy.</p>\n     * @param line line to copy\n     */\n    public Line(final Line line) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /** Reset the instance as if built from two points.\n     * @param p1 first point belonging to the line (this can be any point)\n     * @param p2 second point belonging to the line (this can be any point, different from p1)\n     * @exception MathIllegalArgumentException if the points are equal\n     */\n    public void reset(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException {\n        final Vector3D delta = p2.subtract(p1);\n        final double norm2 = delta.getNormSq();\n        if (norm2 == 0.0) {\n         //The specific code has been omitted, but there is no error\n        }\n        this.direction = new Vector3D(1.0 / FastMath.sqrt(norm2), delta);\n        zero = new Vector3D(1.0, p1, -p1.dotProduct(delta) / norm2, delta);\n    }\n\n    /** Get a line with reversed direction.\n     * @return a new instance, with reversed direction\n     */\n    public Line revert() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /** Get the normalized direction vector.\n     * @return normalized direction vector\n     */\n    public Vector3D getDirection() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /** Get the line point closest to the origin.\n     * @return line point closest to the origin\n     */\n    public Vector3D getOrigin() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /** Get the abscissa of a point with respect to the line.\n     * <p>The abscissa is 0 if the projection of the point and the\n     * projection of the frame origin on the line are the same\n     * point.</p>\n     * @param point point to check\n     * @return abscissa of the point\n     */\n    public double getAbscissa(final Vector3D point) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /** Get one point from the line.\n     * @param abscissa desired abscissa for the point\n     * @return one point belonging to the line, at specified abscissa\n     */\n    public Vector3D pointAt(final double abscissa) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /** {@inheritDoc}\n     * @see #getAbscissa(Vector3D)\n     */\n    public Vector1D toSubSpace(final Vector<Euclidean3D> point) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /** {@inheritDoc}\n     * @see #pointAt(double)\n     */\n    public Vector3D toSpace(final Vector<Euclidean1D> point) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /** Check if the instance is similar to another line.\n     * <p>Lines are considered similar if they contain the same\n     * points. This does not mean they are equal since they can have\n     * opposite directions.</p>\n     * @param line line to which instance should be compared\n     * @return true if the lines are similar\n     */\n    public boolean isSimilarTo(final Line line) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /** Check if the instance contains a point.\n     * @param p point to check\n     * @return true if p belongs to the line\n     */\n    public boolean contains(final Vector3D p) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /** Compute the distance between the instance and a point.\n     * @param p to check\n     * @return distance between the instance and the point\n     */\n    public double distance(final Vector3D p) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /** Compute the shortest distance between the instance and another line.\n     * @param line line to check against the instance\n     * @return shortest distance between the instance and the line\n     */\n    public double distance(final Line line) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /** Compute the point of the instance closest to another line.\n     * @param line line to check against the instance\n     * @return point of the instance closest to another line\n     */\n    public Vector3D closestPoint(final Line line) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /** Get the intersection point of the instance and another line.\n     * @param line other line\n     * @return intersection point of the instance and the other line\n     * or null if there are no intersection points\n     */\n    public Vector3D intersection(final Line line) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /** Build a sub-line covering the whole line.\n     * @return a sub-line covering the whole line\n     */\n    public SubLine wholeLine() {\n         //The specific code has been omitted, but there is no error\n        }\n\n}"}