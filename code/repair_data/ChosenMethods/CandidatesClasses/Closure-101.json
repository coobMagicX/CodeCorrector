{"CommandLineRunner": "public class CommandLineRunner extends\n    AbstractCommandLineRunner<Compiler, CompilerOptions> {\n\n  private static class Flags {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /**\n   * Set of options that can be used with the --formatting flag.\n   */\n  private static enum FormattingOption {\n    PRETTY_PRINT,\n    PRINT_INPUT_DELIMITER,\n    ;\n\n    private void applyToOptions(CompilerOptions options) {\n         //The specific code has been omitted, but there is no error\n        }\n  }\n\n  private final Flags flags = new Flags();\n\n  /**\n   * Create a new command-line runner. You should only need to call\n   * the constructor if you're extending this class. Otherwise, the main\n   * method should instantiate it.\n   */\n  protected CommandLineRunner(String[] args)\n      throws CmdLineException {\n    super();\n    initConfigFromFlags(args, System.err);\n  }\n\n  protected CommandLineRunner(String[] args, PrintStream out, PrintStream err)\n      throws CmdLineException {\n    super(out, err);\n    initConfigFromFlags(args, err);\n  }\n\n  private void initConfigFromFlags(\n      String[] args, PrintStream err)\n      throws CmdLineException {\n    // Args4j has a different format that the old command-line parser.\n    // So we use some voodoo to get the args into the format that args4j\n    // expects.\n    Pattern argPattern = Pattern.compile(\"(--[a-zA-Z_]+)=(.*)\");\n    Pattern quotesPattern = Pattern.compile(\"^['\\\"](.*)['\\\"]$\");\n    List<String> processedArgs = Lists.newArrayList();\n    for (String arg : args) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    CmdLineParser parser = new CmdLineParser(flags);\n    try {\n      parser.parseArgument(processedArgs.toArray(new String[] {}));\n    } catch (CmdLineException e) {\n         //The specific code has been omitted, but there is no error\n        }\n    getCommandLineConfig()\n        .setPrintTree(flags.print_tree)\n        .setComputePhaseOrdering(flags.compute_phase_ordering)\n        .setPrintAst(flags.print_ast)\n        .setPrintPassGraph(flags.print_pass_graph)\n        .setJscompDevMode(flags.jscomp_dev_mode)\n        .setLoggingLevel(flags.logging_level)\n        .setExterns(flags.externs)\n        .setJs(flags.js)\n        .setJsOutputFile(flags.js_output_file)\n        .setModule(flags.module)\n        .setVariableMapInputFile(flags.variable_map_input_file)\n        .setPropertyMapInputFile(flags.property_map_input_file)\n        .setVariableMapOutputFile(flags.variable_map_output_file)\n        .setCreateNameMapFiles(flags.create_name_map_files)\n        .setPropertyMapOutputFile(flags.property_map_output_file)\n        .setThirdParty(flags.third_party)\n        .setSummaryDetailLevel(flags.summary_detail_level)\n        .setOutputWrapper(flags.output_wrapper)\n        .setOutputWrapperMarker(flags.output_wrapper_marker)\n        .setModuleWrapper(flags.module_wrapper)\n        .setModuleOutputPathPrefix(flags.module_output_path_prefix)\n        .setCreateSourceMap(flags.create_source_map)\n        .setJscompError(flags.jscomp_error)\n        .setJscompWarning(flags.jscomp_warning)\n        .setJscompOff(flags.jscomp_off)\n        .setDefine(flags.define)\n        .setCharset(flags.charset);\n  }\n\n  @Override\n  protected CompilerOptions createOptions() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  @Override\n  protected Compiler createCompiler() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  @Override\n  protected List<JSSourceFile> createExterns() throws FlagUsageException,\n      IOException {\n    List<JSSourceFile> externs = super.createExterns();\n    if (!flags.use_only_custom_externs) {\n         //The specific code has been omitted, but there is no error\n        } else {\n      return externs;\n    }\n  }\n\n  /**\n   * @return a mutable list\n   * @throws IOException\n   */\n  private List<JSSourceFile> getDefaultExterns() throws IOException {\n    InputStream input = CommandLineRunner.class.getResourceAsStream(\n        \"/externs.zip\");\n    ZipInputStream zip = new ZipInputStream(input);\n    List<JSSourceFile> externs = Lists.newLinkedList();\n    for (ZipEntry entry = null; (entry = zip.getNextEntry()) != null; ) {\n      LimitInputStream entryStream = new LimitInputStream(zip, entry.getSize());\n      externs.add(JSSourceFile.fromInputStream(entry.getName(), entryStream));\n    }\n    return externs;\n  }\n\n  /**\n   * Runs the Compiler. Exits cleanly in the event of an error.\n   */\n  public static void main(String[] args) {\n         //The specific code has been omitted, but there is no error\n        }\n}", "Flags": "  private static class Flags {\n         //The specific code has been omitted, but there is no error\n        }", "BooleanOptionHandler": "    public static class BooleanOptionHandler extends OptionHandler<Boolean> {\n      private static final Set<String> TRUES =\n          Sets.newHashSet(\"true\", \"on\", \"yes\", \"1\");\n      private static final Set<String> FALSES =\n          Sets.newHashSet(\"false\", \"off\", \"no\", \"0\");\n\n      public BooleanOptionHandler(\n          CmdLineParser parser, OptionDef option,\n          Setter<? super Boolean> setter) {\n         //The specific code has been omitted, but there is no error\n        }\n\n      @Override\n      public int parseArguments(Parameters params) throws CmdLineException {\n        String param = params.getParameter(0);\n        if (param == null) {\n         //The specific code has been omitted, but there is no error\n        } else {\n          String lowerParam = param.toLowerCase();\n          if (TRUES.contains(lowerParam)) {\n            setter.addValue(true);\n          } else if (FALSES.contains(lowerParam)) {\n            setter.addValue(false);\n          } else {\n            throw new CmdLineException(owner,\n               \"Illegal boolean value: \" + lowerParam);\n          }\n          return 1;\n        }\n      }\n\n      @Override\n      public String getDefaultMetaVariable() {\n         //The specific code has been omitted, but there is no error\n        }\n    }"}