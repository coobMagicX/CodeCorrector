{"ClosureCodingConvention": "public class ClosureCodingConvention extends DefaultCodingConvention {\n\n  private static final long serialVersionUID = 1L;\n\n  static final DiagnosticType OBJECTLIT_EXPECTED = DiagnosticType.warning(\n      \"JSC_REFLECT_OBJECTLIT_EXPECTED\",\n      \"Object literal expected as second argument\");\n\n  /**\n   * Closure's goog.inherits adds a {@code superClass_} property to the\n   * subclass, and a {@code constructor} property.\n   */\n  @Override\n  public void applySubclassRelationship(FunctionType parentCtor,\n      FunctionType childCtor, SubclassType type) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /**\n   * {@inheritDoc}\n   *\n   * <p>Understands several different inheritance patterns that occur in\n   * Google code (various uses of {@code inherits} and {@code mixin}).\n   */\n  @Override\n  public SubclassRelationship getClassesDefinedByCall(Node callNode) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /**\n   * Determines whether the given node is a class-defining name, like\n   * \"inherits\" or \"mixin.\"\n   * @return The type of class-defining name, or null.\n   */\n  private SubclassType typeofClassDefiningName(Node callName) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  @Override\n  public boolean isSuperClassReference(String propertyName) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /**\n   * Given a qualified name node, returns whether \"prototype\" is at the end.\n   * For example:\n   * a.b.c => false\n   * a.b.c.prototype => true\n   */\n  private boolean endsWithPrototype(Node qualifiedName) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /**\n   * Exctracts X from goog.provide('X'), if the applied Node is goog.\n   *\n   * @return The extracted class name, or null.\n   */\n  @Override\n  public String extractClassNameIfProvide(Node node, Node parent){\n         //The specific code has been omitted, but there is no error\n        }\n\n  /**\n   * Exctracts X from goog.require('X'), if the applied Node is goog.\n   *\n   * @return The extracted class name, or null.\n   */\n  @Override\n  public String extractClassNameIfRequire(Node node, Node parent){\n         //The specific code has been omitted, but there is no error\n        }\n\n  private static String extractClassNameIfGoog(Node node, Node parent,\n      String functionName){\n         //The specific code has been omitted, but there is no error\n        }\n\n  /**\n   * Use closure's implementation.\n   * @return closure's function name for exporting properties.\n   */\n  @Override\n  public String getExportPropertyFunction() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /**\n   * Use closure's implementation.\n   * @return closure's function name for exporting symbols.\n   */\n  @Override\n  public String getExportSymbolFunction() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  @Override\n  public List<String> identifyTypeDeclarationCall(Node n) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  @Override\n  public String getAbstractMethodName() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  @Override\n  public String getSingletonGetterClassName(Node callNode) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  @Override\n  public void applySingletonGetter(FunctionType functionType,\n      FunctionType getterType, ObjectType objectType) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  @Override\n  public String getGlobalObject() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  private final Set<String> propertyTestFunctions = ImmutableSet.of(\n      \"goog.isDef\", \"goog.isNull\", \"goog.isDefAndNotNull\",\n      \"goog.isString\", \"goog.isNumber\", \"goog.isBoolean\",\n      \"goog.isFunction\", \"goog.isArray\", \"goog.isObject\");\n\n  @Override\n  public boolean isPropertyTestFunction(Node call) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  @Override\n  public ObjectLiteralCast getObjectLiteralCast(NodeTraversal t,\n      Node callNode) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  @Override\n  public boolean isOptionalParameter(Node parameter) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  @Override\n  public boolean isVarArgsParameter(Node parameter) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  @Override\n  public boolean isPrivate(String name) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  @Override\n  public Collection<AssertionFunctionSpec> getAssertionFunctions() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  @Override\n  public Bind describeFunctionBind(Node n) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  private Node safeNext(Node n) {\n         //The specific code has been omitted, but there is no error\n        }\n}"}