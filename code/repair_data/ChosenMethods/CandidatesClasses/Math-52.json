{"Rotation": "public class Rotation implements Serializable {\n\n  /** Identity rotation. */\n  public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);\n\n  /** Serializable version identifier */\n  private static final long serialVersionUID = -2153622329907944313L;\n\n  /** Scalar coordinate of the quaternion. */\n  private final double q0;\n\n  /** First coordinate of the vectorial part of the quaternion. */\n  private final double q1;\n\n  /** Second coordinate of the vectorial part of the quaternion. */\n  private final double q2;\n\n  /** Third coordinate of the vectorial part of the quaternion. */\n  private final double q3;\n\n  /** Build a rotation from the quaternion coordinates.\n   * <p>A rotation can be built from a <em>normalized</em> quaternion,\n   * i.e. a quaternion for which q<sub>0</sub><sup>2</sup> +\n   * q<sub>1</sub><sup>2</sup> + q<sub>2</sub><sup>2</sup> +\n   * q<sub>3</sub><sup>2</sup> = 1. If the quaternion is not normalized,\n   * the constructor can normalize it in a preprocessing step.</p>\n   * <p>Note that some conventions put the scalar part of the quaternion\n   * as the 4<sup>th</sup> component and the vector part as the first three\n   * components. This is <em>not</em> our convention. We put the scalar part\n   * as the first component.</p>\n   * @param q0 scalar part of the quaternion\n   * @param q1 first coordinate of the vectorial part of the quaternion\n   * @param q2 second coordinate of the vectorial part of the quaternion\n   * @param q3 third coordinate of the vectorial part of the quaternion\n   * @param needsNormalization if true, the coordinates are considered\n   * not to be normalized, a normalization preprocessing step is performed\n   * before using them\n   */\n  public Rotation(double q0, double q1, double q2, double q3,\n                  boolean needsNormalization) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /** Build a rotation from an axis and an angle.\n   * <p>We use the convention that angles are oriented according to\n   * the effect of the rotation on vectors around the axis. That means\n   * that if (i, j, k) is a direct frame and if we first provide +k as\n   * the axis and &pi;/2 as the angle to this constructor, and then\n   * {@link #applyTo(Vector3D) apply} the instance to +i, we will get\n   * +j.</p>\n   * <p>Another way to represent our convention is to say that a rotation\n   * of angle &theta; about the unit vector (x, y, z) is the same as the\n   * rotation build from quaternion components { cos(-&theta;/2),\n   * x * sin(-&theta;/2), y * sin(-&theta;/2), z * sin(-&theta;/2) }.\n   * Note the minus sign on the angle!</p>\n   * <p>On the one hand this convention is consistent with a vectorial\n   * perspective (moving vectors in fixed frames), on the other hand it\n   * is different from conventions with a frame perspective (fixed vectors\n   * viewed from different frames) like the ones used for example in spacecraft\n   * attitude community or in the graphics community.</p>\n   * @param axis axis around which to rotate\n   * @param angle rotation angle.\n   * @exception ArithmeticException if the axis norm is zero\n   */\n  public Rotation(Vector3D axis, double angle) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /** Build a rotation from a 3X3 matrix.\n\n   * <p>Rotation matrices are orthogonal matrices, i.e. unit matrices\n   * (which are matrices for which m.m<sup>T</sup> = I) with real\n   * coefficients. The module of the determinant of unit matrices is\n   * 1, among the orthogonal 3X3 matrices, only the ones having a\n   * positive determinant (+1) are rotation matrices.</p>\n\n   * <p>When a rotation is defined by a matrix with truncated values\n   * (typically when it is extracted from a technical sheet where only\n   * four to five significant digits are available), the matrix is not\n   * orthogonal anymore. This constructor handles this case\n   * transparently by using a copy of the given matrix and applying a\n   * correction to the copy in order to perfect its orthogonality. If\n   * the Frobenius norm of the correction needed is above the given\n   * threshold, then the matrix is considered to be too far from a\n   * true rotation matrix and an exception is thrown.<p>\n\n   * @param m rotation matrix\n   * @param threshold convergence threshold for the iterative\n   * orthogonality correction (convergence is reached when the\n   * difference between two steps of the Frobenius norm of the\n   * correction is below this threshold)\n\n   * @exception NotARotationMatrixException if the matrix is not a 3X3\n   * matrix, or if it cannot be transformed into an orthogonal matrix\n   * with the given threshold, or if the determinant of the resulting\n   * orthogonal matrix is negative\n\n   */\n  public Rotation(double[][] m, double threshold)\n    throws NotARotationMatrixException {\n\n    // dimension check\n    if ((m.length != 3) || (m[0].length != 3) ||\n        (m[1].length != 3) || (m[2].length != 3)) {\n      throw new NotARotationMatrixException(\n              LocalizedFormats.ROTATION_MATRIX_DIMENSIONS,\n              m.length, m[0].length);\n    }\n\n    // compute a \"close\" orthogonal matrix\n    double[][] ort = orthogonalizeMatrix(m, threshold);\n\n    // check the sign of the determinant\n    double det = ort[0][0] * (ort[1][1] * ort[2][2] - ort[2][1] * ort[1][2]) -\n                 ort[1][0] * (ort[0][1] * ort[2][2] - ort[2][1] * ort[0][2]) +\n                 ort[2][0] * (ort[0][1] * ort[1][2] - ort[1][1] * ort[0][2]);\n    if (det < 0.0) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    // There are different ways to compute the quaternions elements\n    // from the matrix. They all involve computing one element from\n    // the diagonal of the matrix, and computing the three other ones\n    // using a formula involving a division by the first element,\n    // which unfortunately can be zero. Since the norm of the\n    // quaternion is 1, we know at least one element has an absolute\n    // value greater or equal to 0.5, so it is always possible to\n    // select the right formula and avoid division by zero and even\n    // numerical inaccuracy. Checking the elements in turn and using\n    // the first one greater than 0.45 is safe (this leads to a simple\n    // test since qi = 0.45 implies 4 qi^2 - 1 = -0.19)\n    double s = ort[0][0] + ort[1][1] + ort[2][2];\n    if (s > -0.19) {\n         //The specific code has been omitted, but there is no error\n        } else {\n      s = ort[0][0] - ort[1][1] - ort[2][2];\n      if (s > -0.19) {\n         //The specific code has been omitted, but there is no error\n        } else {\n        s = ort[1][1] - ort[0][0] - ort[2][2];\n        if (s > -0.19) {\n         //The specific code has been omitted, but there is no error\n        } else {\n          // compute q3 and deduce q0, q1 and q2\n          s = ort[2][2] - ort[0][0] - ort[1][1];\n          q3 = 0.5 * FastMath.sqrt(s + 1.0);\n          double inv = 0.25 / q3;\n          q0 = inv * (ort[0][1] - ort[1][0]);\n          q1 = inv * (ort[0][2] + ort[2][0]);\n          q2 = inv * (ort[2][1] + ort[1][2]);\n        }\n      }\n    }\n\n  }\n\n  /** Build the rotation that transforms a pair of vector into another pair.\n\n   * <p>Except for possible scale factors, if the instance were applied to\n   * the pair (u<sub>1</sub>, u<sub>2</sub>) it will produce the pair\n   * (v<sub>1</sub>, v<sub>2</sub>).</p>\n\n   * <p>If the angular separation between u<sub>1</sub> and u<sub>2</sub> is\n   * not the same as the angular separation between v<sub>1</sub> and\n   * v<sub>2</sub>, then a corrected v'<sub>2</sub> will be used rather than\n   * v<sub>2</sub>, the corrected vector will be in the (v<sub>1</sub>,\n   * v<sub>2</sub>) plane.</p>\n\n   * @param u1 first vector of the origin pair\n   * @param u2 second vector of the origin pair\n   * @param v1 desired image of u1 by the rotation\n   * @param v2 desired image of u2 by the rotation\n   * @exception IllegalArgumentException if the norm of one of the vectors is zero\n   */\n  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /** Build one of the rotations that transform one vector into another one.\n\n   * <p>Except for a possible scale factor, if the instance were\n   * applied to the vector u it will produce the vector v. There is an\n   * infinite number of such rotations, this constructor choose the\n   * one with the smallest associated angle (i.e. the one whose axis\n   * is orthogonal to the (u, v) plane). If u and v are colinear, an\n   * arbitrary rotation axis is chosen.</p>\n\n   * @param u origin vector\n   * @param v desired image of u by the rotation\n   * @exception IllegalArgumentException if the norm of one of the vectors is zero\n   */\n  public Rotation(Vector3D u, Vector3D v) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /** Build a rotation from three Cardan or Euler elementary rotations.\n\n   * <p>Cardan rotations are three successive rotations around the\n   * canonical axes X, Y and Z, each axis being used once. There are\n   * 6 such sets of rotations (XYZ, XZY, YXZ, YZX, ZXY and ZYX). Euler\n   * rotations are three successive rotations around the canonical\n   * axes X, Y and Z, the first and last rotations being around the\n   * same axis. There are 6 such sets of rotations (XYX, XZX, YXY,\n   * YZY, ZXZ and ZYZ), the most popular one being ZXZ.</p>\n   * <p>Beware that many people routinely use the term Euler angles even\n   * for what really are Cardan angles (this confusion is especially\n   * widespread in the aerospace business where Roll, Pitch and Yaw angles\n   * are often wrongly tagged as Euler angles).</p>\n\n   * @param order order of rotations to use\n   * @param alpha1 angle of the first elementary rotation\n   * @param alpha2 angle of the second elementary rotation\n   * @param alpha3 angle of the third elementary rotation\n   */\n  public Rotation(RotationOrder order,\n                  double alpha1, double alpha2, double alpha3) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /** Revert a rotation.\n   * Build a rotation which reverse the effect of another\n   * rotation. This means that if r(u) = v, then r.revert(v) = u. The\n   * instance is not changed.\n   * @return a new rotation whose effect is the reverse of the effect\n   * of the instance\n   */\n  public Rotation revert() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /** Get the scalar coordinate of the quaternion.\n   * @return scalar coordinate of the quaternion\n   */\n  public double getQ0() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /** Get the first coordinate of the vectorial part of the quaternion.\n   * @return first coordinate of the vectorial part of the quaternion\n   */\n  public double getQ1() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /** Get the second coordinate of the vectorial part of the quaternion.\n   * @return second coordinate of the vectorial part of the quaternion\n   */\n  public double getQ2() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /** Get the third coordinate of the vectorial part of the quaternion.\n   * @return third coordinate of the vectorial part of the quaternion\n   */\n  public double getQ3() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /** Get the normalized axis of the rotation.\n   * @return normalized axis of the rotation\n   * @see #Rotation(Vector3D, double)\n   */\n  public Vector3D getAxis() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /** Get the angle of the rotation.\n   * @return angle of the rotation (between 0 and &pi;)\n   * @see #Rotation(Vector3D, double)\n   */\n  public double getAngle() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /** Get the Cardan or Euler angles corresponding to the instance.\n\n   * <p>The equations show that each rotation can be defined by two\n   * different values of the Cardan or Euler angles set. For example\n   * if Cardan angles are used, the rotation defined by the angles\n   * a<sub>1</sub>, a<sub>2</sub> and a<sub>3</sub> is the same as\n   * the rotation defined by the angles &pi; + a<sub>1</sub>, &pi;\n   * - a<sub>2</sub> and &pi; + a<sub>3</sub>. This method implements\n   * the following arbitrary choices:</p>\n   * <ul>\n   *   <li>for Cardan angles, the chosen set is the one for which the\n   *   second angle is between -&pi;/2 and &pi;/2 (i.e its cosine is\n   *   positive),</li>\n   *   <li>for Euler angles, the chosen set is the one for which the\n   *   second angle is between 0 and &pi; (i.e its sine is positive).</li>\n   * </ul>\n\n   * <p>Cardan and Euler angle have a very disappointing drawback: all\n   * of them have singularities. This means that if the instance is\n   * too close to the singularities corresponding to the given\n   * rotation order, it will be impossible to retrieve the angles. For\n   * Cardan angles, this is often called gimbal lock. There is\n   * <em>nothing</em> to do to prevent this, it is an intrinsic problem\n   * with Cardan and Euler representation (but not a problem with the\n   * rotation itself, which is perfectly well defined). For Cardan\n   * angles, singularities occur when the second angle is close to\n   * -&pi;/2 or +&pi;/2, for Euler angle singularities occur when the\n   * second angle is close to 0 or &pi;, this implies that the identity\n   * rotation is always singular for Euler angles!</p>\n\n   * @param order rotation order to use\n   * @return an array of three angles, in the order specified by the set\n   * @exception CardanEulerSingularityException if the rotation is\n   * singular with respect to the angles set specified\n   */\n  public double[] getAngles(RotationOrder order)\n    throws CardanEulerSingularityException {\n\n    if (order == RotationOrder.XYZ) {\n         //The specific code has been omitted, but there is no error\n        } else if (order == RotationOrder.XZY) {\n         //The specific code has been omitted, but there is no error\n        } else if (order == RotationOrder.YXZ) {\n         //The specific code has been omitted, but there is no error\n        } else if (order == RotationOrder.YZX) {\n         //The specific code has been omitted, but there is no error\n        } else if (order == RotationOrder.ZXY) {\n         //The specific code has been omitted, but there is no error\n        } else if (order == RotationOrder.ZYX) {\n         //The specific code has been omitted, but there is no error\n        } else if (order == RotationOrder.XYX) {\n         //The specific code has been omitted, but there is no error\n        } else if (order == RotationOrder.XZX) {\n         //The specific code has been omitted, but there is no error\n        } else if (order == RotationOrder.YXY) {\n         //The specific code has been omitted, but there is no error\n        } else if (order == RotationOrder.YZY) {\n         //The specific code has been omitted, but there is no error\n        } else if (order == RotationOrder.ZXZ) {\n         //The specific code has been omitted, but there is no error\n        } else { // last possibility is ZYZ\n\n      // r (Vector3D.plusK) coordinates are :\n      //  cos (psi1) sin (theta), sin (psi1) sin (theta), cos (theta)\n      // (-r) (Vector3D.plusK) coordinates are :\n      // -sin (theta) cos (psi2), sin (theta) sin (psi2), cos (theta)\n      // and we can choose to have theta in the interval [0 ; PI]\n      Vector3D v1 = applyTo(Vector3D.PLUS_K);\n      Vector3D v2 = applyInverseTo(Vector3D.PLUS_K);\n      if ((v2.getZ() < -0.9999999999) || (v2.getZ() > 0.9999999999)) {\n        throw new CardanEulerSingularityException(false);\n      }\n      return new double[] {\n        FastMath.atan2(v1.getY(), v1.getX()),\n        FastMath.acos(v2.getZ()),\n        FastMath.atan2(v2.getY(), -v2.getX())\n      };\n\n    }\n\n  }\n\n  /** Get the 3X3 matrix corresponding to the instance\n   * @return the matrix corresponding to the instance\n   */\n  public double[][] getMatrix() {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /** Apply the rotation to a vector.\n   * @param u vector to apply the rotation to\n   * @return a new vector which is the image of u by the rotation\n   */\n  public Vector3D applyTo(Vector3D u) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /** Apply the inverse of the rotation to a vector.\n   * @param u vector to apply the inverse of the rotation to\n   * @return a new vector which such that u is its image by the rotation\n   */\n  public Vector3D applyInverseTo(Vector3D u) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /** Apply the instance to another rotation.\n   * Applying the instance to a rotation is computing the composition\n   * in an order compliant with the following rule : let u be any\n   * vector and v its image by r (i.e. r.applyTo(u) = v), let w be the image\n   * of v by the instance (i.e. applyTo(v) = w), then w = comp.applyTo(u),\n   * where comp = applyTo(r).\n   * @param r rotation to apply the rotation to\n   * @return a new rotation which is the composition of r by the instance\n   */\n  public Rotation applyTo(Rotation r) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /** Apply the inverse of the instance to another rotation.\n   * Applying the inverse of the instance to a rotation is computing\n   * the composition in an order compliant with the following rule :\n   * let u be any vector and v its image by r (i.e. r.applyTo(u) = v),\n   * let w be the inverse image of v by the instance\n   * (i.e. applyInverseTo(v) = w), then w = comp.applyTo(u), where\n   * comp = applyInverseTo(r).\n   * @param r rotation to apply the rotation to\n   * @return a new rotation which is the composition of r by the inverse\n   * of the instance\n   */\n  public Rotation applyInverseTo(Rotation r) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  /** Perfect orthogonality on a 3X3 matrix.\n   * @param m initial matrix (not exactly orthogonal)\n   * @param threshold convergence threshold for the iterative\n   * orthogonality correction (convergence is reached when the\n   * difference between two steps of the Frobenius norm of the\n   * correction is below this threshold)\n   * @return an orthogonal matrix close to m\n   * @exception NotARotationMatrixException if the matrix cannot be\n   * orthogonalized with the given threshold after 10 iterations\n   */\n  private double[][] orthogonalizeMatrix(double[][] m, double threshold)\n    throws NotARotationMatrixException {\n    double[] m0 = m[0];\n    double[] m1 = m[1];\n    double[] m2 = m[2];\n    double x00 = m0[0];\n    double x01 = m0[1];\n    double x02 = m0[2];\n    double x10 = m1[0];\n    double x11 = m1[1];\n    double x12 = m1[2];\n    double x20 = m2[0];\n    double x21 = m2[1];\n    double x22 = m2[2];\n    double fn = 0;\n    double fn1;\n\n    double[][] o = new double[3][3];\n    double[] o0 = o[0];\n    double[] o1 = o[1];\n    double[] o2 = o[2];\n\n    // iterative correction: Xn+1 = Xn - 0.5 * (Xn.Mt.Xn - M)\n    int i = 0;\n    while (++i < 11) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    // the algorithm did not converge after 10 iterations\n    throw new NotARotationMatrixException(\n            LocalizedFormats.UNABLE_TO_ORTHOGONOLIZE_MATRIX,\n            i - 1);\n  }\n\n  /** Compute the <i>distance</i> between two rotations.\n   * <p>The <i>distance</i> is intended here as a way to check if two\n   * rotations are almost similar (i.e. they transform vectors the same way)\n   * or very different. It is mathematically defined as the angle of\n   * the rotation r that prepended to one of the rotations gives the other\n   * one:</p>\n   * <pre>\n   *        r<sub>1</sub>(r) = r<sub>2</sub>\n   * </pre>\n   * <p>This distance is an angle between 0 and &pi;. Its value is the smallest\n   * possible upper bound of the angle in radians between r<sub>1</sub>(v)\n   * and r<sub>2</sub>(v) for all possible vectors v. This upper bound is\n   * reached for some v. The distance is equal to 0 if and only if the two\n   * rotations are identical.</p>\n   * <p>Comparing two rotations should always be done using this value rather\n   * than for example comparing the components of the quaternions. It is much\n   * more stable, and has a geometric meaning. Also comparing quaternions\n   * components is error prone since for example quaternions (0.36, 0.48, -0.48, -0.64)\n   * and (-0.36, -0.48, 0.48, 0.64) represent exactly the same rotation despite\n   * their components are different (they are exact opposites).</p>\n   * @param r1 first rotation\n   * @param r2 second rotation\n   * @return <i>distance</i> between r1 and r2\n   */\n  public static double distance(Rotation r1, Rotation r2) {\n         //The specific code has been omitted, but there is no error\n        }\n\n}"}