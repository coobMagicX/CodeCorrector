{"Frequency": "public class Frequency implements Serializable {\n    \n    /** Serializable version identifier */\n    private static final long serialVersionUID = -3845586908418844111L;\n\n    /** underlying collection */\n    private final TreeMap freqTable;\n\n    /**\n     * Default constructor.\n     */\n    public Frequency() {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Constructor allowing values Comparator to be specified.\n     * \n     * @param comparator Comparator used to order values\n     */\n    public Frequency(Comparator comparator) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Return a string representation of this frequency\n     * distribution.\n     * \n     * @return a string representation.\n     */\n    @Override\n    public String toString() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Adds 1 to the frequency count for v.\n     * <p>\n     * If other objects have already been added to this Frequency, v must\n     * be comparable to those that have already been added.\n     * </p>\n     * \n     * @param v the value to add.\n     * @throws IllegalArgumentException if <code>v</code> is not comparable with previous entries\n     * @throws ClassCastException if <code>v</code> is not Comparable\n     * @deprecated use {@link #addValue(Comparable)} instead\n     */\n    @Deprecated\n    public void addValue(Object v) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Adds 1 to the frequency count for v.\n     * \n     * @param v the value to add.\n     */\n    public void addValue(int v) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Adds 1 to the frequency count for v.\n     * \n     * @param v the value to add.\n     */\n    public void addValue(Integer v) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Adds 1 to the frequency count for v.\n     * \n     * @param v the value to add.\n     */\n    public void addValue(long v) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Adds 1 to the frequency count for v.\n     * \n     * @param v the value to add.\n     */\n    public void addValue(char v) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /** Clears the frequency table */\n    public void clear() {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Returns an Iterator over the set of values that have been added.\n     * <p>\n     * If added values are integral (i.e., integers, longs, Integers, or Longs), \n     * they are converted to Longs when they are added, so the objects returned\n     * by the Iterator will in this case be Longs.</p>\n     * \n     * @return values Iterator\n     */\n    public Iterator valuesIterator() {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    //-------------------------------------------------------------------------\n    \n    /**\n     * Returns the sum of all frequencies.\n     * \n     * @return the total frequency count.\n     */\n    public long getSumFreq() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the number of values = v.\n     * Returns 0 if the value is not comparable.\n     * \n     * @param v the value to lookup.\n     * @return the frequency of v.\n     */\n    public long getCount(Object v) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the number of values = v.\n     * \n     * @param v the value to lookup.\n     * @return the frequency of v.\n     */\n    public long getCount(int v) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Returns the number of values = v.\n     * \n     * @param v the value to lookup.\n     * @return the frequency of v.\n     */\n    public long getCount(long v) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Returns the number of values = v.\n     * \n     * @param v the value to lookup.\n     * @return the frequency of v.\n     */\n    public long getCount(char v) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    //-------------------------------------------------------------\n\n    /**\n      * Returns the percentage of values that are equal to v\n     * (as a proportion between 0 and 1).\n     * <p>\n     * Returns <code>Double.NaN</code> if no values have been added.</p>\n     * \n     * @param v the value to lookup\n     * @return the proportion of values equal to v\n     */\n    public double getPct(Object v) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Returns the percentage of values that are equal to v\n     * (as a proportion between 0 and 1).\n     * \n     * @param v the value to lookup\n     * @return the proportion of values equal to v\n     */\n    public double getPct(int v) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Returns the percentage of values that are equal to v\n     * (as a proportion between 0 and 1).\n     * \n     * @param v the value to lookup\n     * @return the proportion of values equal to v\n     */\n    public double getPct(long v) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Returns the percentage of values that are equal to v\n     * (as a proportion between 0 and 1).\n     * \n     * @param v the value to lookup\n     * @return the proportion of values equal to v\n     */\n    public double getPct(char v) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    //-----------------------------------------------------------------------------------------\n    \n    /**\n     * Returns the cumulative frequency of values less than or equal to v.\n     * <p>\n     * Returns 0 if v is not comparable to the values set.</p>\n     * \n     * @param v the value to lookup.\n     * @return the proportion of values equal to v\n     */\n    public long getCumFreq(Object v) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n     /**\n     * Returns the cumulative frequency of values less than or equal to v.\n     * <p>\n     * Returns 0 if v is not comparable to the values set.</p>\n     * \n     * @param v the value to lookup\n     * @return the proportion of values equal to v\n     */\n    public long getCumFreq(int v) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n     /**\n     * Returns the cumulative frequency of values less than or equal to v.\n     * <p>\n     * Returns 0 if v is not comparable to the values set.</p>\n     * \n     * @param v the value to lookup\n     * @return the proportion of values equal to v\n     */\n    public long getCumFreq(long v) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Returns the cumulative frequency of values less than or equal to v.\n     * <p>\n     * Returns 0 if v is not comparable to the values set.</p>\n     * \n     * @param v the value to lookup\n     * @return the proportion of values equal to v\n     */\n    public long getCumFreq(char v) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    //----------------------------------------------------------------------------------------------\n    \n    /**\n     * Returns the cumulative percentage of values less than or equal to v\n     * (as a proportion between 0 and 1).\n     * <p>\n     * Returns <code>Double.NaN</code> if no values have been added.\n     * Returns 0 if at least one value has been added, but v is not comparable\n     * to the values set.</p>\n     * \n     * @param v the value to lookup\n     * @return the proportion of values less than or equal to v\n     */\n    public double getCumPct(Object v) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Returns the cumulative percentage of values less than or equal to v\n     * (as a proportion between 0 and 1).\n     * <p>\n     * Returns 0 if v is not comparable to the values set.</p>\n     * \n     * @param v the value to lookup\n     * @return the proportion of values less than or equal to v\n     */\n    public double getCumPct(int v) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Returns the cumulative percentage of values less than or equal to v\n     * (as a proportion between 0 and 1).\n     * <p>\n     * Returns 0 if v is not comparable to the values set.</p>\n     * \n     * @param v the value to lookup\n     * @return the proportion of values less than or equal to v\n     */\n    public double getCumPct(long v) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Returns the cumulative percentage of values less than or equal to v\n     * (as a proportion between 0 and 1).\n     * <p>\n     * Returns 0 if v is not comparable to the values set.</p>\n     * \n     * @param v the value to lookup\n     * @return the proportion of values less than or equal to v\n     */\n    public double getCumPct(char v) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * A Comparator that compares comparable objects using the\n     * natural order.  Copied from Commons Collections ComparableComparator.\n     */\n    private static class NaturalComparator implements Comparator, Serializable {\n\n        /** Serializable version identifier */\n        private static final long serialVersionUID = -3852193713161395148L;\n\n        /**\n         * Compare the two {@link Comparable Comparable} arguments.\n         * This method is equivalent to:\n         * <pre>(({@link Comparable Comparable})o1).{@link Comparable#compareTo compareTo}(o2)</pre>\n         * \n         * @param  o1 the first object \n         * @param  o2 the second object\n         * @return  result of comparison\n         * @throws NullPointerException when <i>o1</i> is <code>null</code>, \n         *         or when <code>((Comparable)o1).compareTo(o2)</code> does\n         * @throws ClassCastException when <i>o1</i> is not a {@link Comparable Comparable}, \n         *         or when <code>((Comparable)o1).compareTo(o2)</code> does\n         */\n        public int compare(Object o1, Object o2) {\n         //The specific code has been omitted, but there is no error\n        }\n    }\n}", "NaturalComparator": "    private static class NaturalComparator implements Comparator, Serializable {\n\n        /** Serializable version identifier */\n        private static final long serialVersionUID = -3852193713161395148L;\n\n        /**\n         * Compare the two {@link Comparable Comparable} arguments.\n         * This method is equivalent to:\n         * <pre>(({@link Comparable Comparable})o1).{@link Comparable#compareTo compareTo}(o2)</pre>\n         * \n         * @param  o1 the first object \n         * @param  o2 the second object\n         * @return  result of comparison\n         * @throws NullPointerException when <i>o1</i> is <code>null</code>, \n         *         or when <code>((Comparable)o1).compareTo(o2)</code> does\n         * @throws ClassCastException when <i>o1</i> is not a {@link Comparable Comparable}, \n         *         or when <code>((Comparable)o1).compareTo(o2)</code> does\n         */\n        public int compare(Object o1, Object o2) {\n         //The specific code has been omitted, but there is no error\n        }\n    }"}