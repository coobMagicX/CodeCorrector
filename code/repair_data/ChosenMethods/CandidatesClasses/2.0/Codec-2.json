{"Base64": "public class Base64 implements BinaryEncoder, BinaryDecoder {\n    /**\n     * Chunk size per RFC 2045 section 6.8.\n     * \n     * <p>\n     * The {@value} character limit does not count the trailing CRLF, but counts all other characters, including any\n     * equal signs.\n     * </p>\n     * \n     * @see <a href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045 section 6.8</a>\n     */\n    static final int CHUNK_SIZE = 76;\n\n    /**\n     * Chunk separator per RFC 2045 section 2.1.\n     * \n     * @see <a href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045 section 2.1</a>\n     */\n    static final byte[] CHUNK_SEPARATOR = {'\\r','\\n'};\n\n    /**\n     * This array is a lookup table that translates 6-bit positive integer\n     * index values into their \"Base64 Alphabet\" equivalents as specified\n     * in Table 1 of RFC 2045.\n     *\n     * Thanks to \"commons\" project in ws.apache.org for this code. \n     * http://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/\n     */\n    private static final byte[] STANDARD_ENCODE_TABLE = {\n            'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',\n            'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',\n            'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\n            'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/'\n    };\n\n    /**\n     * This is a copy of the STANDARD_ENCODE_TABLE above, but with + and /\n     * changed to - and _ to make the encoded Base64 results more URL-SAFE.\n     * This table is only used when the Base64's mode is set to URL-SAFE.\n     */    \n    private static final byte[] URL_SAFE_ENCODE_TABLE = {\n            'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',\n            'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',\n            'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\n            'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '-', '_'\n    };\n\n    /**\n     * Byte used to pad output.\n     */\n    private static final byte PAD = '=';\n\n    /**\n     * This array is a lookup table that translates Unicode characters\n     * drawn from the \"Base64 Alphabet\" (as specified in Table 1 of RFC 2045)\n     * into their 6-bit positive integer equivalents.  Characters that\n     * are not in the Base64 alphabet but fall within the bounds of the\n     * array are translated to -1.\n     *\n     * Note:  '+' and '-' both decode to 62.  '/' and '_' both decode to 63.\n     * This means decoder seamlessly handles both URL_SAFE and STANDARD base64.\n     * (The encoder, on the other hand, needs to know ahead of time what to emit).\n     *\n     * Thanks to \"commons\" project in ws.apache.org for this code.\n     * http://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/ \n     */\n    private static final byte[] DECODE_TABLE = {\n            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n            -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, 62, -1, 63, 52, 53, 54,\n            55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4,\n            5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\n            24, 25, -1, -1, -1, -1, 63, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34,\n            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51\n    };\n\n    /** Mask used to extract 6 bits, used when encoding */\n    private static final int MASK_6BITS = 0x3f;\n\n    /** Mask used to extract 8 bits, used in decoding base64 bytes */\n    private static final int MASK_8BITS = 0xff;\n\n    // The static final fields above are used for the original static byte[] methods on Base64.\n    // The private member fields below are used with the new streaming approach, which requires\n    // some state be preserved between calls of encode() and decode().\n\n    /**\n     * Encode table to use:  either STANDARD or URL_SAFE.  Note:  the DECODE_TABLE above remains static\n     * because it is able to decode both STANDARD and URL_SAFE streams, but the encodeTable must be a member\n     * variable so we can switch between the two modes.\n     */\n    private final byte[] encodeTable;\n\n    /**\n     * Line length for encoding.  Not used when decoding.  A value of zero or less implies\n     * no chunking of the base64 encoded data.\n     */\n    private final int lineLength;\n\n    /**\n     * Line separator for encoding.  Not used when decoding.  Only used if lineLength > 0.\n     */\n    private final byte[] lineSeparator;\n\n    /**\n     * Convenience variable to help us determine when our buffer is going to run out of\n     * room and needs resizing.  <code>decodeSize = 3 + lineSeparator.length;</code>\n     */\n    private final int decodeSize;\n\n    /**\n     * Convenience variable to help us determine when our buffer is going to run out of\n     * room and needs resizing.  <code>encodeSize = 4 + lineSeparator.length;</code>\n     */\n    private final int encodeSize;\n\n    /**\n     * Buffer for streaming. \n     */\n    private byte[] buf;\n\n    /**\n     * Position where next character should be written in the buffer.\n     */\n    private int pos;\n\n    /**\n     * Position where next character should be read from the buffer.\n     */\n    private int readPos;\n\n    /**\n     * Variable tracks how many characters have been written to the current line.\n     * Only used when encoding.  We use it to make sure each encoded line never\n     * goes beyond lineLength (if lineLength > 0).\n     */\n    private int currentLinePos;\n\n    /**\n     * Writes to the buffer only occur after every 3 reads when encoding, an\n     * every 4 reads when decoding.  This variable helps track that.\n     */\n    private int modulus;\n\n    /**\n     * Boolean flag to indicate the EOF has been reached.  Once EOF has been\n     * reached, this Base64 object becomes useless, and must be thrown away.\n     */\n    private boolean eof;\n\n    /**\n     * Place holder for the 3 bytes we're dealing with for our base64 logic.\n     * Bitwise operations store and extract the base64 encoding or decoding from\n     * this variable.\n     */\n    private int x;\n\n    /**\n     * Sets state for decoding and encoding.\n     * <p>\n     * When encoding the line length is 76, the line separator is CRLF, and we use the STANDARD_ENCODE_TABLE.\n     * </p>\n     * \n     * <p>\n     * When decoding all variants can be decoded.\n     * </p>\n     */\n    public Base64() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Same as default constructor (line length is 76, line separator is CRLF), but URL-SAFE mode for encoding is\n     * supplied.\n     * \n     * When decoding: all variants can be decoded.\n     * \n     * @param urlSafe\n     *            true if URL-SAFE encoding should be performed. In most situations this should be set to false.\n     */\n    public Base64(boolean urlSafe) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>\n     * Sets the line length when encoding (line separator is still CRLF). All forms of data can be decoded.\n     * </p>\n     * <p>\n     * Note: line lengths that aren't multiples of 4 will still essentially end up being multiples of 4 in the encoded\n     * data.\n     * </p>\n     * \n     * @param lineLength\n     *            each line of encoded data will be at most this long (rounded up to nearest multiple of 4). If\n     *            lineLength <= 0, then the output will not be divided into lines (chunks). Ignored when decoding.\n     */\n    public Base64(int lineLength) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>\n     * Sets the line length and line separator when encoding. All forms of data can be decoded.\n     * </p>\n     * <p>\n     * Note: line lengths that aren't multiples of 4 will still essentially end up being multiples of 4 in the encoded\n     * data.\n     * </p>\n     * \n     * @param lineLength\n     *            Each line of encoded data will be at most this long (rounded up to nearest multiple of 4). Ignored\n     *            when decoding. If <= 0, then output will not be divided into lines (chunks).\n     * @param lineSeparator\n     *            Each line of encoded data will end with this sequence of bytes.\n     * @throws IllegalArgumentException\n     *             The provided lineSeparator included some base64 characters. That's not going to work!\n     */\n    public Base64(int lineLength, byte[] lineSeparator) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>\n     * Consumer can use this constructor to choose a different lineLength,\n     * lineSeparator, and whether to use URL-SAFE mode when encoding.\n     * All forms of data can be decoded.\n     * </p><p>\n     * Note:  lineLengths that aren't multiples of 4 will still essentially\n     * end up being multiples of 4 in the encoded data.\n     * </p>\n     * @param lineLength    Each line of encoded data will be at most this long\n     *                      (rounded up to nearest multiple of 4).  Ignored when decoding.\n     *                      If <= 0, then output will not be divided into lines (chunks).\n     * @param lineSeparator Each line of encoded data will end with this\n     *                      sequence of bytes.\n     *                      If lineLength <= 0, then the lineSeparator is not used.\n     * @param urlSafe       Instead of emitting '+' and '/' we emit '-' and '_' respectively.\n     *                      urlSafe is only applied to \"encode\" operations.  Decoding seamlessly\n     *                      handles both modes.\n     *\n     * @throws IllegalArgumentException The provided lineSeparator included\n     *                                  some base64 characters.  That's not going to work!\n     */\n    public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns our current encode mode. True if we're URL-SAFE, false otherwise.\n     * \n     * @return true if we're in URL-SAFE mode, false otherwise.\n     */\n    public boolean isUrlSafe() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns true if this Base64 object has buffered data for reading.\n     * \n     * @return true if there is Base64 object still available for reading.\n     */\n    boolean hasData() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the amount of buffered data available for reading.\n     * \n     * @return The amount of buffered data available for reading.\n     */\n    int avail() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /** Doubles our buffer. */\n    private void resizeBuf() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Extracts buffered data into the provided byte[] array, starting\n     * at position bPos, up to a maximum of bAvail bytes.  Returns how\n     * many bytes were actually extracted.\n     *\n     * @param b      byte[] array to extract the buffered data into.\n     * @param bPos   position in byte[] array to start extraction at.\n     * @param bAvail amount of bytes we're allowed to extract.  We may extract\n     *               fewer (if fewer are available).\n     * @return The number of bytes successfully extracted into the provided\n     *         byte[] array.\n     */\n    int readResults(byte[] b, int bPos, int bAvail) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the streaming buffer. This is a small optimization where we try to buffer directly to the consumer's output\n     * array for one round (if the consumer calls this method first) instead of starting our own buffer.\n     * \n     * @param out byte[] array to buffer directly to.\n     * @param outPos Position to start buffering into.\n     * @param outAvail Amount of bytes available for direct buffering.\n     */\n    void setInitialBuffer(byte[] out, int outPos, int outAvail) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>\n     * Encodes all of the provided data, starting at inPos, for inAvail bytes.\n     * Must be called at least twice:  once with the data to encode, and once\n     * with inAvail set to \"-1\" to alert encoder that EOF has been reached,\n     * so flush last remaining bytes (if not multiple of 3).\n     * </p><p>\n     * Thanks to \"commons\" project in ws.apache.org for the bitwise operations,\n     * and general approach.\n     * http://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/\n     * </p>\n     *\n     * @param in byte[] array of binary data to base64 encode.\n     * @param inPos Position to start reading data from.\n     * @param inAvail Amount of bytes available from input for encoding.\n     */\n    void encode(byte[] in, int inPos, int inAvail) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * <p>\n     * Decodes all of the provided data, starting at inPos, for inAvail bytes.\n     * Should be called at least twice:  once with the data to decode, and once\n     * with inAvail set to \"-1\" to alert decoder that EOF has been reached.\n     * The \"-1\" call is not necessary when decoding, but it doesn't hurt, either.\n     * </p><p>\n     * Ignores all non-base64 characters.  This is how chunked (e.g. 76 character)\n     * data is handled, since CR and LF are silently ignored, but has implications\n     * for other bytes, too.  This method subscribes to the garbage-in, garbage-out\n     * philosophy:  it will not check the provided data for validity.\n     * </p><p>\n     * Thanks to \"commons\" project in ws.apache.org for the bitwise operations,\n     * and general approach.\n     * http://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/\n     * </p>\n\n     * @param in byte[] array of ascii data to base64 decode.\n     * @param inPos Position to start reading data from.\n     * @param inAvail Amount of bytes available from input for encoding.\n     */    \n    void decode(byte[] in, int inPos, int inAvail) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns whether or not the <code>octet</code> is in the base 64 alphabet.\n     * \n     * @param octet\n     *            The value to test\n     * @return <code>true</code> if the value is defined in the the base 64 alphabet, <code>false</code> otherwise.\n     */\n    public static boolean isBase64(byte octet) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Tests a given byte array to see if it contains only valid characters within the Base64 alphabet.\n     * Currently the method treats whitespace as valid.\n     * \n     * @param arrayOctet\n     *            byte array to test\n     * @return <code>true</code> if all bytes are valid characters in the Base64 alphabet or if the byte array is\n     *         empty; false, otherwise\n     */\n    public static boolean isArrayByteBase64(byte[] arrayOctet) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Tests a given byte array to see if it contains only valid characters within the Base64 alphabet.\n     * \n     * @param arrayOctet\n     *            byte array to test\n     * @return <code>true</code> if any byte is a valid character in the Base64 alphabet; false herwise\n     */\n    private static boolean containsBase64Byte(byte[] arrayOctet) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Encodes binary data using the base64 algorithm but does not chunk the output.\n     * \n     * @param binaryData\n     *            binary data to encode\n     * @return Base64 characters\n     */\n    public static byte[] encodeBase64(byte[] binaryData) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Encodes binary data using a url-safe variation of the base64 algorithm but does not chunk the output.\n     * The url-safe variation emits - and _ instead of + and / characters.\n     *\n     * @param binaryData\n     *            binary data to encode\n     * @return Base64 characters\n     */\n    public static byte[] encodeBase64URLSafe(byte[] binaryData) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n\n    /**\n     * Encodes binary data using the base64 algorithm and chunks the encoded output into 76 character blocks\n     * \n     * @param binaryData\n     *            binary data to encode\n     * @return Base64 characters chunked in 76 character blocks\n     */\n    public static byte[] encodeBase64Chunked(byte[] binaryData) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Decodes an Object using the base64 algorithm. This method is provided in order to satisfy the requirements of the\n     * Decoder interface, and will throw a DecoderException if the supplied object is not of type byte[].\n     * \n     * @param pObject\n     *            Object to decode\n     * @return An object (of type byte[]) containing the binary data which corresponds to the byte[] supplied.\n     * @throws DecoderException\n     *             if the parameter supplied is not of type byte[]\n     */\n    public Object decode(Object pObject) throws DecoderException {\n        if (!(pObject instanceof byte[])) {\n            throw new DecoderException(\"Parameter supplied to Base64 decode is not a byte[]\");\n        }\n        return decode((byte[]) pObject);\n    }\n\n    /**\n     * Decodes a byte[] containing containing characters in the Base64 alphabet.\n     * \n     * @param pArray\n     *            A byte array containing Base64 character data\n     * @return a byte array containing binary data\n     */\n    public byte[] decode(byte[] pArray) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Encodes binary data using the base64 algorithm, optionally chunking the output into 76 character blocks.\n     * \n     * @param binaryData\n     *            Array containing binary data to encode.\n     * @param isChunked\n     *            if <code>true</code> this encoder will chunk the base64 output into 76 character blocks\n     * @return Base64-encoded data.\n     * @throws IllegalArgumentException\n     *             Thrown when the input array needs an output array bigger than {@link Integer#MAX_VALUE}\n     */\n    public static byte[] encodeBase64(byte[] binaryData, boolean isChunked) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Encodes binary data using the base64 algorithm, optionally chunking the output into 76 character blocks.\n     *\n     * @param binaryData\n     *            Array containing binary data to encode.\n     * @param isChunked\n     *            if <code>true</code> this encoder will chunk the base64 output into 76 character blocks\n     * @param urlSafe\n     *            if <code>true</code> this encoder will emit - and _ instead of the usual + and / characters.\n     * @return Base64-encoded data.\n     * @throws IllegalArgumentException\n     *             Thrown when the input array needs an output array bigger than {@link Integer#MAX_VALUE}\n     */\n    public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Decodes Base64 data into octets\n     *\n     * @param base64Data Byte array containing Base64 data\n     * @return Array containing decoded data.\n     */\n    public static byte[] decodeBase64(byte[] base64Data) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Discards any whitespace from a base-64 encoded block.\n     * \n     * @param data\n     *            The base-64 encoded data to discard the whitespace from.\n     * @return The data, less whitespace (see RFC 2045).\n     * @deprecated This method is no longer needed\n     */\n    static byte[] discardWhitespace(byte[] data) {\n         //The specific code has been omitted, but there is no error\n        }\n\n\n    /**\n     * Checks if a byte value is whitespace or not.\n     * \n     * @param byteToCheck\n     *            the byte to check\n     * @return true if byte is whitespace, false otherwise\n     */\n    private static boolean isWhiteSpace(byte byteToCheck) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Discards any characters outside of the base64 alphabet, per the requirements on page 25 of RFC 2045 - \"Any\n     * characters outside of the base64 alphabet are to be ignored in base64 encoded data.\"\n     * \n     * @param data\n     *            The base-64 encoded data to groom\n     * @return The data, less non-base64 characters (see RFC 2045).\n     */\n    static byte[] discardNonBase64(byte[] data) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    // Implementation of the Encoder Interface\n\n    /**\n     * Encodes an Object using the base64 algorithm. This method is provided in order to satisfy the requirements of the\n     * Encoder interface, and will throw an EncoderException if the supplied object is not of type byte[].\n     * \n     * @param pObject\n     *            Object to encode\n     * @return An object (of type byte[]) containing the base64 encoded data which corresponds to the byte[] supplied.\n     * @throws EncoderException\n     *             if the parameter supplied is not of type byte[]\n     */\n    public Object encode(Object pObject) throws EncoderException {\n        if (!(pObject instanceof byte[])) {\n            throw new EncoderException(\"Parameter supplied to Base64 encode is not a byte[]\");\n        }\n        return encode((byte[]) pObject);\n    }\n\n    /**\n     * Encodes a byte[] containing binary data, into a byte[] containing characters in the Base64 alphabet.\n     * \n     * @param pArray\n     *            a byte array containing binary data\n     * @return A byte array containing only Base64 character data\n     */\n    public byte[] encode(byte[] pArray) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    // Implementation of integer encoding used for crypto\n    /**\n     * Decodes a byte64-encoded integer according to crypto\n     * standards such as W3C's XML-Signature\n     * \n     * @param pArray a byte array containing base64 character data\n     * @return A BigInteger\n     */\n    public static BigInteger decodeInteger(byte[] pArray) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Encodes to a byte64-encoded integer according to crypto\n     * standards such as W3C's XML-Signature\n     * \n     * @param bigInt a BigInteger\n     * @return A byte array containing base64 character data\n     * @throws NullPointerException if null is passed in\n     */\n    public static byte[] encodeInteger(BigInteger bigInt) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns a byte-array representation of a <code>BigInteger</code>\n     * without sign bit.\n     *\n     * @param bigInt <code>BigInteger</code> to be converted\n     * @return a byte array representation of the BigInteger parameter\n     */\n     static byte[] toIntegerBytes(BigInteger bigInt) {\n         //The specific code has been omitted, but there is no error\n        }\n}"}