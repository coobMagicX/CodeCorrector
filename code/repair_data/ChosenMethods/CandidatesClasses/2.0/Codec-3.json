{"DoubleMetaphone": "public class DoubleMetaphone implements StringEncoder {\n\n    /**\n     * \"Vowels\" to test for\n     */\n    private static final String VOWELS = \"AEIOUY\";\n\n    /**\n     * Prefixes when present which are not pronounced\n     */\n    private static final String[] SILENT_START = \n    { \"GN\", \"KN\", \"PN\", \"WR\", \"PS\" };\n    private static final String[] L_R_N_M_B_H_F_V_W_SPACE = \n    { \"L\", \"R\", \"N\", \"M\", \"B\", \"H\", \"F\", \"V\", \"W\", \" \" };\n    private static final String[] ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER = \n    { \"ES\", \"EP\", \"EB\", \"EL\", \"EY\", \"IB\", \"IL\", \"IN\", \"IE\", \"EI\", \"ER\" };\n    private static final String[] L_T_K_S_N_M_B_Z = \n    { \"L\", \"T\", \"K\", \"S\", \"N\", \"M\", \"B\", \"Z\" };\n\n    /**\n     * Maximum length of an encoding, default is 4\n     */\n    protected int maxCodeLen = 4;\n\n    /**\n     * Creates an instance of this DoubleMetaphone encoder\n     */\n    public DoubleMetaphone() {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Encode a value with Double Metaphone\n     *\n     * @param value String to encode\n     * @return an encoded string\n     */\n    public String doubleMetaphone(String value) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Encode a value with Double Metaphone, optionally using the alternate\n     * encoding.\n     *\n     * @param value String to encode\n     * @param alternate use alternate encode\n     * @return an encoded string\n     */\n    public String doubleMetaphone(String value, boolean alternate) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Encode the value using DoubleMetaphone.  It will only work if \n     * <code>obj</code> is a <code>String</code> (like <code>Metaphone</code>).\n     *\n     * @param obj Object to encode (should be of type String)\n     * @return An encoded Object (will be of type String)\n     * @throws EncoderException encode parameter is not of type String\n     */\n    public Object encode(Object obj) throws EncoderException {\n        if (!(obj instanceof String)) {\n            throw new EncoderException(\"DoubleMetaphone encode parameter is not of type String\"); \n        } \n        return doubleMetaphone((String) obj);\n    }\n\n    /**\n     * Encode the value using DoubleMetaphone.\n     *\n     * @param value String to encode\n     * @return An encoded String\n     */\n    public String encode(String value) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Check if the Double Metaphone values of two <code>String</code> values\n     * are equal.\n     * \n     * @param value1 The left-hand side of the encoded {@link String#equals(Object)}.\n     * @param value2 The right-hand side of the encoded {@link String#equals(Object)}.\n     * @return <code>true</code> if the encoded <code>String</code>s are equal;\n     *          <code>false</code> otherwise.\n     * @see #isDoubleMetaphoneEqual(String,String,boolean)\n     */\n    public boolean isDoubleMetaphoneEqual(String value1, String value2) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Check if the Double Metaphone values of two <code>String</code> values\n     * are equal, optionally using the alternate value.\n     * \n     * @param value1 The left-hand side of the encoded {@link String#equals(Object)}.\n     * @param value2 The right-hand side of the encoded {@link String#equals(Object)}.\n     * @param alternate use the alternate value if <code>true</code>.\n     * @return <code>true</code> if the encoded <code>String</code>s are equal;\n     *          <code>false</code> otherwise.\n     */\n    public boolean isDoubleMetaphoneEqual(String value1, \n                                          String value2, \n                                          boolean alternate) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Returns the maxCodeLen.\n     * @return int\n     */\n    public int getMaxCodeLen() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Sets the maxCodeLen.\n     * @param maxCodeLen The maxCodeLen to set\n     */\n    public void setMaxCodeLen(int maxCodeLen) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-- BEGIN HANDLERS --//\n\n    /**\n     * Handles 'A', 'E', 'I', 'O', 'U', and 'Y' cases\n     */\n    private int handleAEIOUY(String value, DoubleMetaphoneResult result, int \n                             index) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Handles 'C' cases\n     */\n    private int handleC(String value, \n                        DoubleMetaphoneResult result, \n                        int index) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Handles 'CC' cases\n     */\n    private int handleCC(String value, \n                         DoubleMetaphoneResult result, \n                         int index) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Handles 'CH' cases\n     */\n    private int handleCH(String value, \n                         DoubleMetaphoneResult result, \n                         int index) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Handles 'D' cases\n     */\n    private int handleD(String value, \n                        DoubleMetaphoneResult result, \n                        int index) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Handles 'G' cases\n     */\n    private int handleG(String value, \n                        DoubleMetaphoneResult result, \n                        int index, \n                        boolean slavoGermanic) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Handles 'GH' cases\n     */\n    private int handleGH(String value, \n                         DoubleMetaphoneResult result, \n                         int index) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Handles 'H' cases\n     */\n    private int handleH(String value, \n                        DoubleMetaphoneResult result, \n                        int index) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Handles 'J' cases\n     */\n    private int handleJ(String value, DoubleMetaphoneResult result, int index, \n                        boolean slavoGermanic) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Handles 'L' cases\n     */\n    private int handleL(String value, \n                        DoubleMetaphoneResult result, \n                        int index) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Handles 'P' cases\n     */\n    private int handleP(String value, \n                        DoubleMetaphoneResult result, \n                        int index) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Handles 'R' cases\n     */\n    private int handleR(String value, \n                        DoubleMetaphoneResult result, \n                        int index, \n                        boolean slavoGermanic) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Handles 'S' cases\n     */\n    private int handleS(String value, \n                        DoubleMetaphoneResult result, \n                        int index, \n                        boolean slavoGermanic) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Handles 'SC' cases\n     */\n    private int handleSC(String value, \n                         DoubleMetaphoneResult result, \n                         int index) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Handles 'T' cases\n     */\n    private int handleT(String value, \n                        DoubleMetaphoneResult result, \n                        int index) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Handles 'W' cases\n     */\n    private int handleW(String value, \n                        DoubleMetaphoneResult result, \n                        int index) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Handles 'X' cases\n     */\n    private int handleX(String value, \n                        DoubleMetaphoneResult result, \n                        int index) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Handles 'Z' cases\n     */\n    private int handleZ(String value, DoubleMetaphoneResult result, int index, \n                        boolean slavoGermanic) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-- BEGIN CONDITIONS --//\n\n    /**\n     * Complex condition 0 for 'C'\n     */\n    private boolean conditionC0(String value, int index) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Complex condition 0 for 'CH'\n     */\n    private boolean conditionCH0(String value, int index) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Complex condition 1 for 'CH'\n     */\n    private boolean conditionCH1(String value, int index) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Complex condition 0 for 'L'\n     */\n    private boolean conditionL0(String value, int index) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Complex condition 0 for 'M'\n     */\n    private boolean conditionM0(String value, int index) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    //-- BEGIN HELPER FUNCTIONS --//\n\n    /**\n     * Determines whether or not a value is of slavo-germanic orgin. A value is\n     * of slavo-germanic origin if it contians any of 'W', 'K', 'CZ', or 'WITZ'.\n     */\n    private boolean isSlavoGermanic(String value) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Determines whether or not a character is a vowel or not\n     */\n    private boolean isVowel(char ch) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Determines whether or not the value starts with a silent letter.  It will\n     * return <code>true</code> if the value starts with any of 'GN', 'KN',\n     * 'PN', 'WR' or 'PS'.\n     */    \n    private boolean isSilentStart(String value) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Cleans the input\n     */    \n    private String cleanInput(String input) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Gets the character at index <code>index</code> if available, otherwise\n     * it returns <code>Character.MIN_VALUE</code> so that there is some sort\n     * of a default\n     */    \n    protected char charAt(String value, int index) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Shortcut method with 1 criteria\n     */    \n    private static boolean contains(String value, int start, int length, \n                                    String criteria) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Shortcut method with 2 criteria\n     */    \n    private static boolean contains(String value, int start, int length, \n                                    String criteria1, String criteria2) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Shortcut method with 3 criteria\n     */    \n    private static boolean contains(String value, int start, int length, \n                                    String criteria1, String criteria2, \n                                    String criteria3) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Shortcut method with 4 criteria\n     */    \n    private static boolean contains(String value, int start, int length, \n                                    String criteria1, String criteria2, \n                                    String criteria3, String criteria4) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Shortcut method with 5 criteria\n     */    \n    private static boolean contains(String value, int start, int length, \n                                    String criteria1, String criteria2, \n                                    String criteria3, String criteria4, \n                                    String criteria5) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Shortcut method with 6 criteria\n     */    \n    private static boolean contains(String value, int start, int length, \n                                    String criteria1, String criteria2, \n                                    String criteria3, String criteria4, \n                                    String criteria5, String criteria6) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Determines whether <code>value</code> contains any of the criteria starting at index <code>start</code> and\n     * matching up to length <code>length</code>\n     */\n    protected static boolean contains(String value, int start, int length, \n                                      String[] criteria) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    //-- BEGIN INNER CLASSES --//\n    \n    /**\n     * Inner class for storing results, since there is the optional alternate\n     * encoding.\n     */\n    public class DoubleMetaphoneResult {\n         //The specific code has been omitted, but there is no error\n        }\n}", "DoubleMetaphoneResult": "    public class DoubleMetaphoneResult {\n         //The specific code has been omitted, but there is no error\n        }"}