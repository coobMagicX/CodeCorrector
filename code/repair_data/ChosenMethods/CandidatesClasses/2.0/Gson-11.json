{"TypeAdapters": "public final class TypeAdapters {\n         //The specific code has been omitted, but there is no error\n        }", "EnumTypeAdapter": "  private static final class EnumTypeAdapter<T extends Enum<T>> extends TypeAdapter<T> {\n    private final Map<String, T> nameToConstant = new HashMap<String, T>();\n    private final Map<T, String> constantToName = new HashMap<T, String>();\n\n    public EnumTypeAdapter(Class<T> classOfT) {\n         //The specific code has been omitted, but there is no error\n        }\n    @Override public T read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      return nameToConstant.get(in.nextString());\n    }\n\n    @Override public void write(JsonWriter out, T value) throws IOException {\n      out.value(value == null ? null : constantToName.get(value));\n    }\n  }"}