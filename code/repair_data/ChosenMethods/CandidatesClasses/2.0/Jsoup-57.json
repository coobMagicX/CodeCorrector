{"Attributes": "public class Attributes implements Iterable<Attribute>, Cloneable {\n    protected static final String dataPrefix = \"data-\";\n\n    private LinkedHashMap<String, Attribute> attributes = null;\n    // linked hash map to preserve insertion order.\n    // null be default as so many elements have no attributes -- saves a good chunk of memory\n\n    /**\n     Get an attribute value by key.\n     @param key the (case-sensitive) attribute key\n     @return the attribute value if set; or empty string if not set.\n     @see #hasKey(String)\n     */\n    public String get(String key) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Get an attribute's value by case-insensitive key\n     * @param key the attribute name\n     * @return the first matching attribute value if set; or empty string if not set.\n     */\n    public String getIgnoreCase(String key) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     Set a new attribute, or replace an existing one by key.\n     @param key attribute key\n     @param value attribute value\n     */\n    public void put(String key, String value) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n    Set a new boolean attribute, remove attribute if value is false.\n    @param key attribute key\n    @param value attribute value\n    */\n    public void put(String key, boolean value) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     Set a new attribute, or replace an existing one by key.\n     @param attribute attribute\n     */\n    public void put(Attribute attribute) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     Remove an attribute by key. <b>Case sensitive.</b>\n     @param key attribute key to remove\n     */\n    public void remove(String key) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     Remove an attribute by key. <b>Case insensitive.</b>\n     @param key attribute key to remove\n     */\n    public void removeIgnoreCase(String key) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     Tests if these attributes contain an attribute with this key.\n     @param key case-sensitive key to check for\n     @return true if key exists, false otherwise\n     */\n    public boolean hasKey(String key) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     Tests if these attributes contain an attribute with this key.\n     @param key key to check for\n     @return true if key exists, false otherwise\n     */\n    public boolean hasKeyIgnoreCase(String key) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     Get the number of attributes in this set.\n     @return size\n     */\n    public int size() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     Add all the attributes from the incoming set to this set.\n     @param incoming attributes to add to these attributes.\n     */\n    public void addAll(Attributes incoming) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    public Iterator<Attribute> iterator() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     Get the attributes as a List, for iteration. Do not modify the keys of the attributes via this view, as changes\n     to keys will not be recognised in the containing set.\n     @return an view of the attributes as a List.\n     */\n    public List<Attribute> asList() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Retrieves a filtered view of attributes that are HTML5 custom data attributes; that is, attributes with keys\n     * starting with {@code data-}.\n     * @return map of custom data attributes.\n     */\n    public Map<String, String> dataset() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     Get the HTML representation of these attributes.\n     @return HTML\n     @throws SerializationException if the HTML representation of the attributes cannot be constructed.\n     */\n    public String html() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    void html(Appendable accum, Document.OutputSettings out) throws IOException {\n        if (attributes == null)\n            return;\n\n        for (Map.Entry<String, Attribute> entry : attributes.entrySet()) {\n            Attribute attribute = entry.getValue();\n            accum.append(\" \");\n            attribute.html(accum, out);\n        }\n    }\n\n    @Override\n    public String toString() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Checks if these attributes are equal to another set of attributes, by comparing the two sets\n     * @param o attributes to compare with\n     * @return if both sets of attributes have the same content\n     */\n    @Override\n    public boolean equals(Object o) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Calculates the hashcode of these attributes, by iterating all attributes and summing their hashcodes.\n     * @return calculated hashcode\n     */\n    @Override\n    public int hashCode() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    public Attributes clone() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    private class Dataset extends AbstractMap<String, String> {\n\n        private Dataset() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        @Override\n        public Set<Entry<String, String>> entrySet() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        @Override\n        public String put(String key, String value) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        private class EntrySet extends AbstractSet<Map.Entry<String, String>> {\n\n            @Override\n            public Iterator<Map.Entry<String, String>> iterator() {\n         //The specific code has been omitted, but there is no error\n        }\n\n           @Override\n            public int size() {\n         //The specific code has been omitted, but there is no error\n        }\n        }\n\n        private class DatasetIterator implements Iterator<Map.Entry<String, String>> {\n            private Iterator<Attribute> attrIter = attributes.values().iterator();\n            private Attribute attr;\n            public boolean hasNext() {\n         //The specific code has been omitted, but there is no error\n        }\n\n            public Entry<String, String> next() {\n         //The specific code has been omitted, but there is no error\n        }\n\n            public void remove() {\n         //The specific code has been omitted, but there is no error\n        }\n        }\n    }\n\n    private static String dataKey(String key) {\n         //The specific code has been omitted, but there is no error\n        }\n}", "Dataset": "    private class Dataset extends AbstractMap<String, String> {\n\n        private Dataset() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        @Override\n        public Set<Entry<String, String>> entrySet() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        @Override\n        public String put(String key, String value) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        private class EntrySet extends AbstractSet<Map.Entry<String, String>> {\n\n            @Override\n            public Iterator<Map.Entry<String, String>> iterator() {\n         //The specific code has been omitted, but there is no error\n        }\n\n           @Override\n            public int size() {\n         //The specific code has been omitted, but there is no error\n        }\n        }\n\n        private class DatasetIterator implements Iterator<Map.Entry<String, String>> {\n            private Iterator<Attribute> attrIter = attributes.values().iterator();\n            private Attribute attr;\n            public boolean hasNext() {\n         //The specific code has been omitted, but there is no error\n        }\n\n            public Entry<String, String> next() {\n         //The specific code has been omitted, but there is no error\n        }\n\n            public void remove() {\n         //The specific code has been omitted, but there is no error\n        }\n        }\n    }", "EntrySet": "        private class EntrySet extends AbstractSet<Map.Entry<String, String>> {\n\n            @Override\n            public Iterator<Map.Entry<String, String>> iterator() {\n         //The specific code has been omitted, but there is no error\n        }\n\n           @Override\n            public int size() {\n         //The specific code has been omitted, but there is no error\n        }\n        }", "DatasetIterator": "        private class DatasetIterator implements Iterator<Map.Entry<String, String>> {\n            private Iterator<Attribute> attrIter = attributes.values().iterator();\n            private Attribute attr;\n            public boolean hasNext() {\n         //The specific code has been omitted, but there is no error\n        }\n\n            public Entry<String, String> next() {\n         //The specific code has been omitted, but there is no error\n        }\n\n            public void remove() {\n         //The specific code has been omitted, but there is no error\n        }\n        }"}