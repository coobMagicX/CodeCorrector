{"TypeDeserializerBase": "public abstract class TypeDeserializerBase\n    extends TypeDeserializer\n    implements java.io.Serializable\n{\n    private static final long serialVersionUID = 1;\n    \n    protected final TypeIdResolver _idResolver;\n    \n    protected final JavaType _baseType;\n\n    /**\n     * Property that contains value for which type information\n     * is included; null if value is a root value.\n     * Note that this value is not assigned during construction\n     * but only when {@link #forProperty} is called to create\n     * a copy.\n     */\n    protected final BeanProperty _property;\n\n    /**\n     * Type to use as the default implementation, if type id is\n     * missing or can not be resolved.\n     */\n    protected final JavaType _defaultImpl;\n\n    /**\n     * Name of type property used; needed for non-property versions too,\n     * in cases where type id is to be exposed as part of JSON.\n     */\n    protected final String _typePropertyName;\n    \n    protected final boolean _typeIdVisible;\n    \n    /**\n     * For efficient operation we will lazily build mappings from type ids\n     * to actual deserializers, once needed.\n     */\n    protected final Map<String,JsonDeserializer<Object>> _deserializers;\n\n    protected JsonDeserializer<Object> _defaultImplDeserializer;\n\n    /*\n    /**********************************************************\n    /* Life-cycle\n    /**********************************************************\n     */\n\n    /**\n     * @since 2.8\n     */\n    protected TypeDeserializerBase(JavaType baseType, TypeIdResolver idRes,\n            String typePropertyName, boolean typeIdVisible, JavaType defaultImpl)\n    {\n         //The specific code has been omitted, but there is no error\n        }\n\n    protected TypeDeserializerBase(TypeDeserializerBase src, BeanProperty property)\n    {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    public abstract TypeDeserializer forProperty(BeanProperty prop);\n\n    /*\n    /**********************************************************\n    /* Accessors\n    /**********************************************************\n     */\n    \n    @Override\n    public abstract JsonTypeInfo.As getTypeInclusion();\n\n    public String baseTypeName() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    public final String getPropertyName() {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    @Override    \n    public TypeIdResolver getTypeIdResolver() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override    \n    public Class<?> getDefaultImpl() {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    @Override\n    public String toString()\n    {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /*\n    /**********************************************************\n    /* Helper methods for sub-classes\n    /**********************************************************\n     */\n\n    protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n            String typeId) throws IOException\n    {\n        JsonDeserializer<Object> deser = _deserializers.get(typeId);\n        if (deser == null) {\n         //The specific code has been omitted, but there is no error\n        }\n        return deser;\n    }\n\n    protected final JsonDeserializer<Object> _findDefaultImplDeserializer(DeserializationContext ctxt) throws IOException\n    {\n        /* 06-Feb-2013, tatu: As per [databind#148], consider default implementation value of\n         *   {@link java.lang.Void} to mean \"serialize as null\"; as well as DeserializationFeature\n         *   to do swift mapping to null\n         */\n        if (_defaultImpl == null) {\n         //The specific code has been omitted, but there is no error\n        }\n        Class<?> raw = _defaultImpl.getRawClass();\n        if (ClassUtil.isBogusClass(raw)) {\n            return NullifyingDeserializer.instance;\n        }\n        \n        synchronized (_defaultImpl) {\n         //The specific code has been omitted, but there is no error\n        }\n    }\n\n    /**\n     * Helper method called when {@link JsonParser} indicates that it can use\n     * so-called native type ids. Assumption from there is that only native\n     * type ids are to be used.\n     * \n     * @since 2.3\n     */\n    @Deprecated\n    protected Object _deserializeWithNativeTypeId(JsonParser jp, DeserializationContext ctxt) throws IOException {\n        return _deserializeWithNativeTypeId(jp, ctxt, jp.getTypeId());\n    }\n\n    /**\n     * Helper method called when {@link JsonParser} indicates that it can use\n     * so-called native type ids, and such type id has been found.\n     * \n     * @since 2.4\n     */\n    protected Object _deserializeWithNativeTypeId(JsonParser jp, DeserializationContext ctxt, Object typeId)\n        throws IOException\n    {\n        JsonDeserializer<Object> deser;\n        if (typeId == null) {\n         //The specific code has been omitted, but there is no error\n        } else {\n            String typeIdStr = (typeId instanceof String) ? (String) typeId : String.valueOf(typeId);\n            deser = _findDeserializer(ctxt, typeIdStr);\n        }\n        return deser.deserialize(jp, ctxt);\n    }\n\n    /**\n     * Helper method called when given type id can not be resolved into \n     * concrete deserializer either directly (using given {@link  TypeIdResolver}),\n     * or using default type.\n     * Default implementation simply throws a {@link com.fasterxml.jackson.databind.JsonMappingException} to\n     * indicate the problem; sub-classes may choose\n     *\n     * @return If it is possible to resolve type id into a {@link JsonDeserializer}\n     *   should return that deserializer; otherwise throw an exception to indicate\n     *   the problem.\n     *\n     * @since 2.8\n     */\n    protected JavaType _handleUnknownTypeId(DeserializationContext ctxt, String typeId,\n            TypeIdResolver idResolver, JavaType baseType)\n        throws IOException\n    {\n        String extraDesc;\n        if (idResolver instanceof TypeIdResolverBase) {\n         //The specific code has been omitted, but there is no error\n        } else {\n            extraDesc = null;\n        }\n        return ctxt.handleUnknownTypeId(_baseType, typeId, idResolver, extraDesc);\n    }\n}"}