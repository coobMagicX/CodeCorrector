{"MultiKey": "public class MultiKey<K> implements Serializable {\n    // This class could implement List, but that would confuse it's purpose\n\n    /** Serialisation version */\n    private static final long serialVersionUID = 4465448607415788805L;\n\n    /** The individual keys */\n    private final K[] keys;\n    /** The cached hashCode */\n    private transient int hashCode;\n\n    /**\n     * Constructor taking two keys.\n     * <p>\n     * The keys should be immutable\n     * If they are not then they must not be changed after adding to the MultiKey.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     */\n    @SuppressWarnings(\"unchecked\")\n    public MultiKey(final K key1, final K key2) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Constructor taking three keys.\n     * <p>\n     * The keys should be immutable\n     * If they are not then they must not be changed after adding to the MultiKey.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     */\n    @SuppressWarnings(\"unchecked\")\n    public MultiKey(final K key1, final K key2, final K key3) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Constructor taking four keys.\n     * <p>\n     * The keys should be immutable\n     * If they are not then they must not be changed after adding to the MultiKey.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     */\n    @SuppressWarnings(\"unchecked\")\n    public MultiKey(final K key1, final K key2, final K key3, final K key4) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Constructor taking five keys.\n     * <p>\n     * The keys should be immutable\n     * If they are not then they must not be changed after adding to the MultiKey.\n     *\n     * @param key1  the first key\n     * @param key2  the second key\n     * @param key3  the third key\n     * @param key4  the fourth key\n     * @param key5  the fifth key\n     */\n    @SuppressWarnings(\"unchecked\")\n    public MultiKey(final K key1, final K key2, final K key3, final K key4, final K key5) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Constructor taking an array of keys which is cloned.\n     * <p>\n     * The keys should be immutable\n     * If they are not then they must not be changed after adding to the MultiKey.\n     * <p>\n     * This is equivalent to <code>new MultiKey(keys, true)</code>.\n     *\n     * @param keys  the array of keys, not null\n     * @throws IllegalArgumentException if the key array is null\n     */\n    public MultiKey(final K[] keys) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Constructor taking an array of keys, optionally choosing whether to clone.\n     * <p>\n     * <b>If the array is not cloned, then it must not be modified.</b>\n     * <p>\n     * This method is public for performance reasons only, to avoid a clone.\n     * The hashcode is calculated once here in this method.\n     * Therefore, changing the array passed in would not change the hashcode but\n     * would change the equals method, which is a bug.\n     * <p>\n     * This is the only fully safe usage of this constructor, as the object array\n     * is never made available in a variable:\n     * <pre>\n     * new MultiKey(new Object[] {...}, false);\n     * </pre>\n     * <p>\n     * The keys should be immutable\n     * If they are not then they must not be changed after adding to the MultiKey.\n     *\n     * @param keys  the array of keys, not null\n     * @param makeClone  true to clone the array, false to assign it\n     * @throws IllegalArgumentException if the key array is null\n     * @since 3.1\n     */\n    public MultiKey(final K[] keys, final boolean makeClone) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets a clone of the array of keys.\n     * <p>\n     * The keys should be immutable\n     * If they are not then they must not be changed.\n     *\n     * @return the individual keys\n     */\n    public K[] getKeys() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Gets the key at the specified index.\n     * <p>\n     * The key should be immutable.\n     * If it is not then it must not be changed.\n     *\n     * @param index  the index to retrieve\n     * @return the key at the index\n     * @throws IndexOutOfBoundsException if the index is invalid\n     * @since 3.1\n     */\n    public K getKey(final int index) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Gets the size of the list of keys.\n     *\n     * @return the size of the list of keys\n     * @since 3.1\n     */\n    public int size() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Compares this object to another.\n     * <p>\n     * To be equal, the other object must be a <code>MultiKey</code> with the\n     * same number of keys which are also equal.\n     *\n     * @param other  the other object to compare to\n     * @return true if equal\n     */\n    @Override\n    public boolean equals(final Object other) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Gets the combined hash code that is computed from all the keys.\n     * <p>\n     * This value is computed once and then cached, so elements should not\n     * change their hash codes once created (note that this is the same\n     * constraint that would be used if the individual keys elements were\n     * themselves {@link java.util.Map Map} keys.\n     *\n     * @return the hash code\n     */\n    @Override\n    public int hashCode() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Gets a debugging string version of the key.\n     *\n     * @return a debugging string\n     */\n    @Override\n    public String toString() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Calculate the hash code of the instance using the provided keys.\n     * @param keys the keys to calculate the hash code for\n     */\n    private void calculateHashCode(final Object[] keys)\n    {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Recalculate the hash code after deserialization. The hash code of some\n     * keys might have change (hash codes based on the system hash code are\n     * only stable for the same process).\n     * @return the instance with recalculated hash code\n     */\n    private Object readResolve() {\n         //The specific code has been omitted, but there is no error\n        }\n}"}