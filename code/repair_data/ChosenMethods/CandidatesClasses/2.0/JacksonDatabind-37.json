{"SimpleType": "public class SimpleType // note: until 2.6 was final\n    extends TypeBase\n{\n    private static final long serialVersionUID = 1L;\n\n    /*\n    /**********************************************************\n    /* Life-cycle\n    /**********************************************************\n     */\n\n    /**\n     * Constructor only used by core Jackson databind functionality;\n     * should never be called by application code.\n     *<p>\n     * As with other direct construction that by-passes {@link TypeFactory},\n     * no introspection occurs with respect to super-types; caller must be\n     * aware of consequences if using this method.\n     */\n    protected SimpleType(Class<?> cls) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    protected SimpleType(Class<?> cls, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInts) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Simple copy-constructor, usually used when upgrading/refining a simple type\n     * into more specialized type.\n     *\n     * @since 2.7\n     */\n    protected SimpleType(TypeBase base) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    protected SimpleType(Class<?> cls, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInts,\n            Object valueHandler, Object typeHandler, boolean asStatic)\n    {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Pass-through constructor used by {@link ReferenceType}.\n     * \n     * @since 2.6\n     */\n    protected SimpleType(Class<?> cls, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInts, int extraHash,\n            Object valueHandler, Object typeHandler, boolean asStatic)\n    {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Method used by core Jackson classes: NOT to be used by application code:\n     * it does NOT properly handle inspection of super-types, so neither parent\n     * Classes nor implemented Interfaces are accessible with resulting type\n     * instance.\n     *<p>\n     * NOTE: public only because it is called by <code>ObjectMapper</code> which is\n     * not in same package\n     */\n    public static SimpleType constructUnsafe(Class<?> raw) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Method that should NOT to be used by application code:\n     * it does NOT properly handle inspection of super-types, so neither parent\n     * Classes nor implemented Interfaces are accessible with resulting type\n     * instance. Instead, please use {@link TypeFactory}'s <code>constructType</code>\n     * methods which handle introspection appropriately.\n     *<p>\n     * Note that prior to 2.7, method usage was not limited and would typically\n     * have worked acceptably: the problem comes from inability to resolve super-type\n     * information, for which {@link TypeFactory} is needed.\n     * \n     * @deprecated Since 2.7\n     */\n    @Deprecated\n    public static SimpleType construct(Class<?> cls)\n    {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    protected JavaType _narrow(Class<?> subclass)\n    {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    @Override\n    public JavaType withContentType(JavaType contentType) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    @Override\n    public SimpleType withTypeHandler(Object h) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    public JavaType withContentTypeHandler(Object h) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    public SimpleType withValueHandler(Object h) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    @Override\n    public  SimpleType withContentValueHandler(Object h) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    public SimpleType withStaticTyping() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    public JavaType refine(Class<?> rawType, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    @Override\n    protected String buildCanonicalName()\n    {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /*\n    /**********************************************************\n    /* Public API\n    /**********************************************************\n     */\n\n    @Override\n    public boolean isContainerType() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    public StringBuilder getErasedSignature(StringBuilder sb) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    @Override\n    public StringBuilder getGenericSignature(StringBuilder sb)\n    {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /*\n    /**********************************************************\n    /* Standard methods\n    /**********************************************************\n     */\n\n    @Override\n    public String toString()\n    {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    public boolean equals(Object o)\n    {\n         //The specific code has been omitted, but there is no error\n        }\n}"}