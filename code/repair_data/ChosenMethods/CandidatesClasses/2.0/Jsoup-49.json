{"Node": "public abstract class Node implements Cloneable {\n    private static final List<Node> EMPTY_NODES = Collections.emptyList();\n    Node parentNode;\n    List<Node> childNodes;\n    Attributes attributes;\n    String baseUri;\n    int siblingIndex;\n\n    /**\n     Create a new Node.\n     @param baseUri base URI\n     @param attributes attributes (not null, but may be empty)\n     */\n    protected Node(String baseUri, Attributes attributes) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    protected Node(String baseUri) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Default constructor. Doesn't setup base uri, children, or attributes; use with caution.\n     */\n    protected Node() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     Get the node name of this node. Use for debugging purposes and not logic switching (for that, use instanceof).\n     @return node name\n     */\n    public abstract String nodeName();\n\n    /**\n     * Get an attribute's value by its key.\n     * <p>\n     * To get an absolute URL from an attribute that may be a relative URL, prefix the key with <code><b>abs</b></code>,\n     * which is a shortcut to the {@link #absUrl} method.\n     * </p>\n     * E.g.:\n     * <blockquote><code>String url = a.attr(\"abs:href\");</code></blockquote>\n     * \n     * @param attributeKey The attribute key.\n     * @return The attribute, or empty string if not present (to avoid nulls).\n     * @see #attributes()\n     * @see #hasAttr(String)\n     * @see #absUrl(String)\n     */\n    public String attr(String attributeKey) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Get all of the element's attributes.\n     * @return attributes (which implements iterable, in same order as presented in original HTML).\n     */\n    public Attributes attributes() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Set an attribute (key=value). If the attribute already exists, it is replaced.\n     * @param attributeKey The attribute key.\n     * @param attributeValue The attribute value.\n     * @return this (for chaining)\n     */\n    public Node attr(String attributeKey, String attributeValue) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Test if this element has an attribute.\n     * @param attributeKey The attribute key to check.\n     * @return true if the attribute exists, false if not.\n     */\n    public boolean hasAttr(String attributeKey) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Remove an attribute from this element.\n     * @param attributeKey The attribute to remove.\n     * @return this (for chaining)\n     */\n    public Node removeAttr(String attributeKey) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     Get the base URI of this node.\n     @return base URI\n     */\n    public String baseUri() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     Update the base URI of this node and all of its descendants.\n     @param baseUri base URI to set\n     */\n    public void setBaseUri(final String baseUri) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href&gt;</code> or\n     * <code>&lt;img src&gt;</code>).\n     * <p>\n     * E.g.: <code>String absUrl = linkEl.absUrl(\"href\");</code>\n     * </p>\n     * <p>\n     * If the attribute value is already absolute (i.e. it starts with a protocol, like\n     * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is\n     * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made\n     * absolute using that.\n     * </p>\n     * <p>\n     * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:\n     * <code>String absUrl = linkEl.attr(\"abs:href\");</code>\n     * </p>\n     * \n     * @param attributeKey The attribute key\n     * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or\n     * could not be made successfully into a URL.\n     * @see #attr\n     * @see java.net.URL#URL(java.net.URL, String)\n     */\n    public String absUrl(String attributeKey) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     Get a child node by its 0-based index.\n     @param index index of child node\n     @return the child node at this index. Throws a {@code IndexOutOfBoundsException} if the index is out of bounds.\n     */\n    public Node childNode(int index) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     Get this node's children. Presented as an unmodifiable list: new children can not be added, but the child nodes\n     themselves can be manipulated.\n     @return list of children. If no children, returns an empty list.\n     */\n    public List<Node> childNodes() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns a deep copy of this node's children. Changes made to these nodes will not be reflected in the original\n     * nodes\n     * @return a deep copy of this node's children\n     */\n    public List<Node> childNodesCopy() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Get the number of child nodes that this node holds.\n     * @return the number of child nodes that this node holds.\n     */\n    public final int childNodeSize() {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    protected Node[] childNodesAsArray() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     Gets this node's parent node.\n     @return parent node; or null if no parent.\n     */\n    public Node parent() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     Gets this node's parent node. Node overridable by extending classes, so useful if you really just need the Node type.\n     @return parent node; or null if no parent.\n     */\n    public final Node parentNode() {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Gets the Document associated with this Node. \n     * @return the Document associated with this Node, or null if there is no such Document.\n     */\n    public Document ownerDocument() {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Remove (delete) this node from the DOM tree. If this node has children, they are also removed.\n     */\n    public void remove() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Insert the specified HTML into the DOM before this node (i.e. as a preceding sibling).\n     * @param html HTML to add before this node\n     * @return this node, for chaining\n     * @see #after(String)\n     */\n    public Node before(String html) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Insert the specified node into the DOM before this node (i.e. as a preceding sibling).\n     * @param node to add before this node\n     * @return this node, for chaining\n     * @see #after(Node)\n     */\n    public Node before(Node node) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Insert the specified HTML into the DOM after this node (i.e. as a following sibling).\n     * @param html HTML to add after this node\n     * @return this node, for chaining\n     * @see #before(String)\n     */\n    public Node after(String html) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Insert the specified node into the DOM after this node (i.e. as a following sibling).\n     * @param node to add after this node\n     * @return this node, for chaining\n     * @see #before(Node)\n     */\n    public Node after(Node node) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    private void addSiblingHtml(int index, String html) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     Wrap the supplied HTML around this node.\n     @param html HTML to wrap around this element, e.g. {@code <div class=\"head\"></div>}. Can be arbitrarily deep.\n     @return this node, for chaining.\n     */\n    public Node wrap(String html) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Removes this node from the DOM, and moves its children up into the node's parent. This has the effect of dropping\n     * the node but keeping its children.\n     * <p>\n     * For example, with the input html:\n     * </p>\n     * <p>{@code <div>One <span>Two <b>Three</b></span></div>}</p>\n     * Calling {@code element.unwrap()} on the {@code span} element will result in the html:\n     * <p>{@code <div>One Two <b>Three</b></div>}</p>\n     * and the {@code \"Two \"} {@link TextNode} being returned.\n     * \n     * @return the first child of this node, after the node has been unwrapped. Null if the node had no children.\n     * @see #remove()\n     * @see #wrap(String)\n     */\n    public Node unwrap() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    private Element getDeepChild(Element el) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Replace this node in the DOM with the supplied node.\n     * @param in the node that will will replace the existing node.\n     */\n    public void replaceWith(Node in) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    protected void setParentNode(Node parentNode) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    protected void replaceChild(Node out, Node in) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    protected void removeChild(Node out) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    protected void addChildren(Node... children) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    protected void addChildren(int index, Node... children) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    protected void ensureChildNodes() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    protected void reparentChild(Node child) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    private void reindexChildren(int start) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     Retrieves this node's sibling nodes. Similar to {@link #childNodes()  node.parent.childNodes()}, but does not\n     include this node (a node is not a sibling of itself).\n     @return node siblings. If the node has no parent, returns an empty list.\n     */\n    public List<Node> siblingNodes() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     Get this node's next sibling.\n     @return next sibling, or null if this is the last sibling\n     */\n    public Node nextSibling() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     Get this node's previous sibling.\n     @return the previous sibling, or null if this is the first sibling\n     */\n    public Node previousSibling() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Get the list index of this node in its node sibling list. I.e. if this is the first node\n     * sibling, returns 0.\n     * @return position in node sibling list\n     * @see org.jsoup.nodes.Element#elementSiblingIndex()\n     */\n    public int siblingIndex() {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    protected void setSiblingIndex(int siblingIndex) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Perform a depth-first traversal through this node and its descendants.\n     * @param nodeVisitor the visitor callbacks to perform on each node\n     * @return this node, for chaining\n     */\n    public Node traverse(NodeVisitor nodeVisitor) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     Get the outer HTML of this node.\n     @return HTML\n     */\n    public String outerHtml() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    protected void outerHtml(StringBuilder accum) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    // if this node has no document (or parent), retrieve the default output settings\n    Document.OutputSettings getOutputSettings() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     Get the outer HTML of this node.\n     @param accum accumulator to place HTML into\n     */\n    abstract void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out);\n\n    abstract void outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out);\n\n    @Override\n    public String toString() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    protected void indent(StringBuilder accum, int depth, Document.OutputSettings out) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Check if this node is equal to another node. A node is considered equal if its attributes and content equal the\n     * other node; particularly its position in the tree does not influence its equality.\n     * @param o other object to compare to\n     * @return true if the content of this node is the same as the other\n     */\n    @Override\n    public boolean equals(Object o) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Calculates a hash code for this node, which includes iterating all its attributes, and recursing into any child\n     * nodes. This means that a node's hashcode is based on it and its child content, and not its parent or place in the\n     * tree. So two nodes with the same content, regardless of their position in the tree, will have the same hashcode.\n     * @return the calculated hashcode\n     * @see Node#equals(Object)\n     */\n    @Override\n    public int hashCode() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Create a stand-alone, deep copy of this node, and all of its children. The cloned node will have no siblings or\n     * parent node. As a stand-alone object, any changes made to the clone or any of its children will not impact the\n     * original node.\n     * <p>\n     * The cloned node may be adopted into another Document or node structure using {@link Element#appendChild(Node)}.\n     * @return stand-alone cloned node\n     */\n    @Override\n    public Node clone() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /*\n     * Return a clone of the node using the given parent (which can be null).\n     * Not a deep copy of children.\n     */\n    protected Node doClone(Node parent) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    private static class OuterHtmlVisitor implements NodeVisitor {\n        private StringBuilder accum;\n        private Document.OutputSettings out;\n\n        OuterHtmlVisitor(StringBuilder accum, Document.OutputSettings out) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public void head(Node node, int depth) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public void tail(Node node, int depth) {\n         //The specific code has been omitted, but there is no error\n        }\n    }\n}", "OuterHtmlVisitor": "    private static class OuterHtmlVisitor implements NodeVisitor {\n        private StringBuilder accum;\n        private Document.OutputSettings out;\n\n        OuterHtmlVisitor(StringBuilder accum, Document.OutputSettings out) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public void head(Node node, int depth) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public void tail(Node node, int depth) {\n         //The specific code has been omitted, but there is no error\n        }\n    }"}