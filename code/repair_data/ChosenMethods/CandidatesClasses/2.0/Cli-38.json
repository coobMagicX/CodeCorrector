{"DefaultParser": "public class DefaultParser implements CommandLineParser\n{\n    /** The command-line instance. */\n    protected CommandLine cmd;\n    \n    /** The current options. */\n    protected Options options;\n\n    /**\n     * Flag indicating how unrecognized tokens are handled. <tt>true</tt> to stop\n     * the parsing and add the remaining tokens to the args list.\n     * <tt>false</tt> to throw an exception. \n     */\n    protected boolean stopAtNonOption;\n\n    /** The token currently processed. */\n    protected String currentToken;\n \n    /** The last option parsed. */\n    protected Option currentOption;\n \n    /** Flag indicating if tokens should no longer be analyzed and simply added as arguments of the command line. */\n    protected boolean skipParsing;\n \n    /** The required options and groups expected to be found when parsing the command line. */\n    protected List expectedOpts;\n \n    public CommandLine parse(Options options, String[] arguments) throws ParseException\n    {\n        return parse(options, arguments, null);\n    }\n\n    /**\n     * Parse the arguments according to the specified options and properties.\n     *\n     * @param options    the specified Options\n     * @param arguments  the command line arguments\n     * @param properties command line option name-value pairs\n     * @return the list of atomic option and value tokens\n     *\n     * @throws ParseException if there are any problems encountered\n     * while parsing the command line tokens.\n     */\n    public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException\n    {\n        return parse(options, arguments, properties, false);\n    }\n\n    public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException\n    {\n        return parse(options, arguments, null, stopAtNonOption);\n    }\n\n    /**\n     * Parse the arguments according to the specified options and properties.\n     *\n     * @param options         the specified Options\n     * @param arguments       the command line arguments\n     * @param properties      command line option name-value pairs\n     * @param stopAtNonOption if <tt>true</tt> an unrecognized argument stops\n     *     the parsing and the remaining arguments are added to the \n     *     {@link CommandLine}s args list. If <tt>false</tt> an unrecognized\n     *     argument triggers a ParseException.\n     *\n     * @return the list of atomic option and value tokens\n     * @throws ParseException if there are any problems encountered\n     * while parsing the command line tokens.\n     */\n    public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption)\n            throws ParseException\n    {\n        this.options = options;\n        this.stopAtNonOption = stopAtNonOption;\n        skipParsing = false;\n        currentOption = null;\n        expectedOpts = new ArrayList(options.getRequiredOptions());\n\n        // clear the data from the groups\n        for (OptionGroup group : options.getOptionGroups())\n        {\n            group.setSelected(null);\n        }\n\n        cmd = new CommandLine();\n\n        if (arguments != null)\n        {\n         //The specific code has been omitted, but there is no error\n        }\n\n        // check the arguments of the last option\n        checkRequiredArgs();\n\n        // add the default options\n        handleProperties(properties);\n\n        checkRequiredOptions();\n\n        return cmd;\n    }\n\n    /**\n     * Sets the values of Options using the values in <code>properties</code>.\n     *\n     * @param properties The value properties to be processed.\n     */\n    private void handleProperties(Properties properties) throws ParseException\n    {\n        if (properties == null)\n        {\n         //The specific code has been omitted, but there is no error\n        }\n\n        for (Enumeration<?> e = properties.propertyNames(); e.hasMoreElements();)\n        {\n            String option = e.nextElement().toString();\n\n            Option opt = options.getOption(option);\n            if (opt == null)\n            {\n         //The specific code has been omitted, but there is no error\n        }\n\n            // if the option is part of a group, check if another option of the group has been selected\n            OptionGroup group = options.getOptionGroup(opt);\n            boolean selected = group != null && group.getSelected() != null;\n\n            if (!cmd.hasOption(option) && !selected)\n            {\n                // get the value from the properties\n                String value = properties.getProperty(option);\n\n                if (opt.hasArg())\n                {\n                    if (opt.getValues() == null || opt.getValues().length == 0)\n                    {\n                        opt.addValueForProcessing(value);\n                    }\n                }\n                else if (!(\"yes\".equalsIgnoreCase(value)\n                        || \"true\".equalsIgnoreCase(value)\n                        || \"1\".equalsIgnoreCase(value)))\n                {\n                    // if the value is not yes, true or 1 then don't add the option to the CommandLine\n                    continue;\n                }\n\n                handleOption(opt);\n                currentOption = null;\n            }\n        }\n    }\n\n    /**\n     * Throws a {@link MissingOptionException} if all of the required options\n     * are not present.\n     *\n     * @throws MissingOptionException if any of the required Options\n     * are not present.\n     */\n    private void checkRequiredOptions() throws MissingOptionException\n    {\n        // if there are required options that have not been processed\n        if (!expectedOpts.isEmpty())\n        {\n            throw new MissingOptionException(expectedOpts);\n        }\n    }\n\n    /**\n     * Throw a {@link MissingArgumentException} if the current option\n     * didn't receive the number of arguments expected.\n     */\n    private void checkRequiredArgs() throws ParseException\n    {\n        if (currentOption != null && currentOption.requiresArg())\n        {\n            throw new MissingArgumentException(currentOption);\n        }\n    }\n\n    /**\n     * Handle any command line token.\n     *\n     * @param token the command line token to handle\n     * @throws ParseException\n     */\n    private void handleToken(String token) throws ParseException\n    {\n        currentToken = token;\n\n        if (skipParsing)\n        {\n         //The specific code has been omitted, but there is no error\n        }\n        else if (\"--\".equals(token))\n        {\n            skipParsing = true;\n        }\n        else if (currentOption != null && currentOption.acceptsArg() && isArgument(token))\n        {\n            currentOption.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(token));\n        }\n        else if (token.startsWith(\"--\"))\n        {\n            handleLongOption(token);\n        }\n        else if (token.startsWith(\"-\") && !\"-\".equals(token))\n        {\n            handleShortAndLongOption(token);\n        }\n        else\n        {\n            handleUnknownToken(token);\n        }\n\n        if (currentOption != null && !currentOption.acceptsArg())\n        {\n            currentOption = null;\n        }\n    }\n\n    /**\n     * Returns true is the token is a valid argument.\n     *\n     * @param token\n     */\n    private boolean isArgument(String token)\n    {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Check if the token is a negative number.\n     *\n     * @param token\n     */\n    private boolean isNegativeNumber(String token)\n    {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Tells if the token looks like an option.\n     *\n     * @param token\n     */\n    private boolean isOption(String token)\n    {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Tells if the token looks like a short option.\n     * \n     * @param token\n     */\n    private boolean isShortOption(String token)\n    {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Tells if the token looks like a long option.\n     *\n     * @param token\n     */\n    private boolean isLongOption(String token)\n    {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Handles an unknown token. If the token starts with a dash an \n     * UnrecognizedOptionException is thrown. Otherwise the token is added \n     * to the arguments of the command line. If the stopAtNonOption flag \n     * is set, this stops the parsing and the remaining tokens are added \n     * as-is in the arguments of the command line.\n     *\n     * @param token the command line token to handle\n     */\n    private void handleUnknownToken(String token) throws ParseException\n    {\n        if (token.startsWith(\"-\") && token.length() > 1 && !stopAtNonOption)\n        {\n            throw new UnrecognizedOptionException(\"Unrecognized option: \" + token, token);\n        }\n\n        cmd.addArg(token);\n        if (stopAtNonOption)\n        {\n         //The specific code has been omitted, but there is no error\n        }\n    }\n\n    /**\n     * Handles the following tokens:\n     *\n     * --L\n     * --L=V\n     * --L V\n     * --l\n     *\n     * @param token the command line token to handle\n     */\n    private void handleLongOption(String token) throws ParseException\n    {\n        if (token.indexOf('=') == -1)\n        {\n            handleLongOptionWithoutEqual(token);\n        }\n        else\n        {\n            handleLongOptionWithEqual(token);\n        }\n    }\n\n    /**\n     * Handles the following tokens:\n     *\n     * --L\n     * -L\n     * --l\n     * -l\n     * \n     * @param token the command line token to handle\n     */\n    private void handleLongOptionWithoutEqual(String token) throws ParseException\n    {\n        List<String> matchingOpts = options.getMatchingOptions(token);\n        if (matchingOpts.isEmpty())\n        {\n            handleUnknownToken(currentToken);\n        }\n        else if (matchingOpts.size() > 1)\n        {\n            throw new AmbiguousOptionException(token, matchingOpts);\n        }\n        else\n        {\n            handleOption(options.getOption(matchingOpts.get(0)));\n        }\n    }\n\n    /**\n     * Handles the following tokens:\n     *\n     * --L=V\n     * -L=V\n     * --l=V\n     * -l=V\n     *\n     * @param token the command line token to handle\n     */\n    private void handleLongOptionWithEqual(String token) throws ParseException\n    {\n        int pos = token.indexOf('=');\n\n        String value = token.substring(pos + 1);\n\n        String opt = token.substring(0, pos);\n\n        List<String> matchingOpts = options.getMatchingOptions(opt);\n        if (matchingOpts.isEmpty())\n        {\n            handleUnknownToken(currentToken);\n        }\n        else if (matchingOpts.size() > 1)\n        {\n            throw new AmbiguousOptionException(opt, matchingOpts);\n        }\n        else\n        {\n            Option option = options.getOption(matchingOpts.get(0));\n\n            if (option.acceptsArg())\n            {\n                handleOption(option);\n                currentOption.addValueForProcessing(value);\n                currentOption = null;\n            }\n            else\n            {\n                handleUnknownToken(currentToken);\n            }\n        }\n    }\n\n    /**\n     * Handles the following tokens:\n     *\n     * -S\n     * -SV\n     * -S V\n     * -S=V\n     * -S1S2\n     * -S1S2 V\n     * -SV1=V2\n     *\n     * -L\n     * -LV\n     * -L V\n     * -L=V\n     * -l\n     *\n     * @param token the command line token to handle\n     */\n    private void handleShortAndLongOption(String token) throws ParseException\n    {\n        String t = Util.stripLeadingHyphens(token);\n\n        int pos = t.indexOf('=');\n\n        if (t.length() == 1)\n        {\n            // -S\n            if (options.hasShortOption(t))\n            {\n                handleOption(options.getOption(t));\n            }\n            else\n            {\n                handleUnknownToken(token);\n            }\n        }\n        else if (pos == -1)\n        {\n         //The specific code has been omitted, but there is no error\n        }\n        else\n        {\n            // equal sign found (-xxx=yyy)\n            String opt = t.substring(0, pos);\n            String value = t.substring(pos + 1);\n\n            if (opt.length() == 1)\n            {\n                // -S=V\n                Option option = options.getOption(opt);\n                if (option != null && option.acceptsArg())\n                {\n                    handleOption(option);\n                    currentOption.addValueForProcessing(value);\n                    currentOption = null;\n                }\n                else\n                {\n                    handleUnknownToken(token);\n                }\n            }\n            else if (isJavaProperty(opt))\n            {\n                // -SV1=V2 (-Dkey=value)\n                handleOption(options.getOption(opt.substring(0, 1)));\n                currentOption.addValueForProcessing(opt.substring(1));\n                currentOption.addValueForProcessing(value);\n                currentOption = null;\n            }\n            else\n            {\n                // -L=V or -l=V\n                handleLongOptionWithEqual(token);\n            }\n        }\n    }\n\n    /**\n     * Search for a prefix that is the long name of an option (-Xmx512m)\n     *\n     * @param token\n     */\n    private String getLongPrefix(String token)\n    {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Check if the specified token is a Java-like property (-Dkey=value).\n     */\n    private boolean isJavaProperty(String token)\n    {\n         //The specific code has been omitted, but there is no error\n        }\n\n    private void handleOption(Option option) throws ParseException\n    {\n        // check the previous option before handling the next one\n        checkRequiredArgs();\n\n        option = (Option) option.clone();\n\n        updateRequiredOptions(option);\n\n        cmd.addOption(option);\n\n        if (option.hasArg())\n        {\n            currentOption = option;\n        }\n        else\n        {\n            currentOption = null;\n        }\n    }\n\n    /**\n     * Removes the option or its group from the list of expected elements.\n     *\n     * @param option\n     */\n    private void updateRequiredOptions(Option option) throws AlreadySelectedException\n    {\n        if (option.isRequired())\n        {\n            expectedOpts.remove(option.getKey());\n        }\n\n        // if the option is in an OptionGroup make that option the selected option of the group\n        if (options.getOptionGroup(option) != null)\n        {\n            OptionGroup group = options.getOptionGroup(option);\n\n            if (group.isRequired())\n            {\n                expectedOpts.remove(group);\n            }\n\n            group.setSelected(option);\n        }\n    }\n\n    /**\n     * Breaks <code>token</code> into its constituent parts\n     * using the following algorithm.\n     *\n     * <ul>\n     *  <li>ignore the first character (\"<b>-</b>\")</li>\n     *  <li>foreach remaining character check if an {@link Option}\n     *  exists with that id.</li>\n     *  <li>if an {@link Option} does exist then add that character\n     *  prepended with \"<b>-</b>\" to the list of processed tokens.</li>\n     *  <li>if the {@link Option} can have an argument value and there\n     *  are remaining characters in the token then add the remaining\n     *  characters as a token to the list of processed tokens.</li>\n     *  <li>if an {@link Option} does <b>NOT</b> exist <b>AND</b>\n     *  <code>stopAtNonOption</code> <b>IS</b> set then add the special token\n     *  \"<b>--</b>\" followed by the remaining characters and also\n     *  the remaining tokens directly to the processed tokens list.</li>\n     *  <li>if an {@link Option} does <b>NOT</b> exist <b>AND</b>\n     *  <code>stopAtNonOption</code> <b>IS NOT</b> set then add that\n     *  character prepended with \"<b>-</b>\".</li>\n     * </ul>\n     *\n     * @param token The current token to be <b>burst</b>\n     * at the first non-Option encountered.\n     * @throws ParseException if there are any problems encountered\n     *                        while parsing the command line token.\n     */\n    protected void handleConcatenatedOptions(String token) throws ParseException\n    {\n        for (int i = 1; i < token.length(); i++)\n        {\n            String ch = String.valueOf(token.charAt(i));\n\n            if (options.hasOption(ch))\n            {\n                handleOption(options.getOption(ch));\n\n                if (currentOption != null && token.length() != i + 1)\n                {\n                    // add the trail as an argument of the option\n                    currentOption.addValueForProcessing(token.substring(i + 1));\n                    break;\n                }\n            }\n            else\n            {\n                handleUnknownToken(stopAtNonOption && i > 1 ? token.substring(i) : token);\n                break;\n            }\n        }\n    }\n}"}