{"DateTimeSerializerBase": "public abstract class DateTimeSerializerBase<T>\n    extends StdScalarSerializer<T>\n    implements ContextualSerializer\n{\n    /**\n     * Flag that indicates that serialization must be done as the\n     * Java timestamp, regardless of other settings.\n     */\n    protected final Boolean _useTimestamp;\n\n    /**\n     * Specific format to use, if not default format: non null value\n     * also indicates that serialization is to be done as JSON String,\n     * not numeric timestamp, unless {@link #_useTimestamp} is true.\n     */\n    protected final DateFormat _customFormat;\n\n    protected DateTimeSerializerBase(Class<T> type,\n            Boolean useTimestamp, DateFormat customFormat)\n    {\n         //The specific code has been omitted, but there is no error\n        }\n\n    public abstract DateTimeSerializerBase<T> withFormat(Boolean timestamp, DateFormat customFormat);\n\n    @Override\n    public JsonSerializer<?> createContextual(SerializerProvider serializers,\n            BeanProperty property) throws JsonMappingException\n    {\n        if (property == null) {\n         //The specific code has been omitted, but there is no error\n        }\n        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n        if (format == null) {\n         //The specific code has been omitted, but there is no error\n        }\n        // Simple case first: serialize as numeric timestamp?\n        JsonFormat.Shape shape = format.getShape();\n        if (shape.isNumeric()) {\n            return withFormat(Boolean.TRUE, null);\n        }\n\n        // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..\n        // First: custom pattern will override things\n                if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()\n                                || format.hasLocale() || format.hasTimeZone()) {\n                    TimeZone tz = format.getTimeZone();\n                    final String pattern = format.hasPattern()\n                                    ? format.getPattern()\n                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n            final Locale loc = format.hasLocale()\n                            ? format.getLocale()\n                            : serializers.getLocale();\n                    SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                    if (tz == null) {\n         //The specific code has been omitted, but there is no error\n        }\n            df.setTimeZone(tz);\n            return withFormat(Boolean.FALSE, df);\n        }\n\n        // Otherwise, need one of these changes:\n\n\n        // Jackson's own `StdDateFormat` is quite easy to deal with...\n\n        // 08-Jun-2017, tatu: Unfortunately there's no generally usable\n        //    mechanism for changing `DateFormat` instances (or even clone()ing)\n        //    So: require it be `SimpleDateFormat`; can't config other types\n//            serializers.reportBadDefinition(handledType(), String.format(\n            // Ugh. No way to change `Locale`, create copy; must re-crete completely:\n        return this;\n    }\n\n    /*\n    /**********************************************************\n    /* Accessors\n    /**********************************************************\n     */\n\n    @Deprecated\n    @Override\n    public boolean isEmpty(T value) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    public boolean isEmpty(SerializerProvider serializers, T value) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    protected abstract long _timestamp(T value);\n    \n    @Override\n    public JsonNode getSchema(SerializerProvider serializers, Type typeHint) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException\n    {\n        _acceptJsonFormatVisitor(visitor, typeHint, _asTimestamp(visitor.getProvider()));\n    }\n\n    /*\n    /**********************************************************\n    /* Actual serialization\n    /**********************************************************\n     */\n\n    @Override\n    public abstract void serialize(T value, JsonGenerator gen, SerializerProvider serializers)\n        throws IOException;\n\n    /*\n    /**********************************************************\n    /* Helper methods\n    /**********************************************************\n     */\n    \n    protected boolean _asTimestamp(SerializerProvider serializers)\n    {\n         //The specific code has been omitted, but there is no error\n        }\n\n    protected void _acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint,\n\t\tboolean asNumber) throws JsonMappingException\n    {\n        if (asNumber) {\n         //The specific code has been omitted, but there is no error\n        } else {\n            visitStringFormat(visitor, typeHint, JsonValueFormat.DATE_TIME);\n        }\n    }\n}"}