{"HtmlTreeBuilder": "public class HtmlTreeBuilder extends TreeBuilder {\n    // tag searches\n    private static final String[] TagsScriptStyle = new String[]{\"script\", \"style\"};\n    public static final String[] TagsSearchInScope = new String[]{\"applet\", \"caption\", \"html\", \"table\", \"td\", \"th\", \"marquee\", \"object\"};\n    private static final String[] TagSearchList = new String[]{\"ol\", \"ul\"};\n    private static final String[] TagSearchButton = new String[]{\"button\"};\n    private static final String[] TagSearchTableScope = new String[]{\"html\", \"table\"};\n    private static final String[] TagSearchSelectScope = new String[]{\"optgroup\", \"option\"};\n    private static final String[] TagSearchEndTags = new String[]{\"dd\", \"dt\", \"li\", \"option\", \"optgroup\", \"p\", \"rp\", \"rt\"};\n    private static final String[] TagSearchSpecial = new String[]{\"address\", \"applet\", \"area\", \"article\", \"aside\", \"base\", \"basefont\", \"bgsound\",\n            \"blockquote\", \"body\", \"br\", \"button\", \"caption\", \"center\", \"col\", \"colgroup\", \"command\", \"dd\",\n            \"details\", \"dir\", \"div\", \"dl\", \"dt\", \"embed\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"form\",\n            \"frame\", \"frameset\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"head\", \"header\", \"hgroup\", \"hr\", \"html\",\n            \"iframe\", \"img\", \"input\", \"isindex\", \"li\", \"link\", \"listing\", \"marquee\", \"menu\", \"meta\", \"nav\",\n            \"noembed\", \"noframes\", \"noscript\", \"object\", \"ol\", \"p\", \"param\", \"plaintext\", \"pre\", \"script\",\n            \"section\", \"select\", \"style\", \"summary\", \"table\", \"tbody\", \"td\", \"textarea\", \"tfoot\", \"th\", \"thead\",\n            \"title\", \"tr\", \"ul\", \"wbr\", \"xmp\"};\n\n    private HtmlTreeBuilderState state; // the current state\n    private HtmlTreeBuilderState originalState; // original / marked state\n\n    private boolean baseUriSetFromDoc = false;\n    private Element headElement; // the current head element\n    private FormElement formElement; // the current form element\n    private Element contextElement; // fragment parse context -- could be null even if fragment parsing\n    private ArrayList<Element> formattingElements = new ArrayList<Element>(); // active (open) formatting elements\n    private List<String> pendingTableCharacters = new ArrayList<String>(); // chars in table to be shifted out\n    private Token.EndTag emptyEnd = new Token.EndTag(); // reused empty end tag\n\n    private boolean framesetOk = true; // if ok to go into frameset\n    private boolean fosterInserts = false; // if next inserts should be fostered\n    private boolean fragmentParsing = false; // if parsing a fragment of html\n\n    HtmlTreeBuilder() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    Document parse(String input, String baseUri, ParseErrorList errors) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    List<Node> parseFragment(String inputFragment, Element context, String baseUri, ParseErrorList errors) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    protected boolean process(Token token) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    boolean process(Token token, HtmlTreeBuilderState state) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    void transition(HtmlTreeBuilderState state) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    HtmlTreeBuilderState state() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    void markInsertionMode() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    HtmlTreeBuilderState originalState() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    void framesetOk(boolean framesetOk) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    boolean framesetOk() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    Document getDocument() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    String getBaseUri() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    void maybeSetBaseUri(Element base) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    boolean isFragmentParsing() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    void error(HtmlTreeBuilderState state) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    Element insert(Token.StartTag startTag) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    Element insertStartTag(String startTagName) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    void insert(Element el) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    Element insertEmpty(Token.StartTag startTag) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    FormElement insertForm(Token.StartTag startTag, boolean onStack) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    void insert(Token.Comment commentToken) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    void insert(Token.Character characterToken) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    private void insertNode(Node node) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    Element pop() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    void push(Element element) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    ArrayList<Element> getStack() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    boolean onStack(Element el) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    private boolean isElementInQueue(ArrayList<Element> queue, Element element) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    Element getFromStack(String elName) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    boolean removeFromStack(Element el) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    void popStackToClose(String elName) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    void popStackToClose(String... elNames) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    void popStackToBefore(String elName) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    void clearStackToTableContext() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    void clearStackToTableBodyContext() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    void clearStackToTableRowContext() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    private void clearStackToContext(String... nodeNames) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    Element aboveOnStack(Element el) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    void insertOnStackAfter(Element after, Element in) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    void replaceOnStack(Element out, Element in) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    private void replaceInQueue(ArrayList<Element> queue, Element out, Element in) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    void resetInsertionMode() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    // todo: tidy up in specific scope methods\n    private String[] specificScopeTarget = {null};\n\n    private boolean inSpecificScope(String targetName, String[] baseTypes, String[] extraTypes) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    boolean inScope(String[] targetNames) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    boolean inScope(String targetName) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    boolean inScope(String targetName, String[] extras) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    boolean inListItemScope(String targetName) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    boolean inButtonScope(String targetName) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    boolean inTableScope(String targetName) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    boolean inSelectScope(String targetName) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    void setHeadElement(Element headElement) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    Element getHeadElement() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    boolean isFosterInserts() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    void setFosterInserts(boolean fosterInserts) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    FormElement getFormElement() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    void setFormElement(FormElement formElement) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    void newPendingTableCharacters() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    List<String> getPendingTableCharacters() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    void setPendingTableCharacters(List<String> pendingTableCharacters) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     11.2.5.2 Closing elements that have implied end tags<p/>\n     When the steps below require the UA to generate implied end tags, then, while the current node is a dd element, a\n     dt element, an li element, an option element, an optgroup element, a p element, an rp element, or an rt element,\n     the UA must pop the current node off the stack of open elements.\n\n     @param excludeTag If a step requires the UA to generate implied end tags but lists an element to exclude from the\n     process, then the UA must perform the above steps as if that element was not in the above list.\n     */\n    void generateImpliedEndTags(String excludeTag) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    void generateImpliedEndTags() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    boolean isSpecial(Element el) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    Element lastFormattingElement() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    Element removeLastFormattingElement() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    // active formatting elements\n    void pushActiveFormattingElements(Element in) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    private boolean isSameFormattingElement(Element a, Element b) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    void reconstructFormattingElements() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    void clearFormattingElementsToLastMarker() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    void removeFromActiveFormattingElements(Element el) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    boolean isInActiveFormattingElements(Element el) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    Element getActiveFormattingElement(String nodeName) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    void replaceActiveFormattingElement(Element out, Element in) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    void insertMarkerToFormattingElements() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    void insertInFosterParent(Node in) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    public String toString() {\n         //The specific code has been omitted, but there is no error\n        }\n}"}