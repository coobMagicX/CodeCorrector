{"Attribute": "public class Attribute implements Map.Entry<String, String>, Cloneable  {\n    private static final String[] booleanAttributes = {\n            \"allowfullscreen\", \"async\", \"autofocus\", \"checked\", \"compact\", \"declare\", \"default\", \"defer\", \"disabled\",\n            \"formnovalidate\", \"hidden\", \"inert\", \"ismap\", \"itemscope\", \"multiple\", \"muted\", \"nohref\", \"noresize\",\n            \"noshade\", \"novalidate\", \"nowrap\", \"open\", \"readonly\", \"required\", \"reversed\", \"seamless\", \"selected\",\n            \"sortable\", \"truespeed\", \"typemustmatch\"\n    };\n\n    private String key;\n    private String val;\n    Attributes parent; // used to update the holding Attributes when the key / value is changed via this interface\n\n    /**\n     * Create a new attribute from unencoded (raw) key and value.\n     * @param key attribute key; case is preserved.\n     * @param value attribute value\n     * @see #createFromEncoded\n     */\n    public Attribute(String key, String value) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Create a new attribute from unencoded (raw) key and value.\n     * @param key attribute key; case is preserved.\n     * @param val attribute value\n     * @param parent the containing Attributes (this Attribute is not automatically added to said Attributes)\n     * @see #createFromEncoded*/\n    public Attribute(String key, String val, Attributes parent) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     Get the attribute key.\n     @return the attribute key\n     */\n    public String getKey() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     Set the attribute key; case is preserved.\n     @param key the new key; must not be null\n     */\n    public void setKey(String key) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     Get the attribute value.\n     @return the attribute value\n     */\n    public String getValue() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     Set the attribute value.\n     @param val the new attribute value; must not be null\n     */\n    public String setValue(String val) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     Get the HTML representation of this attribute; e.g. {@code href=\"index.html\"}.\n     @return HTML\n     */\n    public String html() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    protected static void html(String key, String val, Appendable accum, Document.OutputSettings out) throws IOException {\n        accum.append(key);\n        if (!shouldCollapseAttribute(key, val, out)) {\n            accum.append(\"=\\\"\");\n            Entities.escape(accum, Attributes.checkNotNull(val) , out, true, false, false);\n            accum.append('\"');\n        }\n    }\n    \n    protected void html(Appendable accum, Document.OutputSettings out) throws IOException {\n        html(key, val, accum, out);\n    }\n\n    /**\n     Get the string representation of this attribute, implemented as {@link #html()}.\n     @return string\n     */\n    @Override\n    public String toString() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Create a new Attribute from an unencoded key and a HTML attribute encoded value.\n     * @param unencodedKey assumes the key is not encoded, as can be only run of simple \\w chars.\n     * @param encodedValue HTML attribute encoded value\n     * @return attribute\n     */\n    public static Attribute createFromEncoded(String unencodedKey, String encodedValue) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    protected boolean isDataAttribute() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    protected static boolean isDataAttribute(String key) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Collapsible if it's a boolean attribute and value is empty or same as name\n     * \n     * @param out output settings\n     * @return  Returns whether collapsible or not\n     */\n    protected final boolean shouldCollapseAttribute(Document.OutputSettings out) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    protected static boolean shouldCollapseAttribute(final String key, final String val, final Document.OutputSettings out) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * @deprecated\n     */\n    protected boolean isBooleanAttribute() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Checks if this attribute name is defined as a boolean attribute in HTML5\n     */\n    protected static boolean isBooleanAttribute(final String key) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    public boolean equals(Object o) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    public int hashCode() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    public Attribute clone() {\n         //The specific code has been omitted, but there is no error\n        }\n}"}