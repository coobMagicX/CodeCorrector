{"BaseSettings": "public final class BaseSettings\n    implements java.io.Serializable\n{\n    // for 2.6\n    private static final long serialVersionUID = 1L;\n\n    /*\n    /**********************************************************\n    /* Configuration settings; introspection, related\n    /**********************************************************\n     */\n    \n    /**\n     * Introspector used to figure out Bean properties needed for bean serialization\n     * and deserialization. Overridable so that it is possible to change low-level\n     * details of introspection, like adding new annotation types.\n     */\n    protected final ClassIntrospector _classIntrospector;\n\n    /**\n     * Introspector used for accessing annotation value based configuration.\n     */\n    protected final AnnotationIntrospector _annotationIntrospector;\n\n    /**\n     * Object used for determining whether specific property elements\n     * (method, constructors, fields) can be auto-detected based on\n     * their visibility (access modifiers). Can be changed to allow\n     * different minimum visibility levels for auto-detection. Note\n     * that this is the global handler; individual types (classes)\n     * can further override active checker used (using\n     * {@link JsonAutoDetect} annotation)\n     */\n    protected final VisibilityChecker<?> _visibilityChecker;\n\n    /**\n     * Custom property naming strategy in use, if any.\n     */\n    protected final PropertyNamingStrategy _propertyNamingStrategy;\n\n    /**\n     * Specific factory used for creating {@link JavaType} instances;\n     * needed to allow modules to add more custom type handling\n     * (mostly to support types of non-Java JVM languages)\n     */\n    protected final TypeFactory _typeFactory;\n\n    /*\n    /**********************************************************\n    /* Configuration settings; type resolution\n    /**********************************************************\n     */\n\n    /**\n     * Type information handler used for \"untyped\" values (ones declared\n     * to have type <code>Object.class</code>)\n     */\n    protected final TypeResolverBuilder<?> _typeResolverBuilder;\n    \n    /*\n    /**********************************************************\n    /* Configuration settings; other\n    /**********************************************************\n     */\n    \n    /**\n     * Custom date format to use for de-serialization. If specified, will be\n     * used instead of {@link com.fasterxml.jackson.databind.util.StdDateFormat}.\n     *<p>\n     * Note that the configured format object will be cloned once per\n     * deserialization process (first time it is needed)\n     */\n    protected final DateFormat _dateFormat;\n\n    /**\n     * Object used for creating instances of handlers (serializers, deserializers,\n     * type and type id resolvers), given class to instantiate. This is typically\n     * used to do additional configuration (with dependency injection, for example)\n     * beyond simply construction of instances; or to use alternative constructors.\n     */\n    protected final HandlerInstantiator _handlerInstantiator;\n\n    /**\n     * Default {@link java.util.Locale} used with serialization formats.\n     * Default value is {@link Locale#getDefault()}.\n     */\n    protected final Locale _locale;\n\n    /**\n     * Default {@link java.util.TimeZone} used with serialization formats.\n     * Default value is {@link TimeZone#getDefault()}, which is typically the\n     * local time zone (unless overridden for JVM).\n     *<p>\n     * Note that if a new value is set, time zone is also assigned to\n     * {@link #_dateFormat} of this object.\n     */\n    protected final TimeZone _timeZone;\n\n    /**\n     * Explicitly default {@link Base64Variant} to use for handling\n     * binary data (<code>byte[]</code>), used with data formats\n     * that use base64 encoding (like JSON, CSV).\n     * \n     * @since 2.1\n     */\n    protected final Base64Variant _defaultBase64;\n    \n    /*\n    /**********************************************************\n    /* Construction\n    /**********************************************************\n     */\n\n    public BaseSettings(ClassIntrospector ci, AnnotationIntrospector ai,\n            VisibilityChecker<?> vc, PropertyNamingStrategy pns, TypeFactory tf,\n            TypeResolverBuilder<?> typer, DateFormat dateFormat, HandlerInstantiator hi,\n            Locale locale, TimeZone tz, Base64Variant defaultBase64)\n    {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /*\n    /**********************************************************\n    /* Factory methods\n    /**********************************************************\n     */\n    \n    public BaseSettings withClassIntrospector(ClassIntrospector ci) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    public BaseSettings withAnnotationIntrospector(AnnotationIntrospector ai) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    public BaseSettings withInsertedAnnotationIntrospector(AnnotationIntrospector ai) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    public BaseSettings withAppendedAnnotationIntrospector(AnnotationIntrospector ai) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    public BaseSettings withVisibilityChecker(VisibilityChecker<?> vc) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    public BaseSettings withVisibility(PropertyAccessor forMethod, JsonAutoDetect.Visibility visibility) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    public BaseSettings withPropertyNamingStrategy(PropertyNamingStrategy pns) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    public BaseSettings withTypeFactory(TypeFactory tf) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    public BaseSettings withTypeResolverBuilder(TypeResolverBuilder<?> typer) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    public BaseSettings withDateFormat(DateFormat df) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    public BaseSettings withHandlerInstantiator(HandlerInstantiator hi) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    public BaseSettings with(Locale l) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Fluent factory for constructing a new instance that uses specified TimeZone.\n     * Note that timezone used with also be assigned to configured {@link DateFormat},\n     * changing time formatting defaults.\n     */\n    public BaseSettings with(TimeZone tz)\n    {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * @since 2.1\n     */\n    public BaseSettings with(Base64Variant base64) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /*\n    /**********************************************************\n    /* API\n    /**********************************************************\n     */\n\n    public ClassIntrospector getClassIntrospector() {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    public AnnotationIntrospector getAnnotationIntrospector() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    public VisibilityChecker<?> getVisibilityChecker() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    public PropertyNamingStrategy getPropertyNamingStrategy() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    public TypeFactory getTypeFactory() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    public TypeResolverBuilder<?> getTypeResolverBuilder() {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    public DateFormat getDateFormat() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    public HandlerInstantiator getHandlerInstantiator() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    public Locale getLocale() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    public TimeZone getTimeZone() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    public Base64Variant getBase64Variant() {\n         //The specific code has been omitted, but there is no error\n        }\n}"}