{"AsWrapperTypeDeserializer": "public class AsWrapperTypeDeserializer\n    extends TypeDeserializerBase\n    implements java.io.Serializable\n{\n    private static final long serialVersionUID = 5345570420394408290L;\n\n    public AsWrapperTypeDeserializer(JavaType bt, TypeIdResolver idRes,\n            String typePropertyName, boolean typeIdVisible, Class<?> defaultImpl)\n    {\n         //The specific code has been omitted, but there is no error\n        }\n\n    protected AsWrapperTypeDeserializer(AsWrapperTypeDeserializer src, BeanProperty property) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    @Override\n    public TypeDeserializer forProperty(BeanProperty prop) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    @Override\n    public As getTypeInclusion() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Deserializing type id enclosed using WRAPPER_OBJECT style is straightforward\n     */\n    @Override\n    public Object deserializeTypedFromObject(JsonParser jp, DeserializationContext ctxt) throws IOException {\n        return _deserialize(jp, ctxt);\n    }    \n\n    @Override\n    public Object deserializeTypedFromArray(JsonParser jp, DeserializationContext ctxt) throws IOException {\n        return _deserialize(jp, ctxt);\n    }\n\n    @Override\n    public Object deserializeTypedFromScalar(JsonParser jp, DeserializationContext ctxt) throws IOException {\n        return _deserialize(jp, ctxt);\n    }\n\n    @Override\n    public Object deserializeTypedFromAny(JsonParser jp, DeserializationContext ctxt) throws IOException {\n        return _deserialize(jp, ctxt);\n    }\n    \n    /*\n    /***************************************************************\n    /* Internal methods\n    /***************************************************************\n     */\n\n    /**\n     * Method that handles type information wrapper, locates actual\n     * subtype deserializer to use, and calls it to do actual\n     * deserialization.\n     */\n    @SuppressWarnings(\"resource\")\n    private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n    {\n        // 02-Aug-2013, tatu: May need to use native type ids\n        if (p.canReadTypeId()) {\n            Object typeId = p.getTypeId();\n            if (typeId != null) {\n         //The specific code has been omitted, but there is no error\n        }\n        }\n        // first, sanity checks\n        if (p.getCurrentToken() != JsonToken.START_OBJECT) {\n            throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,\n                    \"need JSON Object to contain As.WRAPPER_OBJECT type information for class \"+baseTypeName());\n        }\n            // should always get field name, but just in case...\n            if (p.nextToken() != JsonToken.FIELD_NAME) {\n                throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,\n                        \"need JSON String that contains type id (for subtype of \"+baseTypeName()+\")\");\n            }\n        final String typeId = p.getText();\n        JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);\n        p.nextToken();\n\n        // Minor complication: we may need to merge type id in?\n        if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {\n            // but what if there's nowhere to add it in? Error? Or skip? For now, skip.\n            TokenBuffer tb = new TokenBuffer(null, false);\n            tb.writeStartObject(); // recreate START_OBJECT\n            tb.writeFieldName(_typePropertyName);\n            tb.writeString(typeId);\n            p = JsonParserSequence.createFlattened(tb.asParser(p), p);\n            p.nextToken();\n        }\n        \n        Object value = deser.deserialize(p, ctxt);\n        // And then need the closing END_OBJECT\n        if (p.nextToken() != JsonToken.END_OBJECT) {\n            throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,\n                    \"expected closing END_OBJECT after type information and deserialized value\");\n        }\n        return value;\n    }\n}"}