{"Options": "public class Options implements Serializable\n{\n    /** The serial version UID. */\n    private static final long serialVersionUID = 1L;\n\n    /** a map of the options with the character key */\n    private final Map<String, Option> shortOpts = new LinkedHashMap<String, Option>();\n\n    /** a map of the options with the long key */\n    private final Map<String, Option> longOpts = new LinkedHashMap<String, Option>();\n\n    /** a map of the required options */\n    // N.B. This can contain either a String (addOption) or an OptionGroup (addOptionGroup)\n    // TODO this seems wrong\n    private final List<Object> requiredOpts = new ArrayList<Object>();\n\n    /** a map of the option groups */\n    private final Map<String, OptionGroup> optionGroups = new HashMap<String, OptionGroup>();\n\n    /**\n     * Add the specified option group.\n     *\n     * @param group the OptionGroup that is to be added\n     * @return the resulting Options instance\n     */\n    public Options addOptionGroup(OptionGroup group)\n    {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Lists the OptionGroups that are members of this Options instance.\n     *\n     * @return a Collection of OptionGroup instances.\n     */\n    Collection<OptionGroup> getOptionGroups()\n    {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Add an option that only contains a short name.\n     * The option does not take an argument.\n     *\n     * @param opt Short single-character name of the option.\n     * @param description Self-documenting description\n     * @return the resulting Options instance\n     * @since 1.3\n     */\n    public Options addOption(String opt, String description)\n    {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Add an option that only contains a short-name.\n     * It may be specified as requiring an argument.\n     *\n     * @param opt Short single-character name of the option.\n     * @param hasArg flag signally if an argument is required after this option\n     * @param description Self-documenting description\n     * @return the resulting Options instance\n     */\n    public Options addOption(String opt, boolean hasArg, String description)\n    {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Add an option that contains a short-name and a long-name.\n     * It may be specified as requiring an argument.\n     *\n     * @param opt Short single-character name of the option.\n     * @param longOpt Long multi-character name of the option.\n     * @param hasArg flag signally if an argument is required after this option\n     * @param description Self-documenting description\n     * @return the resulting Options instance\n     */\n    public Options addOption(String opt, String longOpt, boolean hasArg, String description)\n    {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Adds an option instance\n     *\n     * @param opt the option that is to be added\n     * @return the resulting Options instance\n     */\n    public Options addOption(Option opt)\n    {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Retrieve a read-only list of options in this set\n     *\n     * @return read-only Collection of {@link Option} objects in this descriptor\n     */\n    public Collection<Option> getOptions()\n    {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the Options for use by the HelpFormatter.\n     *\n     * @return the List of Options\n     */\n    List<Option> helpOptions()\n    {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the required options.\n     *\n     * @return read-only List of required options\n     */\n    public List getRequiredOptions()\n    {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Retrieve the {@link Option} matching the long or short name specified.\n     * The leading hyphens in the name are ignored (up to 2).\n     *\n     * @param opt short or long name of the {@link Option}\n     * @return the option represented by opt\n     */\n    public Option getOption(String opt)\n    {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the options with a long name starting with the name specified.\n     * \n     * @param opt the partial name of the option\n     * @return the options matching the partial name specified, or an empty list if none matches\n     * @since 1.3\n     */\n    public List<String> getMatchingOptions(String opt)\n    {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns whether the named {@link Option} is a member of this {@link Options}.\n     *\n     * @param opt short or long name of the {@link Option}\n     * @return true if the named {@link Option} is a member of this {@link Options}\n     */\n    public boolean hasOption(String opt)\n    {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns whether the named {@link Option} is a member of this {@link Options}.\n     *\n     * @param opt long name of the {@link Option}\n     * @return true if the named {@link Option} is a member of this {@link Options}\n     * @since 1.3\n     */\n    public boolean hasLongOption(String opt)\n    {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns whether the named {@link Option} is a member of this {@link Options}.\n     *\n     * @param opt short name of the {@link Option}\n     * @return true if the named {@link Option} is a member of this {@link Options}\n     * @since 1.3\n     */\n    public boolean hasShortOption(String opt)\n    {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns the OptionGroup the <code>opt</code> belongs to.\n     * @param opt the option whose OptionGroup is being queried.\n     *\n     * @return the OptionGroup if <code>opt</code> is part\n     * of an OptionGroup, otherwise return null\n     */\n    public OptionGroup getOptionGroup(Option opt)\n    {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Dump state, suitable for debugging.\n     *\n     * @return Stringified form of this object\n     */\n    @Override\n    public String toString()\n    {\n         //The specific code has been omitted, but there is no error\n        }\n}"}