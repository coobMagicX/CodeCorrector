{"XmlSerializerProvider": "public class XmlSerializerProvider extends DefaultSerializerProvider\n{\n    // As of 2.7\n    private static final long serialVersionUID = 1L;\n\n    /**\n     * If all we get to serialize is a null, there's no way to figure out\n     * expected root name; so let's just default to something like \"&lt;null>\"...\n     */\n    protected final static QName ROOT_NAME_FOR_NULL = new QName(\"null\");\n\n    protected final XmlRootNameLookup _rootNameLookup;\n\n    public XmlSerializerProvider(XmlRootNameLookup rootNames)\n    {\n         //The specific code has been omitted, but there is no error\n        }\n\n    public XmlSerializerProvider(XmlSerializerProvider src,\n            SerializationConfig config, SerializerFactory f)\n    {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * @since 2.8.9\n     */\n    protected XmlSerializerProvider(XmlSerializerProvider src) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /*\n    /**********************************************************************\n    /* Overridden methods\n    /**********************************************************************\n     */\n\n    @Override\n    public DefaultSerializerProvider copy() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    public DefaultSerializerProvider createInstance(SerializationConfig config,\n            SerializerFactory jsf) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @SuppressWarnings(\"resource\")\n    @Override\n    public void serializeValue(JsonGenerator gen, Object value) throws IOException\n    {\n        if (value == null) {\n         //The specific code has been omitted, but there is no error\n        }\n        final Class<?> cls = value.getClass();\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) {\n         //The specific code has been omitted, but there is no error\n        } else {\n            QName rootName = _rootNameFromConfig();\n            if (rootName == null) {\n         //The specific code has been omitted, but there is no error\n        }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(cls);\n            if (asArray) {\n         //The specific code has been omitted, but there is no error\n        }\n        }\n        \n        // From super-class implementation\n        final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\n        try {\n            ser.serialize(value, gen, this);\n        } catch (Exception e) {\n         //The specific code has been omitted, but there is no error\n        }\n        // end of super-class implementation\n\n        if (asArray) {\n         //The specific code has been omitted, but there is no error\n        }\n    }\n\n    // @since 2.1\n    @SuppressWarnings(\"resource\")\n    @Override\n    public void serializeValue(JsonGenerator gen, Object value, JavaType rootType,\n            JsonSerializer<Object> ser) throws IOException\n    {\n        if (value == null) {\n         //The specific code has been omitted, but there is no error\n        }\n        final boolean asArray;\n        final ToXmlGenerator xgen = _asXmlGenerator(gen);\n        if (xgen == null) {\n         //The specific code has been omitted, but there is no error\n        } else {\n            QName rootName = _rootNameFromConfig();\n            if (rootName == null) {\n         //The specific code has been omitted, but there is no error\n        }\n            _initWithRootName(xgen, rootName);\n            asArray = TypeUtil.isIndexedType(rootType);\n            if (asArray) {\n         //The specific code has been omitted, but there is no error\n        }\n        }\n        if (ser == null) {\n         //The specific code has been omitted, but there is no error\n        }\n        // From super-class implementation\n        try {\n            ser.serialize(value, gen, this);\n        } catch (Exception e) {\n         //The specific code has been omitted, but there is no error\n        }\n        // end of super-class implementation\n        if (asArray) {\n         //The specific code has been omitted, but there is no error\n        }\n    }\n\n    protected void _serializeXmlNull(JsonGenerator jgen) throws IOException\n    {\n        // 14-Nov-2016, tatu: As per [dataformat-xml#213], we may have explicitly\n        //    configured root name...\n        QName rootName = _rootNameFromConfig();\n        if (rootName == null) {\n         //The specific code has been omitted, but there is no error\n        }\n        if (jgen instanceof ToXmlGenerator) {\n         //The specific code has been omitted, but there is no error\n        }\n        super.serializeValue(jgen, null);\n    }\n    \n    protected void _startRootArray(ToXmlGenerator xgen, QName rootName) throws IOException\n    {\n        xgen.writeStartObject();\n        // Could repeat root name, but what's the point? How to customize?\n        xgen.writeFieldName(\"item\");\n    }    \n\n    protected void _initWithRootName(ToXmlGenerator xgen, QName rootName) throws IOException\n    {\n        /* 28-Nov-2012, tatu: We should only initialize the root\n         *  name if no name has been set, as per [dataformat-xml#42],\n         *  to allow for custom serializers to work.\n         */\n        if (!xgen.setNextNameIfMissing(rootName)) {\n            // however, if we are root, we... insist\n            if (xgen.inRoot()) {\n                xgen.setNextName(rootName);\n            }\n        }\n        xgen.initGenerator();\n        String ns = rootName.getNamespaceURI();\n        /* [dataformat-xml#26] If we just try writing root element with namespace,\n         * we will get an explicit prefix. But we'd rather use the default\n         * namespace, so let's try to force that.\n         */\n        if (ns != null && ns.length() > 0) {\n            try {\n                xgen.getStaxWriter().setDefaultNamespace(ns);\n            } catch (XMLStreamException e) {\n         //The specific code has been omitted, but there is no error\n        }\n        }\n    }\n\n    protected QName _rootNameFromConfig()\n    {\n         //The specific code has been omitted, but there is no error\n        }\n\n    protected ToXmlGenerator _asXmlGenerator(JsonGenerator gen)\n        throws JsonMappingException\n    {\n        // [Issue#71]: When converting, we actually get TokenBuffer, which is fine\n        if (!(gen instanceof ToXmlGenerator)) {\n            // but verify\n            if (!(gen instanceof TokenBuffer)) {\n                throw JsonMappingException.from(gen,\n                        \"XmlMapper does not with generators of type other than ToXmlGenerator; got: \"+gen.getClass().getName());\n            }\n            return null;\n        }\n        return (ToXmlGenerator) gen;\n    }    \n\n    protected IOException _wrapAsIOE(JsonGenerator g, Exception e) {\n         //The specific code has been omitted, but there is no error\n        }\n}"}