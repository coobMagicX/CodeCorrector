{"DefaultPrettyPrinter": "public class DefaultPrettyPrinter\n    implements PrettyPrinter, Instantiatable<DefaultPrettyPrinter>,\n        java.io.Serializable\n{\n    private static final long serialVersionUID = 1;\n\n    /**\n     * Constant that specifies default \"root-level\" separator to use between\n     * root values: a single space character.\n     * \n     * @since 2.1\n     */\n    public final static SerializedString DEFAULT_ROOT_VALUE_SEPARATOR = new SerializedString(\" \");\n\n    /**\n     * Interface that defines objects that can produce indentation used\n     * to separate object entries and array values. Indentation in this\n     * context just means insertion of white space, independent of whether\n     * linefeeds are output.\n     */\n    public interface Indenter\n    {\n        void writeIndentation(JsonGenerator g, int level) throws IOException;\n\n        /**\n         * @return True if indenter is considered inline (does not add linefeeds),\n         *   false otherwise\n         */\n        boolean isInline();\n    }\n\n    // // // Config, indentation\n\n    /**\n     * By default, let's use only spaces to separate array values.\n     */\n    protected Indenter _arrayIndenter = FixedSpaceIndenter.instance;\n\n    /**\n     * By default, let's use linefeed-adding indenter for separate\n     * object entries. We'll further configure indenter to use\n     * system-specific linefeeds, and 2 spaces per level (as opposed to,\n     * say, single tabs)\n     */\n    protected Indenter _objectIndenter = DefaultIndenter.SYSTEM_LINEFEED_INSTANCE;\n\n    /**\n     * String printed between root-level values, if any.\n     */\n    protected final SerializableString _rootSeparator;\n\n    // // // Config, other white space configuration\n\n    /**\n     * By default we will add spaces around colons used to\n     * separate object fields and values.\n     * If disabled, will not use spaces around colon.\n     */\n    protected boolean _spacesInObjectEntries = true;\n\n    // // // State:\n\n    /**\n     * Number of open levels of nesting. Used to determine amount of\n     * indentation to use.\n     */\n    protected transient int _nesting;\n\n    /**\n     * @since 2.9\n     */\n    protected Separators _separators;\n\n    /**\n     * @since 2.9\n     */\n    protected String _objectFieldValueSeparatorWithSpaces;\n\n    /*\n    /**********************************************************\n    /* Life-cycle (construct, configure)\n    /**********************************************************\n    */\n\n    public DefaultPrettyPrinter() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Constructor that specifies separator String to use between root values;\n     * if null, no separator is printed.\n     *<p>\n     * Note: simply constructs a {@link SerializedString} out of parameter,\n     * calls {@link #DefaultPrettyPrinter(SerializableString)}\n     * \n     * @param rootSeparator\n     * \n     * @since 2.1\n     */\n    public DefaultPrettyPrinter(String rootSeparator) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Constructor that specifies separator String to use between root values;\n     * if null, no separator is printed.\n     * \n     * @param rootSeparator\n     * \n     * @since 2.1\n     */\n    public DefaultPrettyPrinter(SerializableString rootSeparator) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    public DefaultPrettyPrinter(DefaultPrettyPrinter base) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    public DefaultPrettyPrinter(DefaultPrettyPrinter base,\n            SerializableString rootSeparator)\n    {\n         //The specific code has been omitted, but there is no error\n        }\n\n    public DefaultPrettyPrinter withRootSeparator(SerializableString rootSeparator)\n    {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * @since 2.6\n     */\n    public DefaultPrettyPrinter withRootSeparator(String rootSeparator) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    public void indentArraysWith(Indenter i) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    public void indentObjectsWith(Indenter i) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * @since 2.3\n     */\n    public DefaultPrettyPrinter withArrayIndenter(Indenter i) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * @since 2.3\n     */\n    public DefaultPrettyPrinter withObjectIndenter(Indenter i) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * \"Mutant factory\" method that will return a pretty printer instance\n     * that does use spaces inside object entries; if 'this' instance already\n     * does this, it is returned; if not, a new instance will be constructed\n     * and returned.\n     *\n     * @since 2.3\n     */\n    public DefaultPrettyPrinter withSpacesInObjectEntries() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * \"Mutant factory\" method that will return a pretty printer instance\n     * that does not use spaces inside object entries; if 'this' instance already\n     * does this, it is returned; if not, a new instance will be constructed\n     * and returned.\n     *\n     * @since 2.3\n     */\n    public DefaultPrettyPrinter withoutSpacesInObjectEntries() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    protected DefaultPrettyPrinter _withSpaces(boolean state)\n    {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * @since 2.9\n     */\n    public DefaultPrettyPrinter withSeparators(Separators separators) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /*\n    /**********************************************************\n    /* Instantiatable impl\n    /**********************************************************\n     */\n\n    @Override\n    public DefaultPrettyPrinter createInstance() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /*\n    /**********************************************************\n    /* PrettyPrinter impl\n    /**********************************************************\n     */\n\n    @Override\n    public void writeRootValueSeparator(JsonGenerator g) throws IOException\n    {\n        if (_rootSeparator != null) {\n         //The specific code has been omitted, but there is no error\n        }\n    }\n\n    @Override\n    public void writeStartObject(JsonGenerator g) throws IOException\n    {\n        g.writeRaw('{');\n        if (!_objectIndenter.isInline()) {\n            ++_nesting;\n        }\n    }\n\n    @Override\n    public void beforeObjectEntries(JsonGenerator g) throws IOException\n    {\n        _objectIndenter.writeIndentation(g, _nesting);\n    }\n\n    /**\n     * Method called after an object field has been output, but\n     * before the value is output.\n     *<p>\n     * Default handling (without pretty-printing) will output a single\n     * colon to separate the two. Pretty-printer is\n     * to output a colon as well, but can surround that with other\n     * (white-space) decoration.\n     */\n    @Override\n    public void writeObjectFieldValueSeparator(JsonGenerator g) throws IOException\n    {\n        if (_spacesInObjectEntries) {\n         //The specific code has been omitted, but there is no error\n        } else {\n            g.writeRaw(_separators.getObjectFieldValueSeparator());\n        }\n    }\n\n    /**\n     * Method called after an object entry (field:value) has been completely\n     * output, and before another value is to be output.\n     *<p>\n     * Default handling (without pretty-printing) will output a single\n     * comma to separate the two. Pretty-printer is\n     * to output a comma as well, but can surround that with other\n     * (white-space) decoration.\n     */\n    @Override\n    public void writeObjectEntrySeparator(JsonGenerator g) throws IOException\n    {\n        g.writeRaw(_separators.getObjectEntrySeparator());\n        _objectIndenter.writeIndentation(g, _nesting);\n    }\n\n    @Override\n    public void writeEndObject(JsonGenerator g, int nrOfEntries) throws IOException\n    {\n        if (!_objectIndenter.isInline()) {\n            --_nesting;\n        }\n        if (nrOfEntries > 0) {\n         //The specific code has been omitted, but there is no error\n        } else {\n            g.writeRaw(' ');\n        }\n        g.writeRaw('}');\n    }\n\n    @Override\n    public void writeStartArray(JsonGenerator g) throws IOException\n    {\n        if (!_arrayIndenter.isInline()) {\n            ++_nesting;\n        }\n        g.writeRaw('[');\n    }\n\n    @Override\n    public void beforeArrayValues(JsonGenerator g) throws IOException {\n        _arrayIndenter.writeIndentation(g, _nesting);\n    }\n\n    /**\n     * Method called after an array value has been completely\n     * output, and before another value is to be output.\n     *<p>\n     * Default handling (without pretty-printing) will output a single\n     * comma to separate the two. Pretty-printer is\n     * to output a comma as well, but can surround that with other\n     * (white-space) decoration.\n     */\n    @Override\n    public void writeArrayValueSeparator(JsonGenerator g) throws IOException\n    {\n        g.writeRaw(_separators.getArrayValueSeparator());\n        _arrayIndenter.writeIndentation(g, _nesting);\n    }\n\n    @Override\n    public void writeEndArray(JsonGenerator g, int nrOfValues) throws IOException\n    {\n        if (!_arrayIndenter.isInline()) {\n            --_nesting;\n        }\n        if (nrOfValues > 0) {\n         //The specific code has been omitted, but there is no error\n        } else {\n            g.writeRaw(' ');\n        }\n        g.writeRaw(']');\n    }\n\n    /*\n    /**********************************************************\n    /* Helper classes\n    /**********************************************************\n     */\n\n    /**\n     * Dummy implementation that adds no indentation whatsoever\n     */\n    public static class NopIndenter\n        implements Indenter, java.io.Serializable\n    {\n        public static final NopIndenter instance = new NopIndenter();\n\n        @Override\n        public void writeIndentation(JsonGenerator g, int level) throws IOException { }\n\n        @Override\n        public boolean isInline() {\n         //The specific code has been omitted, but there is no error\n        }\n    }\n\n    /**\n     * This is a very simple indenter that only adds a\n     * single space for indentation. It is used as the default\n     * indenter for array values.\n     */\n    public static class FixedSpaceIndenter extends NopIndenter\n    {\n        public static final FixedSpaceIndenter instance = new FixedSpaceIndenter();\n\n        @Override\n        public void writeIndentation(JsonGenerator g, int level) throws IOException\n        {\n            g.writeRaw(' ');\n        }\n\n        @Override\n        public boolean isInline() {\n         //The specific code has been omitted, but there is no error\n        }\n    }\n}", "NopIndenter": "    public static class NopIndenter\n        implements Indenter, java.io.Serializable\n    {\n        public static final NopIndenter instance = new NopIndenter();\n\n        @Override\n        public void writeIndentation(JsonGenerator g, int level) throws IOException { }\n\n        @Override\n        public boolean isInline() {\n         //The specific code has been omitted, but there is no error\n        }\n    }", "FixedSpaceIndenter": "    public static class FixedSpaceIndenter extends NopIndenter\n    {\n        public static final FixedSpaceIndenter instance = new FixedSpaceIndenter();\n\n        @Override\n        public void writeIndentation(JsonGenerator g, int level) throws IOException\n        {\n            g.writeRaw(' ');\n        }\n\n        @Override\n        public boolean isInline() {\n         //The specific code has been omitted, but there is no error\n        }\n    }"}