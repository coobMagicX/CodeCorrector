{"Token": "abstract class Token {\n         //The specific code has been omitted, but there is no error\n        }", "Doctype": "    static final class Doctype extends Token {\n        final StringBuilder name = new StringBuilder();\n        String pubSysKey = null;\n        final StringBuilder publicIdentifier = new StringBuilder();\n        final StringBuilder systemIdentifier = new StringBuilder();\n        boolean forceQuirks = false;\n\n        Doctype() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        @Override\n        Token reset() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        String getName() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        String getPubSysKey() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        String getPublicIdentifier() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public String getSystemIdentifier() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        public boolean isForceQuirks() {\n         //The specific code has been omitted, but there is no error\n        }\n    }", "Tag": "    static abstract class Tag extends Token {\n        protected String tagName;\n        protected String normalName; // lc version of tag name, for case insensitive tree build\n        private String pendingAttributeName; // attribute names are generally caught in one hop, not accumulated\n        private StringBuilder pendingAttributeValue = new StringBuilder(); // but values are accumulated, from e.g. & in hrefs\n        private String pendingAttributeValueS; // try to get attr vals in one shot, vs Builder\n        private boolean hasEmptyAttributeValue = false; // distinguish boolean attribute from empty string value\n        private boolean hasPendingAttributeValue = false;\n        boolean selfClosing = false;\n        Attributes attributes; // start tags get attributes on construction. End tags get attributes on first new attribute (but only for parser convenience, not used).\n\n        @Override\n        Tag reset() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        final void newAttribute() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        final void finaliseTag() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        final String name() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        final String normalName() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        final Tag name(String name) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        final boolean isSelfClosing() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        @SuppressWarnings({\"TypeMayBeWeakened\"})\n        final Attributes getAttributes() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        // these appenders are rarely hit in not null state-- caused by null chars.\n        final void appendTagName(String append) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        final void appendTagName(char append) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        final void appendAttributeName(String append) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        final void appendAttributeName(char append) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        final void appendAttributeValue(String append) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        final void appendAttributeValue(char append) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        final void appendAttributeValue(char[] append) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        final void appendAttributeValue(int[] appendCodepoints) {\n         //The specific code has been omitted, but there is no error\n        }\n        \n        final void setEmptyAttributeValue() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        private void ensureAttributeValue() {\n         //The specific code has been omitted, but there is no error\n        }\n    }", "StartTag": "    final static class StartTag extends Tag {\n        StartTag() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        @Override\n        Tag reset() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        StartTag nameAttr(String name, Attributes attributes) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        @Override\n        public String toString() {\n         //The specific code has been omitted, but there is no error\n        }\n    }", "EndTag": "    final static class EndTag extends Tag{\n        EndTag() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        @Override\n        public String toString() {\n         //The specific code has been omitted, but there is no error\n        }\n    }", "Comment": "    final static class Comment extends Token {\n        final StringBuilder data = new StringBuilder();\n        boolean bogus = false;\n\n        @Override\n        Token reset() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        Comment() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        String getData() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        @Override\n        public String toString() {\n         //The specific code has been omitted, but there is no error\n        }\n    }", "Character": "    final static class Character extends Token {\n        private String data;\n\n        Character() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        @Override\n        Token reset() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        Character data(String data) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        String getData() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        @Override\n        public String toString() {\n         //The specific code has been omitted, but there is no error\n        }\n    }", "EOF": "    final static class EOF extends Token {\n        EOF() {\n         //The specific code has been omitted, but there is no error\n        }\n\n        @Override\n        Token reset() {\n         //The specific code has been omitted, but there is no error\n        }\n    }"}