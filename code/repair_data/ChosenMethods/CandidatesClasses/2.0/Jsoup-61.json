{"Element": "public class Element extends Node {\n    private Tag tag;\n\n    private static final Pattern classSplit = Pattern.compile(\"\\\\s+\");\n\n    /**\n     * Create a new, standalone element.\n     * @param tag tag name\n     */\n    public Element(String tag) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Create a new, standalone Element. (Standalone in that is has no parent.)\n     * \n     * @param tag tag of this element\n     * @param baseUri the base URI\n     * @param attributes initial attributes\n     * @see #appendChild(Node)\n     * @see #appendElement(String)\n     */\n    public Element(Tag tag, String baseUri, Attributes attributes) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Create a new Element from a tag and a base URI.\n     * \n     * @param tag element tag\n     * @param baseUri the base URI of this element. It is acceptable for the base URI to be an empty\n     *            string, but not null.\n     * @see Tag#valueOf(String, ParseSettings)\n     */\n    public Element(Tag tag, String baseUri) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    public String nodeName() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Get the name of the tag for this element. E.g. {@code div}\n     * \n     * @return the tag name\n     */\n    public String tagName() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Change the tag of this element. For example, convert a {@code <span>} to a {@code <div>} with\n     * {@code el.tagName(\"div\");}.\n     *\n     * @param tagName new tag name for this element\n     * @return this element, for chaining\n     */\n    public Element tagName(String tagName) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Get the Tag for this element.\n     * \n     * @return the tag object\n     */\n    public Tag tag() {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element\n     * {@code <p> == false}).\n     * \n     * @return true if block, false if not (and thus inline)\n     */\n    public boolean isBlock() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Get the {@code id} attribute of this element.\n     * \n     * @return The id attribute, if present, or an empty string if not.\n     */\n    public String id() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Set an attribute value on this element. If this element already has an attribute with the\n     * key, its value is updated; otherwise, a new attribute is added.\n     * \n     * @return this element\n     */\n    public Element attr(String attributeKey, String attributeValue) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Set a boolean attribute value on this element. Setting to <code>true</code> sets the attribute value to \"\" and\n     * marks the attribute as boolean so no value is written out. Setting to <code>false</code> removes the attribute\n     * with the same key if it exists.\n     * \n     * @param attributeKey the attribute key\n     * @param attributeValue the attribute value\n     * \n     * @return this element\n     */\n    public Element attr(String attributeKey, boolean attributeValue) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Get this element's HTML5 custom data attributes. Each attribute in the element that has a key\n     * starting with \"data-\" is included the dataset.\n     * <p>\n     * E.g., the element {@code <div data-package=\"jsoup\" data-language=\"Java\" class=\"group\">...} has the dataset\n     * {@code package=jsoup, language=java}.\n     * <p>\n     * This map is a filtered view of the element's attribute map. Changes to one map (add, remove, update) are reflected\n     * in the other map.\n     * <p>\n     * You can find elements that have data attributes using the {@code [^data-]} attribute key prefix selector.\n     * @return a map of {@code key=value} custom data attributes.\n     */\n    public Map<String, String> dataset() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    public final Element parent() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Get this element's parent and ancestors, up to the document root.\n     * @return this element's stack of parents, closest first.\n     */\n    public Elements parents() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    private static void accumulateParents(Element el, Elements parents) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Get a child element of this element, by its 0-based index number.\n     * <p>\n     * Note that an element can have both mixed Nodes and Elements as children. This method inspects\n     * a filtered list of children that are elements, and the index is based on that filtered list.\n     * </p>\n     * \n     * @param index the index number of the element to retrieve\n     * @return the child element, if it exists, otherwise throws an {@code IndexOutOfBoundsException}\n     * @see #childNode(int)\n     */\n    public Element child(int index) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Get this element's child elements.\n     * <p>\n     * This is effectively a filter on {@link #childNodes()} to get Element nodes.\n     * </p>\n     * @return child elements. If this element has no children, returns an\n     * empty list.\n     * @see #childNodes()\n     */\n    public Elements children() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Get this element's child text nodes. The list is unmodifiable but the text nodes may be manipulated.\n     * <p>\n     * This is effectively a filter on {@link #childNodes()} to get Text nodes.\n     * @return child text nodes. If this element has no text nodes, returns an\n     * empty list.\n     * </p>\n     * For example, with the input HTML: {@code <p>One <span>Two</span> Three <br> Four</p>} with the {@code p} element selected:\n     * <ul>\n     *     <li>{@code p.text()} = {@code \"One Two Three Four\"}</li>\n     *     <li>{@code p.ownText()} = {@code \"One Three Four\"}</li>\n     *     <li>{@code p.children()} = {@code Elements[<span>, <br>]}</li>\n     *     <li>{@code p.childNodes()} = {@code List<Node>[\"One \", <span>, \" Three \", <br>, \" Four\"]}</li>\n     *     <li>{@code p.textNodes()} = {@code List<TextNode>[\"One \", \" Three \", \" Four\"]}</li>\n     * </ul>\n     */\n    public List<TextNode> textNodes() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Get this element's child data nodes. The list is unmodifiable but the data nodes may be manipulated.\n     * <p>\n     * This is effectively a filter on {@link #childNodes()} to get Data nodes.\n     * </p>\n     * @return child data nodes. If this element has no data nodes, returns an\n     * empty list.\n     * @see #data()\n     */\n    public List<DataNode> dataNodes() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Find elements that match the {@link Selector} CSS query, with this element as the starting context. Matched elements\n     * may include this element, or any of its children.\n     * <p>\n     * This method is generally more powerful to use than the DOM-type {@code getElementBy*} methods, because\n     * multiple filters can be combined, e.g.:\n     * </p>\n     * <ul>\n     * <li>{@code el.select(\"a[href]\")} - finds links ({@code a} tags with {@code href} attributes)\n     * <li>{@code el.select(\"a[href*=example.com]\")} - finds links pointing to example.com (loosely)\n     * </ul>\n     * <p>\n     * See the query syntax documentation in {@link org.jsoup.select.Selector}.\n     * </p>\n     * \n     * @param cssQuery a {@link Selector} CSS-like query\n     * @return elements that match the query (empty if none match)\n     * @see org.jsoup.select.Selector\n     * @throws Selector.SelectorParseException (unchecked) on an invalid CSS query.\n     */\n    public Elements select(String cssQuery) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Check if this element matches the given {@link Selector} CSS query.\n     * @param cssQuery a {@link Selector} CSS query\n     * @return if this element matches the query\n     */\n    public boolean is(String cssQuery) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Check if this element matches the given evaluator.\n     * @param evaluator an element evaluator\n     * @return if this element matches\n     */\n    public boolean is(Evaluator evaluator) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Add a node child node to this element.\n     * \n     * @param child node to add.\n     * @return this element, so that you can add more child nodes or elements.\n     */\n    public Element appendChild(Node child) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Add a node to the start of this element's children.\n     * \n     * @param child node to add.\n     * @return this element, so that you can add more child nodes or elements.\n     */\n    public Element prependChild(Node child) {\n         //The specific code has been omitted, but there is no error\n        }\n\n\n    /**\n     * Inserts the given child nodes into this element at the specified index. Current nodes will be shifted to the\n     * right. The inserted nodes will be moved from their current parent. To prevent moving, copy the nodes first.\n     *\n     * @param index 0-based index to insert children at. Specify {@code 0} to insert at the start, {@code -1} at the\n     * end\n     * @param children child nodes to insert\n     * @return this element, for chaining.\n     */\n    public Element insertChildren(int index, Collection<? extends Node> children) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Create a new element by tag name, and add it as the last child.\n     * \n     * @param tagName the name of the tag (e.g. {@code div}).\n     * @return the new element, to allow you to add content to it, e.g.:\n     *  {@code parent.appendElement(\"h1\").attr(\"id\", \"header\").text(\"Welcome\");}\n     */\n    public Element appendElement(String tagName) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Create a new element by tag name, and add it as the first child.\n     * \n     * @param tagName the name of the tag (e.g. {@code div}).\n     * @return the new element, to allow you to add content to it, e.g.:\n     *  {@code parent.prependElement(\"h1\").attr(\"id\", \"header\").text(\"Welcome\");}\n     */\n    public Element prependElement(String tagName) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Create and append a new TextNode to this element.\n     * \n     * @param text the unencoded text to add\n     * @return this element\n     */\n    public Element appendText(String text) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Create and prepend a new TextNode to this element.\n     * \n     * @param text the unencoded text to add\n     * @return this element\n     */\n    public Element prependText(String text) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Add inner HTML to this element. The supplied HTML will be parsed, and each node appended to the end of the children.\n     * @param html HTML to add inside this element, after the existing HTML\n     * @return this element\n     * @see #html(String)\n     */\n    public Element append(String html) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Add inner HTML into this element. The supplied HTML will be parsed, and each node prepended to the start of the element's children.\n     * @param html HTML to add inside this element, before the existing HTML\n     * @return this element\n     * @see #html(String)\n     */\n    public Element prepend(String html) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Insert the specified HTML into the DOM before this element (as a preceding sibling).\n     *\n     * @param html HTML to add before this element\n     * @return this element, for chaining\n     * @see #after(String)\n     */\n    @Override\n    public Element before(String html) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Insert the specified node into the DOM before this node (as a preceding sibling).\n     * @param node to add before this element\n     * @return this Element, for chaining\n     * @see #after(Node)\n     */\n    @Override\n    public Element before(Node node) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Insert the specified HTML into the DOM after this element (as a following sibling).\n     *\n     * @param html HTML to add after this element\n     * @return this element, for chaining\n     * @see #before(String)\n     */\n    @Override\n    public Element after(String html) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Insert the specified node into the DOM after this node (as a following sibling).\n     * @param node to add after this element\n     * @return this element, for chaining\n     * @see #before(Node)\n     */\n    @Override\n    public Element after(Node node) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Remove all of the element's child nodes. Any attributes are left as-is.\n     * @return this element\n     */\n    public Element empty() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Wrap the supplied HTML around this element.\n     *\n     * @param html HTML to wrap around this element, e.g. {@code <div class=\"head\"></div>}. Can be arbitrarily deep.\n     * @return this element, for chaining.\n     */\n    @Override\n    public Element wrap(String html) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Get a CSS selector that will uniquely select this element.\n     * <p>\n     * If the element has an ID, returns #id;\n     * otherwise returns the parent (if any) CSS selector, followed by {@literal '>'},\n     * followed by a unique selector for the element (tag.class.class:nth-child(n)).\n     * </p>\n     *\n     * @return the CSS Path that can be used to retrieve the element in a selector.\n     */\n    public String cssSelector() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Get sibling elements. If the element has no sibling elements, returns an empty list. An element is not a sibling\n     * of itself, so will not be included in the returned list.\n     * @return sibling elements\n     */\n    public Elements siblingElements() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Gets the next sibling element of this element. E.g., if a {@code div} contains two {@code p}s, \n     * the {@code nextElementSibling} of the first {@code p} is the second {@code p}.\n     * <p>\n     * This is similar to {@link #nextSibling()}, but specifically finds only Elements\n     * </p>\n     * @return the next element, or null if there is no next element\n     * @see #previousElementSibling()\n     */\n    public Element nextElementSibling() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Gets the previous element sibling of this element.\n     * @return the previous element, or null if there is no previous element\n     * @see #nextElementSibling()\n     */\n    public Element previousElementSibling() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Gets the first element sibling of this element.\n     * @return the first sibling that is an element (aka the parent's first element child) \n     */\n    public Element firstElementSibling() {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Get the list index of this element in its element sibling list. I.e. if this is the first element\n     * sibling, returns 0.\n     * @return position in element sibling list\n     */\n    public Integer elementSiblingIndex() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Gets the last element sibling of this element\n     * @return the last sibling that is an element (aka the parent's last element child) \n     */\n    public Element lastElementSibling() {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    private static <E extends Element> Integer indexInList(Element search, List<E> elements) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    // DOM type methods\n\n    /**\n     * Finds elements, including and recursively under this element, with the specified tag name.\n     * @param tagName The tag name to search for (case insensitively).\n     * @return a matching unmodifiable list of elements. Will be empty if this element and none of its children match.\n     */\n    public Elements getElementsByTag(String tagName) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Find an element by ID, including or under this element.\n     * <p>\n     * Note that this finds the first matching ID, starting with this element. If you search down from a different\n     * starting point, it is possible to find a different element by ID. For unique element by ID within a Document,\n     * use {@link Document#getElementById(String)}\n     * @param id The ID to search for.\n     * @return The first matching element by ID, starting with this element, or null if none found.\n     */\n    public Element getElementById(String id) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Find elements that have this class, including or under this element. Case insensitive.\n     * <p>\n     * Elements can have multiple classes (e.g. {@code <div class=\"header round first\">}. This method\n     * checks each class, so you can find the above with {@code el.getElementsByClass(\"header\");}.\n     * \n     * @param className the name of the class to search for.\n     * @return elements with the supplied class name, empty if none\n     * @see #hasClass(String)\n     * @see #classNames()\n     */\n    public Elements getElementsByClass(String className) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Find elements that have a named attribute set. Case insensitive.\n     *\n     * @param key name of the attribute, e.g. {@code href}\n     * @return elements that have this attribute, empty if none\n     */\n    public Elements getElementsByAttribute(String key) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Find elements that have an attribute name starting with the supplied prefix. Use {@code data-} to find elements\n     * that have HTML5 datasets.\n     * @param keyPrefix name prefix of the attribute e.g. {@code data-}\n     * @return elements that have attribute names that start with with the prefix, empty if none.\n     */\n    public Elements getElementsByAttributeStarting(String keyPrefix) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Find elements that have an attribute with the specific value. Case insensitive.\n     * \n     * @param key name of the attribute\n     * @param value value of the attribute\n     * @return elements that have this attribute with this value, empty if none\n     */\n    public Elements getElementsByAttributeValue(String key, String value) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Find elements that either do not have this attribute, or have it with a different value. Case insensitive.\n     * \n     * @param key name of the attribute\n     * @param value value of the attribute\n     * @return elements that do not have a matching attribute\n     */\n    public Elements getElementsByAttributeValueNot(String key, String value) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Find elements that have attributes that start with the value prefix. Case insensitive.\n     * \n     * @param key name of the attribute\n     * @param valuePrefix start of attribute value\n     * @return elements that have attributes that start with the value prefix\n     */\n    public Elements getElementsByAttributeValueStarting(String key, String valuePrefix) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Find elements that have attributes that end with the value suffix. Case insensitive.\n     * \n     * @param key name of the attribute\n     * @param valueSuffix end of the attribute value\n     * @return elements that have attributes that end with the value suffix\n     */\n    public Elements getElementsByAttributeValueEnding(String key, String valueSuffix) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Find elements that have attributes whose value contains the match string. Case insensitive.\n     * \n     * @param key name of the attribute\n     * @param match substring of value to search for\n     * @return elements that have attributes containing this text\n     */\n    public Elements getElementsByAttributeValueContaining(String key, String match) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Find elements that have attributes whose values match the supplied regular expression.\n     * @param key name of the attribute\n     * @param pattern compiled regular expression to match against attribute values\n     * @return elements that have attributes matching this regular expression\n     */\n    public Elements getElementsByAttributeValueMatching(String key, Pattern pattern) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Find elements that have attributes whose values match the supplied regular expression.\n     * @param key name of the attribute\n     * @param regex regular expression to match against attribute values. You can use <a href=\"http://java.sun.com/docs/books/tutorial/essential/regex/pattern.html#embedded\">embedded flags</a> (such as (?i) and (?m) to control regex options.\n     * @return elements that have attributes matching this regular expression\n     */\n    public Elements getElementsByAttributeValueMatching(String key, String regex) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Find elements whose sibling index is less than the supplied index.\n     * @param index 0-based index\n     * @return elements less than index\n     */\n    public Elements getElementsByIndexLessThan(int index) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Find elements whose sibling index is greater than the supplied index.\n     * @param index 0-based index\n     * @return elements greater than index\n     */\n    public Elements getElementsByIndexGreaterThan(int index) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Find elements whose sibling index is equal to the supplied index.\n     * @param index 0-based index\n     * @return elements equal to index\n     */\n    public Elements getElementsByIndexEquals(int index) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Find elements that contain the specified string. The search is case insensitive. The text may appear directly\n     * in the element, or in any of its descendants.\n     * @param searchText to look for in the element's text\n     * @return elements that contain the string, case insensitive.\n     * @see Element#text()\n     */\n    public Elements getElementsContainingText(String searchText) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Find elements that directly contain the specified string. The search is case insensitive. The text must appear directly\n     * in the element, not in any of its descendants.\n     * @param searchText to look for in the element's own text\n     * @return elements that contain the string, case insensitive.\n     * @see Element#ownText()\n     */\n    public Elements getElementsContainingOwnText(String searchText) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Find elements whose text matches the supplied regular expression.\n     * @param pattern regular expression to match text against\n     * @return elements matching the supplied regular expression.\n     * @see Element#text()\n     */\n    public Elements getElementsMatchingText(Pattern pattern) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Find elements whose text matches the supplied regular expression.\n     * @param regex regular expression to match text against. You can use <a href=\"http://java.sun.com/docs/books/tutorial/essential/regex/pattern.html#embedded\">embedded flags</a> (such as (?i) and (?m) to control regex options.\n     * @return elements matching the supplied regular expression.\n     * @see Element#text()\n     */\n    public Elements getElementsMatchingText(String regex) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Find elements whose own text matches the supplied regular expression.\n     * @param pattern regular expression to match text against\n     * @return elements matching the supplied regular expression.\n     * @see Element#ownText()\n     */\n    public Elements getElementsMatchingOwnText(Pattern pattern) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Find elements whose text matches the supplied regular expression.\n     * @param regex regular expression to match text against. You can use <a href=\"http://java.sun.com/docs/books/tutorial/essential/regex/pattern.html#embedded\">embedded flags</a> (such as (?i) and (?m) to control regex options.\n     * @return elements matching the supplied regular expression.\n     * @see Element#ownText()\n     */\n    public Elements getElementsMatchingOwnText(String regex) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Find all elements under this element (including self, and children of children).\n     * \n     * @return all elements\n     */\n    public Elements getAllElements() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Gets the combined text of this element and all its children. Whitespace is normalized and trimmed.\n     * <p>\n     * For example, given HTML {@code <p>Hello  <b>there</b> now! </p>}, {@code p.text()} returns {@code \"Hello there now!\"}\n     *\n     * @return unencoded text, or empty string if none.\n     * @see #ownText()\n     * @see #textNodes()\n     */\n    public String text() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Gets the text owned by this element only; does not get the combined text of all children.\n     * <p>\n     * For example, given HTML {@code <p>Hello <b>there</b> now!</p>}, {@code p.ownText()} returns {@code \"Hello now!\"},\n     * whereas {@code p.text()} returns {@code \"Hello there now!\"}.\n     * Note that the text within the {@code b} element is not returned, as it is not a direct child of the {@code p} element.\n     *\n     * @return unencoded text, or empty string if none.\n     * @see #text()\n     * @see #textNodes()\n     */\n    public String ownText() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    private void ownText(StringBuilder accum) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    private static void appendNormalisedText(StringBuilder accum, TextNode textNode) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    private static void appendWhitespaceIfBr(Element element, StringBuilder accum) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    static boolean preserveWhitespace(Node node) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Set the text of this element. Any existing contents (text or elements) will be cleared\n     * @param text unencoded text\n     * @return this element\n     */\n    public Element text(String text) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     Test if this element has any text content (that is not just whitespace).\n     @return true if element has non-blank text content.\n     */\n    public boolean hasText() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Get the combined data of this element. Data is e.g. the inside of a {@code script} tag.\n     * @return the data, or empty string if none\n     *\n     * @see #dataNodes()\n     */\n    public String data() {\n         //The specific code has been omitted, but there is no error\n        }   \n\n    /**\n     * Gets the literal value of this element's \"class\" attribute, which may include multiple class names, space\n     * separated. (E.g. on <code>&lt;div class=\"header gray\"&gt;</code> returns, \"<code>header gray</code>\")\n     * @return The literal class attribute, or <b>empty string</b> if no class attribute set.\n     */\n    public String className() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Get all of the element's class names. E.g. on element {@code <div class=\"header gray\">},\n     * returns a set of two elements {@code \"header\", \"gray\"}. Note that modifications to this set are not pushed to\n     * the backing {@code class} attribute; use the {@link #classNames(java.util.Set)} method to persist them.\n     * @return set of classnames, empty if no class attribute\n     */\n    public Set<String> classNames() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     Set the element's {@code class} attribute to the supplied class names.\n     @param classNames set of classes\n     @return this element, for chaining\n     */\n    public Element classNames(Set<String> classNames) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Tests if this element has a class. Case insensitive.\n     * @param className name of class to check for\n     * @return true if it does, false if not\n     */\n    // performance sensitive\n    public boolean hasClass(String className) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     Add a class name to this element's {@code class} attribute.\n     @param className class name to add\n     @return this element\n     */\n    public Element addClass(String className) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     Remove a class name from this element's {@code class} attribute.\n     @param className class name to remove\n     @return this element\n     */\n    public Element removeClass(String className) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     Toggle a class name on this element's {@code class} attribute: if present, remove it; otherwise add it.\n     @param className class name to toggle\n     @return this element\n     */\n    public Element toggleClass(String className) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Get the value of a form element (input, textarea, etc).\n     * @return the value of the form element, or empty string if not set.\n     */\n    public String val() {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Set the value of a form element (input, textarea, etc).\n     * @param value value to set\n     * @return this element (for chaining)\n     */\n    public Element val(String value) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        if (out.prettyPrint() && (tag.formatAsBlock() || (parent() != null && parent().tag().formatAsBlock()) || out.outline())) {\n            if (accum instanceof StringBuilder) {\n         //The specific code has been omitted, but there is no error\n        } else {\n                indent(accum, depth, out);\n            }\n        }\n        accum\n                .append(\"<\")\n                .append(tagName());\n        attributes.html(accum, out);\n\n        // selfclosing includes unknown tags, isEmpty defines tags that are always empty\n        if (childNodes.isEmpty() && tag.isSelfClosing()) {\n            if (out.syntax() == Document.OutputSettings.Syntax.html && tag.isEmpty())\n                accum.append('>');\n            else\n                accum.append(\" />\"); // <img> in html, <img /> in xml\n        }\n        else\n            accum.append(\">\");\n    }\n\n\tvoid outerHtmlTail(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        if (!(childNodes.isEmpty() && tag.isSelfClosing())) {\n            if (out.prettyPrint() && (!childNodes.isEmpty() && (\n                    tag.formatAsBlock() || (out.outline() && (childNodes.size()>1 || (childNodes.size()==1 && !(childNodes.get(0) instanceof TextNode))))\n            )))\n                indent(accum, depth, out);\n            accum.append(\"</\").append(tagName()).append(\">\");\n        }\n    }\n\n    /**\n     * Retrieves the element's inner HTML. E.g. on a {@code <div>} with one empty {@code <p>}, would return\n     * {@code <p></p>}. (Whereas {@link #outerHtml()} would return {@code <div><p></p></div>}.)\n     * \n     * @return String of HTML.\n     * @see #outerHtml()\n     */\n    public String html() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    private void html(StringBuilder accum) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public <T extends Appendable> T html(T appendable) {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /**\n     * Set this element's inner HTML. Clears the existing HTML first.\n     * @param html HTML to parse and set into this element\n     * @return this element\n     * @see #append(String)\n     */\n    public Element html(String html) {\n         //The specific code has been omitted, but there is no error\n        }\n\n\tpublic String toString() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    public Element clone() {\n         //The specific code has been omitted, but there is no error\n        }\n}"}