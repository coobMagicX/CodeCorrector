{"DefaultDateTypeAdapter": "final class DefaultDateTypeAdapter extends TypeAdapter<Date> {\n\n  private static final String SIMPLE_NAME = \"DefaultDateTypeAdapter\";\n\n  private final Class<? extends Date> dateType;\n  private final DateFormat enUsFormat;\n  private final DateFormat localFormat;\n  \n  DefaultDateTypeAdapter(Class<? extends Date> dateType) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  DefaultDateTypeAdapter(Class<? extends Date> dateType, String datePattern) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  DefaultDateTypeAdapter(Class<? extends Date> dateType, int style) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  public DefaultDateTypeAdapter(int dateStyle, int timeStyle) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  public DefaultDateTypeAdapter(Class<? extends Date> dateType, int dateStyle, int timeStyle) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  DefaultDateTypeAdapter(final Class<? extends Date> dateType, DateFormat enUsFormat, DateFormat localFormat) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  // These methods need to be synchronized since JDK DateFormat classes are not thread-safe\n  // See issue 162\n  @Override\n  public void write(JsonWriter out, Date value) throws IOException {\n    if (value == null) {\n         //The specific code has been omitted, but there is no error\n        }\n    synchronized (localFormat) {\n         //The specific code has been omitted, but there is no error\n        }\n  }\n\n  @Override\n  public Date read(JsonReader in) throws IOException {\n    if (in.peek() != JsonToken.STRING) {\n      throw new JsonParseException(\"The date should be a string value\");\n    }\n    Date date = deserializeToDate(in.nextString());\n    if (dateType == Date.class) {\n         //The specific code has been omitted, but there is no error\n        } else if (dateType == Timestamp.class) {\n         //The specific code has been omitted, but there is no error\n        } else if (dateType == java.sql.Date.class) {\n         //The specific code has been omitted, but there is no error\n        } else {\n      // This must never happen: dateType is guarded in the primary constructor\n      throw new AssertionError();\n    }\n  }\n\n  private Date deserializeToDate(String s) {\n         //The specific code has been omitted, but there is no error\n        }\n\n  @Override\n  public String toString() {\n         //The specific code has been omitted, but there is no error\n        }\n}"}