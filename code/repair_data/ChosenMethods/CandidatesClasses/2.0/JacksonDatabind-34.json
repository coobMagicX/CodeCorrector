{"NumberSerializer": "public class NumberSerializer\n    extends StdScalarSerializer<Number>\n{\n    /**\n     * Static instance that is only to be used for {@link java.lang.Number}.\n     */\n    public final static NumberSerializer instance = new NumberSerializer(Number.class);\n\n    protected final boolean _isInt;\n\n    /**\n     * @since 2.5\n     */\n    public NumberSerializer(Class<? extends Number> rawType) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    public void serialize(Number value, JsonGenerator g, SerializerProvider provider) throws IOException\n    {\n        // should mostly come in as one of these two:\n        if (value instanceof BigDecimal) {\n         //The specific code has been omitted, but there is no error\n        } else if (value instanceof BigInteger) {\n         //The specific code has been omitted, but there is no error\n        } else if (value instanceof Integer) {\n         //The specific code has been omitted, but there is no error\n        } else if (value instanceof Long) {\n         //The specific code has been omitted, but there is no error\n        } else if (value instanceof Double) {\n         //The specific code has been omitted, but there is no error\n        } else if (value instanceof Float) {\n         //The specific code has been omitted, but there is no error\n        } else if ((value instanceof Byte) || (value instanceof Short)) {\n            g.writeNumber(value.intValue()); // doesn't need to be cast to smaller numbers\n        } else {\n            // We'll have to use fallback \"untyped\" number write method\n            g.writeNumber(value.toString());\n        }\n    }\n\n    @Override\n    public JsonNode getSchema(SerializerProvider provider, Type typeHint) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException\n    {\n        if (_isInt) {\n         //The specific code has been omitted, but there is no error\n        } else {\n            Class<?> h = handledType();\n            if (h == BigDecimal.class) {\n         //The specific code has been omitted, but there is no error\n        } else {\n                // otherwise bit unclear what to call... but let's try:\n                /*JsonNumberFormatVisitor v2 =*/ visitor.expectNumberFormat(typeHint);\n            }\n        }\n    }\n}"}