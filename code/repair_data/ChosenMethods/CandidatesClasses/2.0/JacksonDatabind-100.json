{"TreeTraversingParser": "public class TreeTraversingParser extends ParserMinimalBase\n{\n    /*\n    /**********************************************************\n    /* Configuration\n    /**********************************************************\n     */\n\n    protected ObjectCodec _objectCodec;\n\n    /**\n     * Traversal context within tree\n     */\n    protected NodeCursor _nodeCursor;\n\n    /*\n    /**********************************************************\n    /* State\n    /**********************************************************\n     */\n\n    /**\n     * Sometimes parser needs to buffer a single look-ahead token; if so,\n     * it'll be stored here. This is currently used for handling \n     */\n    protected JsonToken _nextToken;\n\n    /**\n     * Flag needed to handle recursion into contents of child\n     * Array/Object nodes.\n     */\n    protected boolean _startContainer;\n    \n    /**\n     * Flag that indicates whether parser is closed or not. Gets\n     * set when parser is either closed by explicit call\n     * ({@link #close}) or when end-of-input is reached.\n     */\n    protected boolean _closed;\n\n    /*\n    /**********************************************************\n    /* Life-cycle\n    /**********************************************************\n     */\n\n    public TreeTraversingParser(JsonNode n) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    public TreeTraversingParser(JsonNode n, ObjectCodec codec)\n    {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    public void setCodec(ObjectCodec c) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    public ObjectCodec getCodec() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    public Version version() {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /*\n    /**********************************************************\n    /* Closeable implementation\n    /**********************************************************\n     */\n\n    @Override\n    public void close() throws IOException\n    {\n        if (!_closed) {\n         //The specific code has been omitted, but there is no error\n        }\n    }\n\n    /*\n    /**********************************************************\n    /* Public API, traversal\n    /**********************************************************\n     */\n\n    @Override\n    public JsonToken nextToken() throws IOException, JsonParseException\n    {\n        if (_nextToken != null) {\n         //The specific code has been omitted, but there is no error\n        }\n        // are we to descend to a container child?\n        if (_startContainer) {\n         //The specific code has been omitted, but there is no error\n        }\n        // No more content?\n        if (_nodeCursor == null) {\n         //The specific code has been omitted, but there is no error\n        }\n        // Otherwise, next entry from current cursor\n        _currToken = _nodeCursor.nextToken();\n        if (_currToken != null) {\n         //The specific code has been omitted, but there is no error\n        }\n        // null means no more children; need to return end marker\n        _currToken = _nodeCursor.endToken();\n        _nodeCursor = _nodeCursor.getParent();\n        return _currToken;\n    }\n    \n    // default works well here:\n    //public JsonToken nextValue() throws IOException, JsonParseException\n\n    @Override\n    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken == JsonToken.START_OBJECT) {\n         //The specific code has been omitted, but there is no error\n        } else if (_currToken == JsonToken.START_ARRAY) {\n         //The specific code has been omitted, but there is no error\n        }\n        return this;\n    }\n\n    @Override\n    public boolean isClosed() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /*\n    /**********************************************************\n    /* Public API, token accessors\n    /**********************************************************\n     */\n\n    @Override\n    public String getCurrentName() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    public void overrideCurrentName(String name)\n    {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    @Override\n    public JsonStreamContext getParsingContext() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    public JsonLocation getTokenLocation() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    public JsonLocation getCurrentLocation() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /*\n    /**********************************************************\n    /* Public API, access to textual content\n    /**********************************************************\n     */\n\n    @Override\n    public String getText()\n    {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    public char[] getTextCharacters() throws IOException, JsonParseException {\n        return getText().toCharArray();\n    }\n\n    @Override\n    public int getTextLength() throws IOException, JsonParseException {\n        return getText().length();\n    }\n\n    @Override\n    public int getTextOffset() throws IOException, JsonParseException {\n        return 0;\n    }\n\n    @Override\n    public boolean hasTextCharacters() {\n         //The specific code has been omitted, but there is no error\n        }\n    \n    /*\n    /**********************************************************\n    /* Public API, typed non-text access\n    /**********************************************************\n     */\n\n    //public byte getByteValue() throws IOException, JsonParseException\n\n    @Override\n    public NumberType getNumberType() throws IOException, JsonParseException {\n        JsonNode n = currentNumericNode();\n        return (n == null) ? null : n.numberType();\n    }\n\n    @Override\n    public BigInteger getBigIntegerValue() throws IOException, JsonParseException\n    {\n        return currentNumericNode().bigIntegerValue();\n    }\n\n    @Override\n    public BigDecimal getDecimalValue() throws IOException, JsonParseException {\n        return currentNumericNode().decimalValue();\n    }\n\n    @Override\n    public double getDoubleValue() throws IOException, JsonParseException {\n        return currentNumericNode().doubleValue();\n    }\n\n    @Override\n    public float getFloatValue() throws IOException, JsonParseException {\n        return (float) currentNumericNode().doubleValue();\n    }\n\n    @Override\n    public long getLongValue() throws IOException, JsonParseException {\n        return currentNumericNode().longValue();\n    }\n\n    @Override\n    public int getIntValue() throws IOException, JsonParseException {\n        return currentNumericNode().intValue();\n    }\n\n    @Override\n    public Number getNumberValue() throws IOException, JsonParseException {\n        return currentNumericNode().numberValue();\n    }\n\n    @Override\n    public Object getEmbeddedObject()\n    {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    public boolean isNaN() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /*\n    /**********************************************************\n    /* Public API, typed binary (base64) access\n    /**********************************************************\n     */\n\n    @Override\n    public byte[] getBinaryValue(Base64Variant b64variant)\n        throws IOException, JsonParseException\n    {\n        // Multiple possibilities...\n        JsonNode n = currentNode();\n        if (n != null) {\n         //The specific code has been omitted, but there is no error\n        }\n        // otherwise return null to mark we have no binary content\n        return null;\n    }\n\n\n    @Override\n    public int readBinaryValue(Base64Variant b64variant, OutputStream out)\n            throws IOException, JsonParseException\n    {\n        byte[] data = getBinaryValue(b64variant);\n        if (data != null) {\n         //The specific code has been omitted, but there is no error\n        }\n        return 0;\n    }\n\n    /*\n    /**********************************************************\n    /* Internal methods\n    /**********************************************************\n     */\n\n    protected JsonNode currentNode() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    protected JsonNode currentNumericNode()\n        throws JsonParseException\n    {\n        JsonNode n = currentNode();\n        if (n == null || !n.isNumber()) {\n            JsonToken t = (n == null) ? null : n.asToken();\n            throw _constructError(\"Current token (\"+t+\") not numeric, cannot use numeric value accessors\");\n        }\n        return n;\n    }\n\n    @Override\n    protected void _handleEOF() throws JsonParseException {\n        _throwInternal(); // should never get called\n    }\n}"}