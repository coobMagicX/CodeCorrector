{"PropertyPointer": "public abstract class PropertyPointer extends NodePointer {\n    public static final int UNSPECIFIED_PROPERTY = Integer.MIN_VALUE;\n\n    /** property index */\n    protected int propertyIndex = UNSPECIFIED_PROPERTY;\n\n    /** owning object */\n    protected Object bean;\n\n    /**\n     * Takes a javabean, a descriptor of a property of that object and\n     * an offset within that property (starting with 0).\n     * @param parent parent pointer\n     */\n    public PropertyPointer(NodePointer parent) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Get the property index.\n     * @return int index\n     */\n    public int getPropertyIndex() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Set the property index.\n     * @param index property index\n     */\n    public void setPropertyIndex(int index) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Get the parent bean.\n     * @return Object\n     */\n    public Object getBean() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    public QName getName() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Get the property name.\n     * @return String property name.\n     */\n    public abstract String getPropertyName();\n\n    /**\n     * Set the property name.\n     * @param propertyName property name to set.\n     */\n    public abstract void setPropertyName(String propertyName);\n\n    /**\n     * Count the number of properties represented.\n     * @return int\n     */\n    public abstract int getPropertyCount();\n\n    /**\n     * Get the names of the included properties.\n     * @return String[]\n     */\n    public abstract String[] getPropertyNames();\n\n    /**\n     * Learn whether this pointer references an actual property.\n     * @return true if actual\n     */\n    protected abstract boolean isActualProperty();\n\n    public boolean isActual() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    private static final Object UNINITIALIZED = new Object();\n\n    private Object value = UNINITIALIZED;\n\n    public Object getImmediateNode() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    public boolean isCollection() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    public boolean isLeaf() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * If the property contains a collection, then the length of that\n     * collection, otherwise - 1.\n     * @return int length\n     */\n    public int getLength() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Returns a NodePointer that can be used to access the currently\n     * selected property value.\n     * @return NodePointer\n     */\n    public NodePointer getImmediateValuePointer() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    public NodePointer createPath(JXPathContext context) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    public NodePointer createPath(JXPathContext context, Object value) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    public NodePointer createChild(\n        JXPathContext context,\n        QName name,\n        int index,\n        Object value) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    public NodePointer createChild(\n        JXPathContext context,\n        QName name,\n        int index) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    public int hashCode() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    public boolean equals(Object object) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) {\n         //The specific code has been omitted, but there is no error\n        }\n\n}"}