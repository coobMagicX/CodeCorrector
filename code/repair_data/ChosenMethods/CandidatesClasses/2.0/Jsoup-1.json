{"Document": "public class Document extends Element {\n\n    /**\n     Create a new, empty Document.\n     @param baseUri base URI of document\n     @see org.jsoup.Jsoup#parse\n     @see #createShell\n     */\n    public Document(String baseUri) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     Create a valid, empty shell of a document, suitable for adding more elements to.\n     @param baseUri baseUri of document\n     @return document with html, head, and body elements.\n     */\n    static public Document createShell(String baseUri) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     Accessor to the document's {@code head} element.\n     @return {@code head}\n     */\n    public Element head() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     Accessor to the document's {@code body} element.\n     @return {@code body}\n     */\n    public Element body() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     Get the string contents of the document's {@code title} element.\n     @return Trimed title, or empty string if none set.\n     */\n    public String title() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     Set the document's {@code title} element. Updates the existing element, or adds {@code title} to {@code head} if\n     not present\n     @param title string to set as title\n     */\n    public void title(String title) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     Create a new Element, with this document's base uri. Does not make the new element a child of this document.\n     @param tagName element tag name (e.g. {@code a})\n     @return new element\n     */\n    public Element createElement(String tagName) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     Normalise the document. This happens after the parse phase so generally does not need to be called.\n     Moves any text content that is not in the body element into the body.\n     @return this document after normalisation\n     */\n    public Document normalise() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    // does not recurse.\n    private void normalise(Element element) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    public String outerHtml() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     Set the text of the {@code body} of this document. Any existing nodes within the body will be cleared.\n     @param text unencoded text\n     @return this document\n     */\n    @Override\n    public Element text(String text) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    @Override\n    public String nodeName() {\n         //The specific code has been omitted, but there is no error\n        }\n}"}