{"BZip2CompressorInputStream": "public class BZip2CompressorInputStream extends CompressorInputStream implements\n                                                                          BZip2Constants {\n\n    /**\n     * Index of the last char in the block, so the block size == last + 1.\n     */\n    private int last;\n\n    /**\n     * Index in zptr[] of original string after sorting.\n     */\n    private int origPtr;\n\n    /**\n     * always: in the range 0 .. 9. The current block size is 100000 * this\n     * number.\n     */\n    private int blockSize100k;\n\n    private boolean blockRandomised;\n\n    private int bsBuff;\n    private int bsLive;\n    private final CRC crc = new CRC();\n\n    private int nInUse;\n\n    private InputStream in;\n    private final boolean decompressConcatenated;\n\n    private static final int EOF = 0;\n    private static final int START_BLOCK_STATE = 1;\n    private static final int RAND_PART_A_STATE = 2;\n    private static final int RAND_PART_B_STATE = 3;\n    private static final int RAND_PART_C_STATE = 4;\n    private static final int NO_RAND_PART_A_STATE = 5;\n    private static final int NO_RAND_PART_B_STATE = 6;\n    private static final int NO_RAND_PART_C_STATE = 7;\n\n    private int currentState = START_BLOCK_STATE;\n\n    private int storedBlockCRC, storedCombinedCRC;\n    private int computedBlockCRC, computedCombinedCRC;\n\n    // Variables used by setup* methods exclusively\n\n    private int su_count;\n    private int su_ch2;\n    private int su_chPrev;\n    private int su_i2;\n    private int su_j2;\n    private int su_rNToGo;\n    private int su_rTPos;\n    private int su_tPos;\n    private char su_z;\n\n    /**\n     * All memory intensive stuff. This field is initialized by initBlock().\n     */\n    private BZip2CompressorInputStream.Data data;\n\n    /**\n     * Constructs a new BZip2CompressorInputStream which decompresses bytes\n     * read from the specified stream. This doesn't suppprt decompressing\n     * concatenated .bz2 files.\n     * \n     * @throws IOException\n     *             if the stream content is malformed or an I/O error occurs.\n     * @throws NullPointerException\n     *             if {@code in == null}\n     */\n    public BZip2CompressorInputStream(final InputStream in) throws IOException {\n        this(in, false);\n    }\n\n    /**\n     * Constructs a new BZip2CompressorInputStream which decompresses bytes\n     * read from the specified stream.\n     *\n     * @param in the InputStream from which this object should be created\n     * @param decompressConcatenated\n     *                     if true, decompress until the end of the input;\n     *                     if false, stop after the first .bz2 stream and\n     *                     leave the input position to point to the next\n     *                     byte after the .bz2 stream\n     *\n     * @throws IOException\n     *             if the stream content is malformed or an I/O error occurs.\n     * @throws NullPointerException\n     *             if {@code in == null}\n     */\n    public BZip2CompressorInputStream(final InputStream in, final boolean decompressConcatenated) throws IOException {\n        this.in = in;\n        this.decompressConcatenated = decompressConcatenated;\n\n        init(true);\n        initBlock();\n    }\n\n    @Override\n    public int read() throws IOException {\n        if (this.in != null) {\n         //The specific code has been omitted, but there is no error\n        } else {\n            throw new IOException(\"stream closed\");\n        }\n    }\n\n    /*\n     * (non-Javadoc)\n     * \n     * @see java.io.InputStream#read(byte[], int, int)\n     */\n    @Override\n    public int read(final byte[] dest, final int offs, final int len)\n        throws IOException {\n        if (offs < 0) {\n         //The specific code has been omitted, but there is no error\n        }\n        if (len < 0) {\n         //The specific code has been omitted, but there is no error\n        }\n        if (offs + len > dest.length) {\n         //The specific code has been omitted, but there is no error\n        }\n        if (this.in == null) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        final int hi = offs + len;\n        int destOffs = offs;\n        int b;\n        while (destOffs < hi && ((b = read0()) >= 0)) {\n            dest[destOffs++] = (byte) b;\n            count(1);\n        }\n\n        int c = (destOffs == offs) ? -1 : (destOffs - offs);\n        return c;\n    }\n\n    private void makeMaps() {\n         //The specific code has been omitted, but there is no error\n        }\n\n    private int read0() throws IOException {\n        switch (currentState) {\n         //The specific code has been omitted, but there is no error\n        }\n    }\n\n    private boolean init(boolean isFirstStream) throws IOException {\n        if (null == in) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        int magic0 = this.in.read();\n        if (magic0 == -1 && !isFirstStream) {\n         //The specific code has been omitted, but there is no error\n        }\n        int magic1 = this.in.read();\n        int magic2 = this.in.read();\n\n        if (magic0 != 'B' || magic1 != 'Z' || magic2 != 'h') {\n         //The specific code has been omitted, but there is no error\n        }\n\n        int blockSize = this.in.read();\n        if ((blockSize < '1') || (blockSize > '9')) {\n            throw new IOException(\"BZip2 block size is invalid\");\n        }\n\n        this.blockSize100k = blockSize - '0';\n\n        this.bsLive = 0;\n        this.computedCombinedCRC = 0;\n\n        return true;\n    }\n\n    private void initBlock() throws IOException {\n        char magic0;\n        char magic1;\n        char magic2;\n        char magic3;\n        char magic4;\n        char magic5;\n\n        while (true) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        if (magic0 != 0x31 || // '1'\n            magic1 != 0x41 || // ')'\n            magic2 != 0x59 || // 'Y'\n            magic3 != 0x26 || // '&'\n            magic4 != 0x53 || // 'S'\n            magic5 != 0x59 // 'Y'\n            ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n         //The specific code has been omitted, but there is no error\n        }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }\n\n    private void endBlock() throws IOException {\n        this.computedBlockCRC = this.crc.getFinalCRC();\n\n        // A bad CRC is considered a fatal error.\n        if (this.storedBlockCRC != this.computedBlockCRC) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        this.computedCombinedCRC = (this.computedCombinedCRC << 1)\n            | (this.computedCombinedCRC >>> 31);\n        this.computedCombinedCRC ^= this.computedBlockCRC;\n    }\n\n    private boolean complete() throws IOException {\n        this.storedCombinedCRC = bsGetInt();\n        this.currentState = EOF;\n        this.data = null;\n\n        if (this.storedCombinedCRC != this.computedCombinedCRC) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        // Look for the next .bz2 stream if decompressing\n        // concatenated files.\n        return !decompressConcatenated || !init(false);\n    }\n\n    @Override\n    public void close() throws IOException {\n        InputStream inShadow = this.in;\n        if (inShadow != null) {\n         //The specific code has been omitted, but there is no error\n        }\n    }\n\n    private int bsR(final int n) throws IOException {\n        int bsLiveShadow = this.bsLive;\n        int bsBuffShadow = this.bsBuff;\n\n        if (bsLiveShadow < n) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        this.bsLive = bsLiveShadow - n;\n        return (bsBuffShadow >> (bsLiveShadow - n)) & ((1 << n) - 1);\n    }\n\n    private boolean bsGetBit() throws IOException {\n        int bsLiveShadow = this.bsLive;\n        int bsBuffShadow = this.bsBuff;\n\n        if (bsLiveShadow < 1) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        this.bsLive = bsLiveShadow - 1;\n        return ((bsBuffShadow >> (bsLiveShadow - 1)) & 1) != 0;\n    }\n\n    private char bsGetUByte() throws IOException {\n        return (char) bsR(8);\n    }\n\n    private int bsGetInt() throws IOException {\n        return (((((bsR(8) << 8) | bsR(8)) << 8) | bsR(8)) << 8) | bsR(8);\n    }\n\n    /**\n     * Called by createHuffmanDecodingTables() exclusively.\n     */\n    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    private void recvDecodingTables() throws IOException {\n        final Data dataShadow = this.data;\n        final boolean[] inUse = dataShadow.inUse;\n        final byte[] pos = dataShadow.recvDecodingTables_pos;\n        final byte[] selector = dataShadow.selector;\n        final byte[] selectorMtf = dataShadow.selectorMtf;\n\n        int inUse16 = 0;\n\n        /* Receive the mapping table */\n        for (int i = 0; i < 16; i++) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        for (int i = 256; --i >= 0;) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        for (int i = 0; i < 16; i++) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        makeMaps();\n        final int alphaSize = this.nInUse + 2;\n\n        /* Now the selectors */\n        final int nGroups = bsR(3);\n        final int nSelectors = bsR(15);\n\n        for (int i = 0; i < nSelectors; i++) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        /* Undo the MTF values for the selectors. */\n        for (int v = nGroups; --v >= 0;) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        for (int i = 0; i < nSelectors; i++) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        final char[][] len = dataShadow.temp_charArray2d;\n\n        /* Now the coding tables */\n        for (int t = 0; t < nGroups; t++) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        // finally create the Huffman tables\n        createHuffmanDecodingTables(alphaSize, nGroups);\n    }\n\n    /**\n     * Called by recvDecodingTables() exclusively.\n     */\n    private void createHuffmanDecodingTables(final int alphaSize,\n                                             final int nGroups) {\n         //The specific code has been omitted, but there is no error\n        }\n\n    private void getAndMoveToFrontDecode() throws IOException {\n        this.origPtr = bsR(24);\n        recvDecodingTables();\n\n        final InputStream inShadow = this.in;\n        final Data dataShadow = this.data;\n        final byte[] ll8 = dataShadow.ll8;\n        final int[] unzftab = dataShadow.unzftab;\n        final byte[] selector = dataShadow.selector;\n        final byte[] seqToUnseq = dataShadow.seqToUnseq;\n        final char[] yy = dataShadow.getAndMoveToFrontDecode_yy;\n        final int[] minLens = dataShadow.minLens;\n        final int[][] limit = dataShadow.limit;\n        final int[][] base = dataShadow.base;\n        final int[][] perm = dataShadow.perm;\n        final int limitLast = this.blockSize100k * 100000;\n\n        /*\n         * Setting up the unzftab entries here is not strictly necessary, but it\n         * does save having to do it later in a separate pass, and so saves a\n         * block's worth of cache misses.\n         */\n        for (int i = 256; --i >= 0;) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        int groupNo = 0;\n        int groupPos = G_SIZE - 1;\n        final int eob = this.nInUse + 1;\n        int nextSym = getAndMoveToFrontDecode0(0);\n        int bsBuffShadow = this.bsBuff;\n        int bsLiveShadow = this.bsLive;\n        int lastShadow = -1;\n        int zt = selector[groupNo] & 0xff;\n        int[] base_zt = base[zt];\n        int[] limit_zt = limit[zt];\n        int[] perm_zt = perm[zt];\n        int minLens_zt = minLens[zt];\n\n        while (nextSym != eob) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        this.last = lastShadow;\n        this.bsLive = bsLiveShadow;\n        this.bsBuff = bsBuffShadow;\n    }\n\n    private int getAndMoveToFrontDecode0(final int groupNo) throws IOException {\n        final InputStream inShadow = this.in;\n        final Data dataShadow = this.data;\n        final int zt = dataShadow.selector[groupNo] & 0xff;\n        final int[] limit_zt = dataShadow.limit[zt];\n        int zn = dataShadow.minLens[zt];\n        int zvec = bsR(zn);\n        int bsLiveShadow = this.bsLive;\n        int bsBuffShadow = this.bsBuff;\n\n        while (zvec > limit_zt[zn]) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        this.bsLive = bsLiveShadow;\n        this.bsBuff = bsBuffShadow;\n\n        return dataShadow.perm[zt][zvec - dataShadow.base[zt][zn]];\n    }\n\n    private int setupBlock() throws IOException {\n        if (currentState == EOF || this.data == null) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        final int[] cftab = this.data.cftab;\n        final int[] tt = this.data.initTT(this.last + 1);\n        final byte[] ll8 = this.data.ll8;\n        cftab[0] = 0;\n        System.arraycopy(this.data.unzftab, 0, cftab, 1, 256);\n\n        for (int i = 1, c = cftab[0]; i <= 256; i++) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        for (int i = 0, lastShadow = this.last; i <= lastShadow; i++) {\n         //The specific code has been omitted, but there is no error\n        }\n\n        if ((this.origPtr < 0) || (this.origPtr >= tt.length)) {\n            throw new IOException(\"stream corrupted\");\n        }\n\n        this.su_tPos = tt[this.origPtr];\n        this.su_count = 0;\n        this.su_i2 = 0;\n        this.su_ch2 = 256; /* not a char and not EOF */\n\n        if (this.blockRandomised) {\n         //The specific code has been omitted, but there is no error\n        }\n        return setupNoRandPartA();\n    }\n\n    private int setupRandPartA() throws IOException {\n        if (this.su_i2 <= this.last) {\n         //The specific code has been omitted, but there is no error\n        } else {\n            endBlock();\n            initBlock();\n            return setupBlock();\n        }\n    }\n\n    private int setupNoRandPartA() throws IOException {\n        if (this.su_i2 <= this.last) {\n         //The specific code has been omitted, but there is no error\n        } else {\n            this.currentState = NO_RAND_PART_A_STATE;\n            endBlock();\n            initBlock();\n            return setupBlock();\n        }\n    }\n\n    private int setupRandPartB() throws IOException {\n        if (this.su_ch2 != this.su_chPrev) {\n         //The specific code has been omitted, but there is no error\n        } else if (++this.su_count >= 4) {\n         //The specific code has been omitted, but there is no error\n        } else {\n            this.currentState = RAND_PART_A_STATE;\n            return setupRandPartA();\n        }\n    }\n\n    private int setupRandPartC() throws IOException {\n        if (this.su_j2 < this.su_z) {\n         //The specific code has been omitted, but there is no error\n        } else {\n            this.currentState = RAND_PART_A_STATE;\n            this.su_i2++;\n            this.su_count = 0;\n            return setupRandPartA();\n        }\n    }\n\n    private int setupNoRandPartB() throws IOException {\n        if (this.su_ch2 != this.su_chPrev) {\n         //The specific code has been omitted, but there is no error\n        } else if (++this.su_count >= 4) {\n         //The specific code has been omitted, but there is no error\n        } else {\n            return setupNoRandPartA();\n        }\n    }\n\n    private int setupNoRandPartC() throws IOException {\n        if (this.su_j2 < this.su_z) {\n         //The specific code has been omitted, but there is no error\n        } else {\n            this.su_i2++;\n            this.su_count = 0;\n            return setupNoRandPartA();\n        }\n    }\n\n    private static final class Data {\n         //The specific code has been omitted, but there is no error\n        }\n\n    /**\n     * Checks if the signature matches what is expected for a bzip2 file.\n     * \n     * @param signature\n     *            the bytes to check\n     * @param length\n     *            the number of bytes to check\n     * @return true, if this stream is a bzip2 compressed stream, false otherwise\n     * \n     * @since 1.1\n     */\n    public static boolean matches(byte[] signature, int length) {\n         //The specific code has been omitted, but there is no error\n        }\n}", "Data": "    private static final class Data {\n         //The specific code has been omitted, but there is no error\n        }"}