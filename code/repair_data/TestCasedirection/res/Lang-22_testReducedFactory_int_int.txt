Intent: The test case `testReducedFactory_int_int()` aims to verify the functionality of the `Fraction.getReducedFraction(int numerator, int denominator)` method. It checks that the method correctly reduces fractions to their simplest form, handles zero and negative values appropriately, and throws an exception when the denominator is zero. Additionally, it tests edge cases involving extreme values like `Integer.MIN_VALUE`.

Repair strategy: The source code needs modifications to handle edge cases involving the minimum integer value, especially operations that could lead to integer overflow. Specifically, the `greatestCommonDivisor` function and the fraction reduction logic within `getReducedFraction` need to be reviewed and possibly refactored to ensure that operations on `Integer.MIN_VALUE` do not lead to overflow or incorrect calculations. Implement checks and balances to handle arithmetic operations involving `Integer.MIN_VALUE` safely, ensuring that negations and divisions are managed to avoid overflow and maintain accuracy.