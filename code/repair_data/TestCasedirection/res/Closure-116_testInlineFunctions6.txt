Intent: The intent of the test case `testInlineFunctions6` is to verify the correct inline expansion of a function call with parameters that involve calculations and function applications within the arguments. The function `BAR_FN` takes three parameters, where the third parameter `z` is a function applied to the result of another function `nochg` applied to the sum of the first two parameters `x` and `y`.

Repair strategy: The source code appears to be inadequately handling scenarios where function arguments are complex expressions that involve other function calls or operations. Specifically, the code should properly manage the inlining when the arguments and parameters involve nested function calls and operations, ensuring that side-effects and state mutations are correctly accounted for without causing errors or incorrect behavior. The repair should focus on enhancing the logic within `NodeUtil.mayEffectMutableState` and other similar checks to handle complex expressions robustly, ensuring that all dependencies and effects are considered when deciding whether inlining is possible. This might involve refining the logic that analyzes the side-effects and state changes due to nested or complex function calls within the arguments.