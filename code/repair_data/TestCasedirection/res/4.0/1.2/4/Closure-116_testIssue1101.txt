Intent: The test case `testIssue1101` aims to verify the correct inlining of a function where a variable `saved` is passed as an argument and later used in conjunction with a function call `foo(obj)`. The inlining should ensure that the variable `saved` retains the correct value from `obj["prop"]` and that the function call `foo(obj)` is correctly executed and combined with `saved`.

Repair strategy: Review the handling of function parameters and their interaction with the call node in the `canInlineReferenceDirectly` method. Ensure that the inlining logic properly accounts for the preservation of variable states (like `saved`) when inlined together with other expressions (e.g., `foo(obj)`). Specifically, check if the original function's context (like closures or variable scopes) is maintained after inlining, and verify that side effects or state changes within the function call `foo(obj)` are correctly handled. Additionally, confirm that the conditions checking for side effects and mutable state are accurately validating the nodes to prevent erroneous blocking of valid inlining cases. Adjust the code to handle more complex scenarios where the function's return expression involves both direct variable references and function calls.