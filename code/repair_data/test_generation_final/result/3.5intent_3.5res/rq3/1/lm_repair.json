{"Time-14.java": [{"output": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(partial.getChronology()).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n        return partial.getChronology().get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}", "diff": "--- \n+++ \n@@ -1,17 +1,14 @@\n public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-    // overridden as superclass algorithm can't handle\n-    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n     if (valueToAdd == 0) {\n         return values;\n     }\n-        // month is largest field and being added to, such as month-day\n     if (DateTimeUtils.isContiguous(partial)) {\n         long instant = 0L;\n         for (int i = 0, isize = partial.size(); i < isize; i++) {\n-            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+            instant = partial.getFieldType(i).getField(partial.getChronology()).set(instant, values[i]);\n         }\n         instant = add(instant, valueToAdd);\n-        return iChronology.get(partial, instant);\n+        return partial.getChronology().get(partial, instant);\n     } else {\n         return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}], "Time-16.java": [{"output": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n    \n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n    \n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n    instant.setMillis(bucket.computeMillis(false, text));\n    if (bucket.getOffsetInteger() != null) {\n        int parsedOffset = bucket.getOffsetInteger();\n        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n        chrono = chrono.withZone(parsedZone);\n    } else if (bucket.getZone() != null) {\n        chrono = chrono.withZone(bucket.getZone());\n    }\n    instant.setChronology(chrono);\n    if (iZone != null) {\n        instant.setZone(iZone);\n    }\n    return newPos;\n}", "diff": "--- \n+++ \n@@ -13,7 +13,7 @@\n         instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n     int newPos = parser.parseInto(bucket, text, position);\n     instant.setMillis(bucket.computeMillis(false, text));\n-    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n+    if (bucket.getOffsetInteger() != null) {\n         int parsedOffset = bucket.getOffsetInteger();\n         DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n         chrono = chrono.withZone(parsedZone);\n", "finish_reason": "stop", "valid": false, "num": 1}], "Time-17.java": [{"output": "public long adjustOffset(long instant, boolean earlierOrLater) {\n    // a bit messy, but will work in all non-pathological cases\n\n    // evaluate 3 hours before and after to work out if anything is happening\n    long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n    long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n    if (instantBefore == instantAfter) {\n        return instant;  // not an overlap (less than is a gap, equal is normal case)\n    }\n\n    // work out range of instants that have duplicate local times\n    long local = convertUTCToLocal(instant);\n    return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);\n}", "diff": "--- \n+++ \n@@ -1,18 +1,14 @@\n public long adjustOffset(long instant, boolean earlierOrLater) {\n     // a bit messy, but will work in all non-pathological cases\n-    \n+\n     // evaluate 3 hours before and after to work out if anything is happening\n     long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n     long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n     if (instantBefore == instantAfter) {\n         return instant;  // not an overlap (less than is a gap, equal is normal case)\n     }\n-    \n+\n     // work out range of instants that have duplicate local times\n     long local = convertUTCToLocal(instant);\n     return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);\n-    \n-    // calculate result\n-      // currently in later offset\n-      // currently in earlier offset\n }\n", "finish_reason": "stop", "valid": false, "num": 1}], "Time-18.java": [{"output": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                              int hourOfDay, int minuteOfHour,\n                              int secondOfMinute, int millisOfSecond)\nthrows IllegalArgumentException {\n    Chronology base;\n    if ((base = getBase()) != null) {\n        return base.getDateTimeMillis\n            (year, monthOfYear, dayOfMonth,\n             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    }\n\n    // Assume date is Gregorian.\n    long instant;\n    instant = iGregorianChronology.getDateTimeMillis\n        (year, monthOfYear, dayOfMonth,\n         hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    if (instant < iCutoverMillis) {\n        // Maybe it's Julian.\n        instant = iJulianChronology.getDateTimeMillis\n            (year, monthOfYear, dayOfMonth,\n             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        if (instant >= iCutoverMillis) {\n            // Okay, it's in the illegal cutover gap.\n            throw new IllegalArgumentException(\"Specified date does not exist\");\n        }\n    }\n    return instant;\n}", "diff": "--- \n+++ \n@@ -1,8 +1,7 @@\n public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                               int hourOfDay, int minuteOfHour,\n                               int secondOfMinute, int millisOfSecond)\n-    throws IllegalArgumentException\n-{\n+throws IllegalArgumentException {\n     Chronology base;\n     if ((base = getBase()) != null) {\n         return base.getDateTimeMillis\n@@ -12,9 +11,9 @@\n \n     // Assume date is Gregorian.\n     long instant;\n-        instant = iGregorianChronology.getDateTimeMillis\n-            (year, monthOfYear, dayOfMonth,\n-             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+    instant = iGregorianChronology.getDateTimeMillis\n+        (year, monthOfYear, dayOfMonth,\n+         hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n     if (instant < iCutoverMillis) {\n         // Maybe it's Julian.\n         instant = iJulianChronology.getDateTimeMillis\n", "finish_reason": "stop", "valid": false, "num": 1}], "Time-19.java": [{"output": "public int getOffsetFromLocal(long instantLocal) {\n    // get the offset at instantLocal (first estimate)\n    final int offsetLocal = getOffset(instantLocal);\n    // adjust instantLocal using the estimate and recalc the offset\n    final long instantAdjusted = instantLocal - offsetLocal;\n    final int offsetAdjusted = getOffset(instantAdjusted);\n    // if the offsets differ, we must be near a DST boundary\n    if (offsetLocal != offsetAdjusted) {\n        // we need to ensure that time is always after the DST gap\n        // this happens naturally for positive offsets, but not for negative\n        if ((offsetLocal - offsetAdjusted) < 0) {\n            // if we just return offsetAdjusted then the time is pushed\n            // back before the transition, whereas it should be\n            // on or after the transition\n            long nextLocal = nextTransition(instantAdjusted);\n            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n            if (nextLocal != nextAdjusted) {\n                return offsetLocal;\n            }\n        }\n    } else if (offsetLocal > 0) {\n        long prev = previousTransition(instantAdjusted);\n        if (prev < instantAdjusted) {\n            int offsetPrev = getOffset(prev);\n            int diff = offsetPrev - offsetLocal;\n            if (instantAdjusted - prev <= diff) {\n                return offsetPrev;\n            }\n        }\n    }\n    return offsetAdjusted;\n}", "diff": "", "finish_reason": "stop", "valid": false, "num": 1}], "Time-20.java": [{"output": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n    String str = text.substring(position);\n    for (String id : ALL_IDS) {\n        if (str.startsWith(id)) {\n            bucket.setZone(DateTimeZone.forID(id));\n            return position + id.length();\n        }\n    }\n    return -1;\n}", "diff": "--- \n+++ \n@@ -6,5 +6,5 @@\n             return position + id.length();\n         }\n     }\n-    return ~position;\n+    return -1;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}], "Time-22.java": [{"output": "protected BasePeriod(long duration) {\n    this(duration, null, null);\n    // bug [3264409]\n}", "diff": "", "finish_reason": "stop", "valid": false, "num": 1}], "Time-23.java": [{"output": "private static synchronized String getConvertedId(String id) {\n    Map<String, String> map = cZoneIdConversion;\n    if (map == null) {\n        // Backwards compatibility with TimeZone.\n        map = new HashMap<String, String>();\n        map.put(\"GMT\", \"UTC\");\n        map.put(\"MIT\", \"Pacific/Apia\");\n        map.put(\"HST\", \"Pacific/Honolulu\");  // JDK 1.1 compatible\n        map.put(\"AST\", \"America/Anchorage\");\n        map.put(\"PST\", \"America/Los_Angeles\");\n        map.put(\"MST\", \"America/Denver\");  // JDK 1.1 compatible\n        map.put(\"PNT\", \"America/Phoenix\");\n        map.put(\"CST\", \"America/Chicago\");\n        map.put(\"EST\", \"America/New_York\");  // JDK 1.1 compatible\n        map.put(\"IET\", \"America/Indianapolis\");\n        map.put(\"PRT\", \"America/Puerto_Rico\");\n        map.put(\"CNT\", \"America/St_Johns\");\n        map.put(\"AGT\", \"America/Buenos_Aires\");\n        map.put(\"BET\", \"America/Sao_Paulo\");\n        map.put(\"WET\", \"Europe/London\");\n        map.put(\"ECT\", \"Europe/Paris\");\n        map.put(\"ART\", \"Africa/Cairo\");\n        map.put(\"CAT\", \"Africa/Harare\");\n        map.put(\"EET\", \"Europe/Bucharest\");\n        map.put(\"EAT\", \"Africa/Addis_Ababa\");\n        map.put(\"MET\", \"Asia/Tehran\");\n        map.put(\"NET\", \"Asia/Yerevan\");\n        map.put(\"PLT\", \"Asia/Karachi\");\n        map.put(\"IST\", \"Asia/Calcutta\");\n        map.put(\"BST\", \"Asia/Dhaka\");\n        map.put(\"VST\", \"Asia/Saigon\");\n        map.put(\"CTT\", \"Asia/Shanghai\");\n        map.put(\"JST\", \"Asia/Tokyo\");\n        map.put(\"ACT\", \"Australia/Darwin\");\n        map.put(\"AET\", \"Australia/Sydney\");\n        map.put(\"SST\", \"Pacific/Guadalcanal\");\n        map.put(\"NST\", \"Pacific/Auckland\");\n        cZoneIdConversion = map;\n    }\n    return map.get(id);\n}", "diff": "", "finish_reason": "stop", "valid": false, "num": 1}], "Time-24.java": [{"output": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n    Arrays.sort(savedFields, 0, count);\n    if (count > 0) {\n        // alter base year for parsing if first field is month or day\n        DurationField months = DurationFieldType.months().getField(iChrono);\n        DurationField days = DurationFieldType.days().getField(iChrono);\n        DurationField first = savedFields[0].iField.getDurationField();\n        if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n            saveField(DateTimeFieldType.year(), iDefaultYear);\n            return computeMillis(resetFields, text);\n        }\n    }\n\n    long millis = iMillis;\n    try {\n        for (int i = 0; i < count; i++) {\n            millis = savedFields[i].set(millis, resetFields);\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n\n    if (iZone == null) {\n        millis -= iOffset;\n    } else {\n        int offset = iZone.getOffsetFromLocal(millis);\n        millis -= offset;\n        if (offset != iZone.getOffset(millis)) {\n            String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n            if (text != null) {\n                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n\n    return millis;\n}", "diff": "--- \n+++ \n@@ -5,7 +5,7 @@\n         iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n         iSavedFieldsShared = false;\n     }\n-    sort(savedFields, count);\n+    Arrays.sort(savedFields, 0, count);\n     if (count > 0) {\n         // alter base year for parsing if first field is month or day\n         DurationField months = DurationFieldType.months().getField(iChrono);\n@@ -28,7 +28,7 @@\n         }\n         throw e;\n     }\n-    \n+\n     if (iZone == null) {\n         millis -= iOffset;\n     } else {\n@@ -36,13 +36,13 @@\n         millis -= offset;\n         if (offset != iZone.getOffset(millis)) {\n             String message =\n-                \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n+                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n             if (text != null) {\n                 message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n             }\n             throw new IllegalArgumentException(message);\n         }\n     }\n-    \n+\n     return millis;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}], "Time-25.java": [{"output": "public int getOffsetFromLocal(long instantLocal) {\n    // get the offset at instantLocal (first estimate)\n    final int offsetLocal = getOffset(instantLocal);\n    // adjust instantLocal using the estimate and recalc the offset\n    final long instantAdjusted = instantLocal - offsetLocal;\n    final int offsetAdjusted = getOffset(instantAdjusted);\n    // if the offsets differ, we must be near a DST boundary\n    if (offsetLocal != offsetAdjusted) {\n        // we need to ensure that time is always after the DST gap\n        // this happens naturally for positive offsets, but not for negative\n        if ((offsetLocal - offsetAdjusted) < 0) {\n            // if we just return offsetAdjusted then the time is pushed\n            // back before the transition, whereas it should be\n            // on or after the transition\n            long nextLocal = nextTransition(instantAdjusted);\n            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n            if (nextLocal != nextAdjusted) {\n                return offsetLocal;\n            }\n        }\n    }\n    return offsetAdjusted;\n}", "diff": "", "finish_reason": "stop", "valid": false, "num": 1}], "Time-27.java": [{"output": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    int size = elementPairs.size();\n    if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n        Separator sep = (Separator) elementPairs.get(0);\n        PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n        sep = sep.finish(f.getPrinter(), f.getParser());\n        return new PeriodFormatter(sep, sep);\n    }\n    Object[] comp = createComposite(elementPairs);\n    if (notPrinter) {\n        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n    } else if (notParser) {\n        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n    } else {\n        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n    }\n}", "diff": "--- \n+++ \n@@ -5,9 +5,9 @@\n     int size = elementPairs.size();\n     if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n         Separator sep = (Separator) elementPairs.get(0);\n-            PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-            sep = sep.finish(f.getPrinter(), f.getParser());\n-            return new PeriodFormatter(sep, sep);\n+        PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n+        sep = sep.finish(f.getPrinter(), f.getParser());\n+        return new PeriodFormatter(sep, sep);\n     }\n     Object[] comp = createComposite(elementPairs);\n     if (notPrinter) {\n", "finish_reason": "stop", "valid": false, "num": 1}], "Time-4.java": [{"output": "public Partial with(DateTimeFieldType fieldType, int value) {\n    if (fieldType == null) {\n        throw new IllegalArgumentException(\"The field type must not be null\");\n    }\n    int index = indexOf(fieldType);\n    if (index == -1) {\n        DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n        int[] newValues = new int[newTypes.length];\n        \n        // find correct insertion point to keep largest-smallest order\n        int i = 0;\n        DurationField unitField = fieldType.getDurationType().getField(iChronology);\n        if (unitField.isSupported()) {\n            for (; i < iTypes.length; i++) {\n                DateTimeFieldType loopType = iTypes[i];\n                DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n                if (loopUnitField.isSupported()) {\n                    int compare = unitField.compareTo(loopUnitField);\n                    if (compare > 0) {\n                        break;\n                    } else if (compare == 0) {\n                        DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);\n                        DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n                        if (rangeField.compareTo(loopRangeField) > 0) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        System.arraycopy(iTypes, 0, newTypes, 0, i);\n        System.arraycopy(iValues, 0, newValues, 0, i);\n        newTypes[i] = fieldType;\n        newValues[i] = value;\n        System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);\n        System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n        // use public constructor to ensure full validation\n        // this isn't overly efficient, but is safe\n        Partial newPartial = new Partial(iChronology, newTypes, newValues);\n        iChronology.validate(newPartial, newValues);\n        return newPartial;\n    }\n    if (value == getValue(index)) {\n        return this;\n    }\n    int[] newValues = getValues();\n    newValues = getField(index).set(this, index, newValues, value);\n    return new Partial(this, newValues);\n}", "diff": "", "finish_reason": "stop", "valid": false, "num": 1}], "Time-5.java": [{"output": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    int years = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        years += months / 12;\n        months = months % 12;\n        if (years != 0) {\n            result = result.withYears(years);\n        }\n        if (months != 0) {\n            result = result.withMonths(months);\n        }\n    }\n    return result;\n}", "diff": "--- \n+++ \n@@ -10,7 +10,7 @@\n     int years = getYears();\n     int months = getMonths();\n     if (years != 0 || months != 0) {\n-        years = FieldUtils.safeAdd(years, months / 12);\n+        years += months / 12;\n         months = months % 12;\n         if (years != 0) {\n             result = result.withYears(years);\n", "finish_reason": "stop", "valid": false, "num": 1}], "Time-7.java": [{"output": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n    int defaultYear = chrono.year().get(instantLocal);\n\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n    instant.setMillis(bucket.computeMillis(false, text));\n    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n        int parsedOffset = bucket.getOffsetInteger();\n        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n        chrono = chrono.withZone(parsedZone);\n    } else if (bucket.getZone() != null) {\n        chrono = chrono.withZone(bucket.getZone());\n    }\n    instant.setChronology(chrono);\n    if (iZone != null) {\n        instant.setZone(iZone);\n    }\n    return newPos;\n}", "diff": "--- \n+++ \n@@ -3,13 +3,13 @@\n     if (instant == null) {\n         throw new IllegalArgumentException(\"Instant must not be null\");\n     }\n-    \n+\n     long instantMillis = instant.getMillis();\n     Chronology chrono = instant.getChronology();\n     long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n     chrono = selectChronology(chrono);\n     int defaultYear = chrono.year().get(instantLocal);\n-    \n+\n     DateTimeParserBucket bucket = new DateTimeParserBucket(\n         instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n     int newPos = parser.parseInto(bucket, text, position);\n", "finish_reason": "stop", "valid": false, "num": 1}], "Time-8.java": [{"output": "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n    if (hoursOffset == 0 && minutesOffset == 0) {\n        return DateTimeZone.UTC;\n    }\n    if (hoursOffset < -23 || hoursOffset > 23) {\n        throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n    }\n    if (minutesOffset < 0 || minutesOffset > 59) {\n        throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n    }\n    int offset = 0;\n    try {\n        int hoursInMinutes = hoursOffset * 60;\n        if (hoursInMinutes < 0) {\n            minutesOffset = hoursInMinutes - minutesOffset;\n        } else {\n            minutesOffset = hoursInMinutes + minutesOffset;\n        }\n        offset = minutesOffset * DateTimeConstants.MILLIS_PER_MINUTE;\n    } catch (ArithmeticException ex) {\n        throw new IllegalArgumentException(\"Offset is too large\");\n    }\n    return forOffsetMillis(offset);\n}", "diff": "--- \n+++ \n@@ -16,7 +16,7 @@\n         } else {\n             minutesOffset = hoursInMinutes + minutesOffset;\n         }\n-        offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n+        offset = minutesOffset * DateTimeConstants.MILLIS_PER_MINUTE;\n     } catch (ArithmeticException ex) {\n         throw new IllegalArgumentException(\"Offset is too large\");\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}]}