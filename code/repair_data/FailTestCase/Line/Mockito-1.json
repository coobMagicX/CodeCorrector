{"should_capture_arguments_when_args_count_does_NOT_match": "        invocationMatcher.captureArgumentsFrom(invocation);\n", "can_instantiate_class_with_parameterized_constructor": "        new FieldInitializer(this, field(\"noDefaultConstructor\"), resolver).initialize();\n", "should_report_failure_if_constructor_throws_exception": "            new ParameterizedConstructorInstantiator(this, field(\"withThrowingConstructor\"), resolver).instantiate();\n", "should_fail_if_an_argument_instance_type_do_not_match_wanted_type": "            new ParameterizedConstructorInstantiator(this, field(\"withMultipleConstructor\"), resolver).instantiate();\n", "should_instantiate_type_with_vararg_constructor": "        new ParameterizedConstructorInstantiator(this, field(\"withVarargConstructor\"), resolver).instantiate();\n", "should_instantiate_type_if_resolver_provide_matching_types": "        new ParameterizedConstructorInstantiator(this, field(\"withMultipleConstructor\"), resolver).instantiate();\n", "shouldRemoveAllStubbing": "        when(mock.objectReturningMethod(200)).thenReturn(200);\n", "shouldVerifyWithNullVarArgArray": "        Mockito.verify(foo).varArgs((String[]) Mockito.anyObject());\n", "shouldVerifyWithAnyObject": "        Mockito.verify(foo).varArgs((String[]) Mockito.anyObject());\n", "shouldStubBooleanVarargs": "        assertEquals(true, mock.withBooleanVarargs(1));\n", "shouldMatchEasilyEmptyVararg": "        assertEquals(-1, mock.foo());\n", "shouldVerifyBooleanVarargs": "        verify(mock).withBooleanVarargs(1);\n", "shouldStubCorrectlyWhenMixedVarargsUsed": "        String result = mixedVarargs.doSomething(\"hello\",(String[]) null);\n", "shouldStubStringVarargs": "        assertEquals(\"1\", mock.withStringVarargsReturningString(1));\n", "shouldStubCorrectlyWhenDoubleStringAndMixedVarargsUsed": "        String result = mixedVarargs.doSomething(\"one\", \"two\", (String[])null);\n", "shouldVerifyStringVarargs": "        verify(mock).withStringVarargs(1);\n", "shouldVerifyObjectVarargs": "        verify(mock).withObjectVarargs(1);\n", "shouldNotThrowAnyException": "        assertEquals(1, foo.blah(\"foo\", \"bar\"));\n", "shouldVerifyCorrectlyWithAnyVarargs": "        verify(table, times(2)).newRow(anyString(), (String[]) anyVararg());\n", "shouldVerifyCorrectlyNumberOfInvocationsUsingAnyVarargAndEqualArgument": "        verify(table, times(2)).newRow(eq(\"x\"), (String[]) anyVararg());\n", "shouldStubUsingAnyVarargs": "        assertEquals(\"foo\", mock.run(\"a\", \"b\"));\n", "shouldVerifyUsingMatchers": "        assertEquals(\"stubbed\", three.varargsObject(5, \"first arg\", \"second arg\"));\n", "test_stub_only_not_verifiable": "        when(localMock.objectReturningMethod(200)).thenReturn(200);\n", "should_evaluate_latest_stubbing_first": "        when(mock.objectReturningMethod(200)).thenReturn(200);\n", "shouldEvaluateLatestStubbingFirst": "        stub(mock.objectReturningMethod(200)).toReturn(200);\n", "shouldUseEqualsToVerifyMethodVarargs": "        verify(mockOne, times(2)).varargsObject(1, textOne, textOne);\n"}