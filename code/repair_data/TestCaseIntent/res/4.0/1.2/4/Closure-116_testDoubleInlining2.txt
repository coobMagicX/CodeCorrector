Intent: The test case `testDoubleInlining2` is designed to verify if the `canInlineReferenceDirectly` method correctly handles the scenario where one function is passed as an argument to another function and both are eligible for inlining. Specifically, it tests if function `bar` which simply returns its input, can be inlined into function `foo`, and then checks if `foo` itself, after inlining `bar`, can be further inlined directly where it's called.

Repair strategy: Examine the condition checks within `canInlineReferenceDirectly` that might be incorrectly preventing the inlining of function calls like those in the test case. Especially focus on the conditions checking for side-effects and mutable states, as these might be too restrictive or misinterpreted in scenarios involving nested function calls. Adjust the logic to more accurately assess when inlining is safe, particularly ensuring that function calls passed as parameters are handled correctly. Ensure that the method correctly identifies and handles simple pass-through functions like `bar` in the test scenario, which should not prevent inlining of the outer function `foo`.